/*
 *  Extension for lpp that interfaces to the clang api for semantic manipulation of 
 *  C/C++ code via lpp.
 */

#ifndef _lppclang_lppclang_h
#define _lppclang_lppclang_h

#include "common.h"
#include "unicode.h"

using namespace iro;

struct AST;

enum DeclKind
{
	Invalid,

	// Not handled yet by this api
	Unknown,

	// A top level function
	Function,

	// A function on a structure
	Method,

	// A parameter of a method or function
	Parameter,

	// A local or global variable
	Variable,

	// A variable member of a structure
	Field,

	// Literal types
	IntegerLiteral,
	FloatLiteral,
	StringLiteral,
	CharacterLiteral,
};

struct Decl;
struct FuncArgs;

extern "C"
{

AST* createASTFromString(str s);

Decl* getTranslationUnitDecl(AST* ast);

Decl* getNextDecl(Decl* decl);

// these apply to functions and methods
str getFunctionName(Decl* decl);
str getFunctionReturnType(Decl* decl);
// returns a handle to an array of functions args
// which is interacted with via the following functions
FuncArgs* getFunctionArgs();





b8 declIsVariable(Decl* decl);

}

#endif
