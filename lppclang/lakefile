mode    ?= "debug"
verbose ?= false

build_dir = "build/"..mode.."/"

lppclang := lake.target(build_dir.."lppclang")

files := {}

files.c = lake.find("src/*.cpp")
lake.concat(files.c, lake.find("src/iro/src/*.cpp"))
lake.concat(files.c, lake.find("src/iro/src/containers/*.cpp"))
lake.concat(files.c, lake.find("src/iro/src/io/*.cpp"))
lake.concat(files.c, lake.find("src/iro/src/json/*.cpp"))
lake.concat(files.c, lake.find("src/iro/src/memory/*.cpp"))
lake.concat(files.c, lake.find("src/iro/src/fs/*.cpp"))
lake.concat(files.c, lake.find("src/iro/src/time/*.cpp"))
files.o = lake.replace(files.c, "(src/.-)%.cpp", build_dir.."%1.o")
files.d = lake.replace(files.o, "(.-)%.o", "%1.d")

compiler     := "clang++"
linker       := "clang++"
preprocessor := "cpp"

string.starts_with = function(self, s)
	return self:sub(1,#s) == s
end

compiler_flags := 
$[
	
	-std=c++20
	-Iclang/include
	-I/home/sushi/llvm-build/build/tools/clang/include
	-I/home/sushi/llvm-build/build/include
	-Isrc
	-Isrc/iro/src
	-Wno-switch
	-fcolor-diagnostics
	-fno-caret-diagnostics
	-Wno-#warnings
	-fno-rtti
]

if mode == "debug" then
	compiler_flags ..= $[ 
		-O0 
		-ggdb3 
	]
else
	compiler_flags ..= "-O2"
end

linker_flags := 
$[
	
	-Lclang/lib
	-shared

	-Wl,--start-group

      -lLLVMWindowsManifest
-lLLVMXRay
-lLLVMLibDriver
-lLLVMDlltoolDriver
-lLLVMTextAPIBinaryReader
-lLLVMCoverage
-lLLVMLineEditor
-lLLVMXCoreDisassembler
-lLLVMXCoreCodeGen
-lLLVMXCoreDesc
-lLLVMXCoreInfo
-lLLVMX86TargetMCA
-lLLVMX86Disassembler
-lLLVMX86AsmParser
-lLLVMX86CodeGen
-lLLVMX86Desc
-lLLVMX86Info
-lLLVMWebAssemblyDisassembler
-lLLVMWebAssemblyAsmParser
-lLLVMWebAssemblyCodeGen
-lLLVMWebAssemblyUtils
-lLLVMWebAssemblyDesc
-lLLVMWebAssemblyInfo
-lLLVMVEDisassembler
-lLLVMVEAsmParser
-lLLVMVECodeGen
-lLLVMVEDesc
-lLLVMVEInfo
-lLLVMSystemZDisassembler
-lLLVMSystemZAsmParser
-lLLVMSystemZCodeGen
-lLLVMSystemZDesc
-lLLVMSystemZInfo
-lLLVMSparcDisassembler
-lLLVMSparcAsmParser
-lLLVMSparcCodeGen
-lLLVMSparcDesc
-lLLVMSparcInfo
-lLLVMRISCVTargetMCA
-lLLVMRISCVDisassembler
-lLLVMRISCVAsmParser
-lLLVMRISCVCodeGen
-lLLVMRISCVDesc
-lLLVMRISCVInfo
-lLLVMPowerPCDisassembler
-lLLVMPowerPCAsmParser
-lLLVMPowerPCCodeGen
-lLLVMPowerPCDesc
-lLLVMPowerPCInfo
-lLLVMNVPTXCodeGen
-lLLVMNVPTXDesc
-lLLVMNVPTXInfo
-lLLVMMSP430Disassembler
-lLLVMMSP430AsmParser
-lLLVMMSP430CodeGen
-lLLVMMSP430Desc
-lLLVMMSP430Info
-lLLVMMipsDisassembler
-lLLVMMipsAsmParser
-lLLVMMipsCodeGen
-lLLVMMipsDesc
-lLLVMMipsInfo
-lLLVMLoongArchDisassembler
-lLLVMLoongArchAsmParser
-lLLVMLoongArchCodeGen
-lLLVMLoongArchDesc
-lLLVMLoongArchInfo
-lLLVMLanaiDisassembler
-lLLVMLanaiCodeGen
-lLLVMLanaiAsmParser
-lLLVMLanaiDesc
-lLLVMLanaiInfo
-lLLVMHexagonDisassembler
-lLLVMHexagonCodeGen
-lLLVMHexagonAsmParser
-lLLVMHexagonDesc
-lLLVMHexagonInfo
-lLLVMBPFDisassembler
-lLLVMBPFAsmParser
-lLLVMBPFCodeGen
-lLLVMBPFDesc
-lLLVMBPFInfo
-lLLVMAVRDisassembler
-lLLVMAVRAsmParser
-lLLVMAVRCodeGen
-lLLVMAVRDesc
-lLLVMAVRInfo
-lLLVMARMDisassembler
-lLLVMARMAsmParser
-lLLVMARMCodeGen
-lLLVMARMDesc
-lLLVMARMUtils
-lLLVMARMInfo
-lLLVMAMDGPUTargetMCA
-lLLVMAMDGPUDisassembler
-lLLVMAMDGPUAsmParser
-lLLVMAMDGPUCodeGen
-lLLVMAMDGPUDesc
-lLLVMAMDGPUUtils
-lLLVMAMDGPUInfo
-lLLVMAArch64Disassembler
-lLLVMAArch64AsmParser
-lLLVMAArch64CodeGen
-lLLVMAArch64Desc
-lLLVMAArch64Utils
-lLLVMAArch64Info
-lLLVMOrcDebugging
-lLLVMOrcJIT
-lLLVMWindowsDriver
-lLLVMMCJIT
-lLLVMJITLink
-lLLVMInterpreter
-lLLVMExecutionEngine
-lLLVMRuntimeDyld
-lLLVMOrcTargetProcess
-lLLVMOrcShared
-lLLVMDWP
-lLLVMDebugInfoLogicalView
-lLLVMDebugInfoGSYM
-lLLVMOption
-lLLVMObjectYAML
-lLLVMObjCopy
-lLLVMMCA
-lLLVMMCDisassembler
-lLLVMLTO
-lLLVMPasses
-lLLVMHipStdPar
-lLLVMCFGuard
-lLLVMCoroutines
-lLLVMipo
-lLLVMVectorize
-lLLVMLinker
-lLLVMInstrumentation
-lLLVMFrontendOpenMP
-lLLVMFrontendOffloading
-lLLVMFrontendOpenACC
-lLLVMFrontendHLSL
-lLLVMFrontendDriver
-lLLVMExtensions
-lLLVMDWARFLinkerParallel
-lLLVMDWARFLinkerClassic
-lLLVMDWARFLinker
-lLLVMGlobalISel
-lLLVMMIRParser
-lLLVMAsmPrinter
-lLLVMSelectionDAG
-lLLVMCodeGen
-lLLVMTarget
-lLLVMObjCARCOpts
-lLLVMCodeGenTypes
-lLLVMIRPrinter
-lLLVMInterfaceStub
-lLLVMFileCheck
-lLLVMFuzzMutate
-lLLVMScalarOpts
-lLLVMInstCombine
-lLLVMAggressiveInstCombine
-lLLVMTransformUtils
-lLLVMBitWriter
-lLLVMAnalysis
-lLLVMProfileData
-lLLVMSymbolize
-lLLVMDebugInfoBTF
-lLLVMDebugInfoPDB
-lLLVMDebugInfoMSF
-lLLVMDebugInfoDWARF
-lLLVMObject
-lLLVMTextAPI
-lLLVMMCParser
-lLLVMIRReader
-lLLVMAsmParser
-lLLVMMC
-lLLVMDebugInfoCodeView
-lLLVMBitReader
-lLLVMFuzzerCLI
-lLLVMCore
-lLLVMRemarks
-lLLVMBitstreamReader
-lLLVMBinaryFormat
-lLLVMTargetParser
-lLLVMTableGen
-lLLVMSupport
-lLLVMDemangle

  -lclangToolingSyntax
  -lclangTooling
  -lclangStaticAnalyzerFrontend
  -lclangSerialization
  -lclangRewriteFrontend
  -lclangFrontend
  -lclangDriver
  -lclangAST
  -lclangBasic
  -lclangSupport


  -lclangAnalysis
    -lclangAnalysisFlowSensitive
    -lclangAnalysisFlowSensitiveModels
    -lclangAPINotes
    -lclangApplyReplacements
    -lclangARCMigrate
    -lclangAST
    -lclangASTMatchers
    -lclangBasic
    -lclangChangeNamespace
    -lclangCodeGen
    -lclangCrossTU
    -lclangDaemon
    -lclangDaemonTweaks
    -lclangDependencyScanning
    -lclangDirectoryWatcher
    -lclangdMain
    -lclangDoc
    -lclangdRemoteIndex
    -lclangDriver
    -lclangdSupport
    -lclangDynamicASTMatchers
    -lclangEdit
    -lclangExtractAPI
    -lclangFormat
    -lclangFrontend
    -lclangFrontendTool
    -lclangHandleCXX
    -lclangHandleLLVM
    -lclangIncludeCleaner
    -lclangIncludeFixer
    -lclangIncludeFixerPlugin
    -lclangIndex
    -lclangIndexSerialization
    -lclangInstallAPI
    -lclangInterpreter
    -lclangLex
    -lclangMove
    -lclangParse
    -lclangPseudo
    -lclangPseudoCLI
    -lclangPseudoCXX
    -lclangPseudoGrammar
    -lclangQuery
    -lclangReorderFields
    -lclangRewrite
    -lclangRewriteFrontend
    -lclangSema
    -lclangSerialization
    -lclangStaticAnalyzerCheckers
    -lclangStaticAnalyzerCore
    -lclangStaticAnalyzerFrontend
    -lclangTidy
    -lclangTidyAbseilModule
    -lclangTidyAlteraModule
    -lclangTidyAndroidModule
    -lclangTidyBoostModule
    -lclangTidyBugproneModule
    -lclangTidyCERTModule
    -lclangTidyConcurrencyModule
    -lclangTidyCppCoreGuidelinesModule
    -lclangTidyDarwinModule
    -lclangTidyFuchsiaModule
    -lclangTidyGoogleModule
    -lclangTidyHICPPModule
    -lclangTidyLinuxKernelModule
    -lclangTidyLLVMLibcModule
    -lclangTidyLLVMModule
    -lclangTidyMain
    -lclangTidyMiscModule
    -lclangTidyModernizeModule
    -lclangTidyMPIModule
    -lclangTidyObjCModule
    -lclangTidyOpenMPModule
    -lclangTidyPerformanceModule
    -lclangTidyPlugin
    -lclangTidyPortabilityModule
    -lclangTidyReadabilityModule
    -lclangTidyUtils
    -lclangTidyZirconModule
    -lclangTooling
    -lclangToolingASTDiff
    -lclangToolingCore
    -lclangToolingInclusions
    -lclangToolingInclusionsStdlib
    -lclangToolingRefactoring
    -lclangToolingSyntax
    -lclangTransformer

	-Wl,--end-group

-lLLVMSupport
-lLLVMBitstreamReader
-lLLVMTargetParser

]

--llvmlibs := lake.find("clang/lib/libclang*.a")
--llvmlibs ..= lake.find("clang/lib/libLLVM*.a")
--llvmlibs  = lake.replace(llvmlibs, "clang/lib/lib(%w+).a", "-l%1")
--for _,lib in ipairs(llvmlibs) do
--	print(lib)
--end

reset := "\027[0m"
green := "\027[0;32m"
blue  := "\027[0;34m"
red   := "\027[0;31m"

print_success := function(from, to, time)
	if to then
		io.write(green, from, reset, " -> ", blue, to, reset, " ", time, "s\n")
	else
		io.write(blue, from, reset, " ", time, "s\n")
	end
end

linker_recipe := function(input, output)
    return function()
        -- make sure the output path exists
        dir := tostring(output):match("(.*)/")
        lake.mkdir(dir, {make_parents = true})

        start := lake.get_highres_clock()
        result := ` $(linker) $(input) $(linker_flags) -o $(output) `
        time_took := (lake.get_highres_clock() - start) / 1000000

        if result.exit_status == 0 then
            io.write(blue, tostring(output), reset, " ", time_took, "s\n")
			io.write(result.stdout)
        else
            io.write(red, "compiling ", blue, tostring(output), red, " failed", reset, ":\n")
			io.write(result.stdout)
			error(red.."linker failed"..reset)
        end
    end
end

compiler_recipe := function(input, output)
    return function()
        dir := tostring(output):match("(.*)/")
        lake.mkdir(dir, {make_parents = true})

        start := lake.get_highres_clock()
        result := ` $(compiler) -c $(compiler_flags) $(input) -o $(output) `
        time_took := (lake.get_highres_clock() - start) / 1000000

        if result.exit_status == 0 then
            io.write(green, input, reset, " -> ", blue, output, reset, " ", time_took, "s\n")
			io.write(result.stdout)
        else
            io.write(red, "compiling ", blue, output, red, " failed", reset, ":\n")
			io.write(result.stdout)
			-- error(red.."compiler failed"..reset)
        end
    end
end

lppclang:depends_on(files.o):recipe(linker_recipe(files.o, lppclang))

for c_file, o_file in lake.zip(files.c, files.o) do
    lake.target(o_file):depends_on(c_file):recipe(compiler_recipe(c_file, o_file))
end

-- create dependency files based on the make rule cpp generates for each cpp file.
-- we reformat them to just be a newline separated list of files each cpp files depends on
-- and the lake dependencies are created below this for loop
for c_file, d_file in lake.zip(files.c, files.d) do
	lake.target( d_file )
		:uses( c_file )
		:recipe(function()
            dir := tostring(d_file):match("(.*)/")
            lake.mkdir(dir, {make_parents = true})

			-- cflags_str := os.getenv("NIX_CFLAGS_COMPILE")
			-- cflags := {}
			-- for word in cflags_str:gmatch("%S+") do table.insert(cflags, word) end

			result := ` clang++ -v $(c_file) $(compiler_flags) -MM -MG -MT $(lake.replace(d_file, "(.-)%.d", "%1.o")) `

			if result.exit_status ~= 0 then
				error("failed to create dep file '"..d_file.."':\n"..result.stdout)
			end

			result = lake.replace(result.stderr, "\\\n", "")
			
			out := ""

			for file in result:gmatch("%S+") do
				if file:sub(-1) ~= ":" then
					-- need to manually filter out 'new' because cpp doesn't find that its a 
					-- system header for whatever reason
					if file:starts_with("generated") then
						out = out.."src/"
					end
					out = out..file.."\n"
				end
			end

			file := io.open(d_file, "w")

			if not file then
				error("failed to open dep file for writing: '"..d_file.."'")
			end
			
			file:write(out)
			file:close()
		end)
end

-- load the dependency files that may or may not exist and 
-- create dependencies between the o file they refer to 
-- and the files in the file
for o_file, d_file in lake.zip(files.o, files.d) do
	file := io.open(d_file, "r")

	lake.target(o_file):depends_on(d_file)

	if file then
		str := file:read("*a")

		for file in str:gmatch("%S+") do
			lake.target(o_file):depends_on(file)
		end	
	end
end

script_target := function(scriptname, outname)
	spath := "src/scripts/"..scriptname
	opath := "src/generated/"..outname
	lake.target(opath)
		:depends_on(spath)
		:recipe(function()
			result := ` luajit $(spath) `
			if result.exit_status == 0 then
				io.write(green, spath, reset, " -> ", blue, opath, reset, "\n", result.stdout, "\n")
			else
				io.write(red, "failed to run script ", blue, spath, reset, ": \n", result.stdout, "\n")
			end
		end)
end   
