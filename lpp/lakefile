mode    ?= "debug"
verbose ?= false

build_dir = "build/"..mode.."/"

lpp := lake.target(build_dir.."lpp")

files := {}

files.c = lake.find("src/*.cpp")
lake.concat(files.c, lake.find("src/json/*.cpp"))
files.o = lake.replace(files.c, "(src/.-)%.cpp", build_dir.."%1.o")
files.d = lake.replace(files.o, "(.-)%.o", "%1.d")

compiler     := "clang++"
linker       := "clang++"
preprocessor := "cpp"

compiler_flags := 
$[

	-std=c++20
	-Iinclude
	-Isrc
	-Wno-switch
	-fcolor-diagnostics
	-fno-caret-diagnostics
	-Wno-#warnings

]

if mode == "debug" then
	compiler_flags ..= $[ 
		-O0 
		-ggdb3 
		-DLAKE_DEBUG=1
	]
else
	compiler_flags ..= "-O2"
end

linker_flags := 
$[

	-Llib
	-lluajit
	-lm
	-Wl,--export-dynamic

]

reset := "\027[0m"
green := "\027[0;32m"
blue  := "\027[0;34m"
red   := "\027[0;31m"

print_success := function(from, to, time)
	if to then
		io.write(green, from, reset, " -> ", blue, to, reset, " ", time, "s\n")
	else
		io.write(blue, from, reset, " ", time, "s\n")
	end
end

linker_recipe := function(input, output)
    return function()
        -- make sure the output path exists
        dir := tostring(output):match("(.*)/")
        lake.mkdir(dir, {make_parents = true})

        start := lake.get_highres_clock()
        result := ` $(linker) $(input) $(linker_flags) -o $(output) `
        time_took := (lake.get_highres_clock() - start) / 1000000

        if result.exit_status == 0 then
            io.write(blue, tostring(output), reset, " ", time_took, "s\n")
			io.write(result.stdout)
        else
            io.write(red, "compiling ", blue, tostring(output), red, " failed", reset, ":\n")
			io.write(result.stdout)
			error(red.."linker failed"..reset)
        end

    end
end

compiler_recipe := function(input, output)
    return function()
        dir := tostring(output):match("(.*)/")
        lake.mkdir(dir, {make_parents = true})

        start := lake.get_highres_clock()
        result := ` $(compiler) -c $(compiler_flags) $(input) -o $(output) `
        time_took := (lake.get_highres_clock() - start) / 1000000

        if result.exit_status == 0 then
            io.write(green, input, reset, " -> ", blue, output, reset, " ", time_took, "s\n")
			io.write(result.stdout)
        else
            io.write(red, "compiling ", blue, output, red, " failed", reset, ":\n")
			io.write(result.stdout)
			-- error(red.."compiler failed"..reset)
        end
    end
end

lpp:depends_on(files.o):recipe(linker_recipe(files.o, lpp))

for c_file, o_file in lake.zip(files.c, files.o) do
    lake.target(o_file):depends_on(c_file):recipe(compiler_recipe(c_file, o_file))
end

-- create dependency files based on the make rule cpp generates for each cpp file.
-- we reformat them to just be a newline separated list of files each cpp files depends on
-- and the lake dependencies are created below this for loop
for c_file, d_file in lake.zip(files.c, files.d) do
	lake.target( d_file )
		:uses( c_file )
		:recipe(function()
            dir := tostring(d_file):match("(.*)/")
            lake.mkdir(dir, {make_parents = true})

			result := ` cpp $(c_file) $(compiler_flags) -MM -MG -MT $(lake.replace(d_file, "(.-)%.d", "%1.o")) `

			if result.exit_status ~= 0 then
				error("failed to create dep file '"..d_file.."':\n"..result.stdout)
			end

			result = lake.replace(result.stderr, "\\\n", "")
			
			out := ""

			for file in result:gmatch("%S+") do
				if file:sub(-1) ~= ":" then
					out = out..file.."\n"
				end
			end

			file := io.open(d_file, "w")

			if not file then
				error("failed to open dep file for writing: '"..d_file.."'")
			end
			
			file:write(out)
			file:close()
		end)
end

-- load the dependency files that may or may not exist and 
-- create dependencies between the o file they refer to 
-- and the files in the file
for o_file, d_file in lake.zip(files.o, files.d) do
	file := io.open(d_file, "r")

	lake.target(o_file):depends_on(d_file)

	if file then
		str := file:read("*a")

		for file in str:gmatch("%S+") do
			lake.target(o_file):depends_on(file)
		end	
	end
end

-- create an empty recipe for the 'new' system header since cpp sucks and creates a dependency
-- for it even though it shouldn't
lake.target("new"):recipe(function() return nil end)
