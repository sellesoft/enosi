$$$
require("lppclang").init(lpp, "../lppclang/build/debug/liblppclang.so")

local test = function()
	local section = lpp.getSectionAfterMacro()

	local ast = lpp.clang.parseString(section:getString())
	local iter = ast:getTranslationUnitDecl():getDeclIter()

	local offsets = {}
	local funcbodyoffsets = {}

	while true do
		local d = iter:next()
		if d == nil then
			break
		end

		table.insert(offsets, {d:getBegin(), d:name()})
	end

	for i=1,#offsets do
		local offset = offsets[#offsets-i+1]
		section:insertString(offset[1], "// "..offset[2].."\n")
	end
end

$$$

@test

#define AlignAs8 alignas(8)

#define ProjectPrefix(x) CoolProject_##x

#define Make3Of(name) \
	struct ProjectPrefix(name##1) {}; \
	struct ProjectPrefix(name##2) {}; \
	struct ProjectPrefix(name##3) {}; 

Make3Of(Vector)

enum ProjectPrefix(Thing)
{

};

template<typename T>
struct AlignAs8 ProjectPrefix(Apple)
{
	T leaves;
};

template<
	typename Callback0,
	typename Callback1,
	typename Callback2,
>
__attribute__((visibility("hidden")))
int ProjectPrefix(test)()
{

}

int main()
{
	return 0;
}
