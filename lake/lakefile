mode    ?= "debug"
verbose ?= false

build_dir := "build/"..mode.."/"

lakeexe := lake.target(build_dir.."lake")

c_files := lake.find("src/*.cpp")
o_files := lake.replace(c_files, "src/(.-).cpp", build_dir.."%1.o")

compiler     := "clang++"
linker       := "clang++"
preprocessor := "cpp"

compiler_flags := $[
	-std=c++20
	-Iinclude
	-Isrc
	-Wno-switch
	-fcolor-diagnostics
	-Wno-#warnings
]

if mode == "debug" then
	compiler_flags ..= $[ -O0 -ggdb3 ]
else
	compiler_flags ..= "-O2"
end

linker_flags := $[
	-Llib
	-lluajit
	-lm
	-Wl,--export-dynamic
]

reset := string.char(27).."[0m"
green := string.char(27).."[0;32m"
blue  := string.char(27).."[0;34m"

print_success := function(from, to)
	if to then
		io.write(green, from, reset, " -> ", blue, to, reset, "\n")
	else
		io.write(blue, from, reset, "\n")
	end
end

lakeexe
	:uses(o_files)
	:recipe(function(inputs, output)
		result := ` $(linker) $(inputs) $(linker_flags) -o $(output) `

		if result.exit_status == 0 then
			print_success(output)
		end

		io.write(result.stdout)
	end)

for c_file, o_file in lake.zip(c_files, o_files) do
	lake.target( o_file )
		:uses(c_file)
		:recipe(function(input, output)
			result := ` $(compiler) -c $(input) $(compiler_flags) -o $(output) `

			if result.exit_status == 0 then
				print_success(input[1], output)
			end

			io.write(result.stdout)
		end)
end
