build_mode ?= debug
build_dir := build/${build_mode}

lake := ${build_dir}/lake

all: ${lake}

VPATH = src

# collect c files for the common files, lpp, and commonlua
# and then generate their respective object and dependency
# file paths

c_files := $(wildcard src/*.cpp)
o_files := $(foreach file,$(c_files),${build_dir}/$(file:.cpp=.o))
d_files := $(o_files:.o=.d)

# clean up stuff we output
clean:
	-rm -r build/debug/*
	-rm -r src/generated/*

# set verbose to false unless it was already specified 
# on cmdline (eg. make verbose=true)
verbose ?= false

ifeq (${verbose},false)
	v := @
endif

# choose which stuff to use to build
# this should be adjustable later
compiler     := clang++
linker       := clang++
preprocessor := cpp

compiler_flags :=     \
	-std=c++20        \
	-Iinclude         \
	-Isrc             \
	-Wall             \
	-Wno-switch       \
	-Wno-\#warnings

ifeq ($(build_mode),debug)
	compiler_flags += -O0 -ggdb3
else ifeq ($(build_mode),release)
	compiler_flags += -O2
endif

linker_flags := \
	-Llib       \
	-lluajit    \
	-lm         \
	-Wl,--export-dynamic

# print a success message
reset := \033[0m
green := \033[0;32m
blue  := \033[0;34m
define print
	@printf "$(green)$(1)$(reset) -> $(blue)$(2)$(reset)\n"
endef

${lake}: ${o_files}
	$(v)${linker} $^ ${linker_flags} -o $@
	@printf "$(blue)$@$(reset)\n"

# generic rule for turning c files into object files
${build_dir}/%.o: %.cpp
	@mkdir -p $(@D) # ensure directories exist
	$(v)${compiler} -c $< ${compiler_flags} -o $@
	$(call print,$<,$@)

# generic rule for turning c files into dependency files
${build_dir}/%.d: %.cpp
	@mkdir -p $(@D) # ensure directories exist
	$(v)${compiler} -E $< ${compiler_flags} -MM -MG -MT ${build_dir}/$*.o -o $@

src/generated/token.enum.h    \
src/generated/token.strings.h \
src/generated/token.kwmap.h &: src/tokens.lua
	${v}luajit $<
	$(call print,$<,$@)

# include the dependency files if they have 
# been generated. they are generated by the compiler when
# we compiler object files.
-include ${d_files}

# disable make's dumb builtin rules for performance
MAKEFLAGS += --no-builtin-rules
