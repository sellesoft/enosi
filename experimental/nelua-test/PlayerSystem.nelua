require "helpers"
require "Component"
require "EntMgr"
require "BroadcastEventBus"
require "InputSystem"
require "MoveSystem"
require "MapMgr"

global EntSys.PlayerSystem = @record
{
	player: EntId, 
	free_event_bus: *BroadcastEventBus,
	movesys: *EntSys.MoveSystem 
}

local PlayerSys = EntSys.PlayerSystem

global Event.Attack = @record
{
	actor: EntId,
	target: EntId,
}

## local subscribeToEntityEvent = EntSys.subscribeToEntityEvent
## local subscribeToBroadcastEvent = EntSys.subscribeToBroadcastEvent
## local raiseEntityEvent = EntSys.raiseEntityEvent
## local raiseBroadcastEvent = EntSys.raiseBroadcastEvent
## helpers.using(Component)
## helpers.using(Event)

function PlayerSys:init()
	local entmgr = self.entmgr

	-- spawn player entity
	self.player = entmgr:newEntity()
	local cmplist = entmgr:getEnt(self.player)

	local transform = entmgr:addComp(Transform)
	local health = entmgr:addComp(Health)
	health.val = 100

	subscribeToEntityEvent!(Health, Attack, 
		function(self, entid, comp, event)
			print(self, entid)
		end)

	subscribeToBroadcastEvent!(KeyPressed, 
		function(self, event)
			print(event.key)
			self.movesys:tryMove(self.player, {0,1})
		end)

	subscribeToBroadcastEvent!(MapRender,
		function(self, event)
			local entmgr = self.entmgr
			local transform = entmgr:tryComp(Transform)

			if event.pos == transform.pos then
				event.icon = 'P'_u8
			end
		end)
end

## helpers.generateCreateFunc(PlayerSys)
