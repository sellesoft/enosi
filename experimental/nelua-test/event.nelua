require "list"
require "pool"

##[[
	local dumparr = function(tbl)
		for i,v in ipairs(tbl) do
			print(i, v)
		end
	end

	local dumptbl = function(tbl)
		for k,v in pairs(tbl) do
			print(k, v)
		end
	end
]]

global Event = @record{}

-- generic subscription list 
##local makeSubList = generalize(function(E) 
		local E = #[E]#
		local Subscription = @record
		{
			subscriber: pointer,
			handler: function(pointer, *E): void
		}
	
		local SubListT = @record
		{
			pool: Pool(Subscription),
			list: SList(Subscription)
		}

		function SubListT:init()
			self.pool:init()
			self.list:init()
		end

		function SubListT:sub(subscriber: pointer, handler: function(pointer, *E))
			local sub = self.pool:add()
			sub.subscriber = subscriber
			sub.handler = handler
			self.list:push(sub)
		end

		function SubListT:emit(event: *E)
			for _,sub in self.list:each() do
				sub.handler(sub.subscriber, event)
			end
		end

##	return SubListT 
##end)
global SubList = #[makeSubList]#

-- generate an event bus type after all events have been specified
-- any events declared after this will not be known to the generated 
-- bus
##local makeEventBus = generic(function()
		local EventBusT = @record {}
		## EventBusT.fieldmapping = {}

		##[[
			for k,v in pairs(Event.value.metafields) do
				local fieldname = 'sublist_'..k
		 		EventBusT.value:add_field(fieldname, makeSubList(v))
				EventBusT.fieldmapping[v.value] = EventBusT.value.fields[fieldname]
		 	end
		]]

	  ##[[
			local getEventField = function(event)
				if event.is_pointer then
					event = event.subtype
				end
				local field = EventBusT.fieldmapping[event] 
				static_assert(field, "Type "..tostring(event).." was not registered with this event bus!")
				return field
			end
		]]

		function EventBusT:init()
			## for _,field in pairs(EventBusT.fieldmapping) do
					self.#|field.name|#:init()
			## end
		end

		function EventBusT:subscribeTo(event: type, subscriber: pointer, handler: auto)
			## local field = getEventField(event.value)
			self.#|field.name|#:sub(subscriber, (@function(pointer, *event))(handler))
		end

		function EventBusT:emit(event: auto)
			## local field = getEventField(event.type)
			self.#|field.name|#:emit(event)
		end

	## return EventBusT 
##end)
global EventBus = #[makeEventBus]#


##[[
	local registry = {}

]]

return Event
