--
-- Event bus that broadcasts events on an entity.
--
-- Subscribers specify a component and event to listen to, when the specified
-- event is raised on an entity containing the specified component type, the
-- subscriber will be notified.
--

require "Event"
require "EntMgr"
require "Component"
require "SubList"

local HandlerSig = @function(pointer, EntId, pointer, pointer)

local SubList = @SubListT(HandlerSig)

## local deferImpl = helpers.deferImpl

##[[
	local resolvePointerTypes = function(TComp, TEvent)
		if TComp.is_pointer then TComp = TComp.subtype end
		if TEvent.is_pointer then TEvent = TEvent.subtype end
		return TComp, TEvent
	end

	local getCompEventFieldSpelling = function(TComp, TEvent)
		TComp, TEvent = resolvePointerTypes(TComp, TEvent)
		return "sublist_"..TComp.codename.."_"..TEvent.codename
	end

	local getEventSubListField = function(TComp, TEvent)
		if TComp.is_pointer then TComp = TComp.subtype end
		if TEvent.is_pointer then TEvent = TEvent.subtype end
		local field = EntityEventBus.value.fields[getCompEventFieldSpelling(TComp,TEvent)]
		static_assert(field, debug.traceback().."Type "..tostring(TEvent).." or "..tostring(TComp).." was not registered with this event bus!")
		return field
	end
]]

-- List of subscriptions for each event. One of these
-- exists for each type of Component.
local CompSubList = @record{} -- idk why this has to be global, :emit doesnt compile otherwise

##[[
	local getCompSubListEventFieldSpelling = function(TEvent)
		if TEvent.is_pointer then TEvent = TEvent.subtype end
		return 'sublist_'..TEvent.codename
	end
]]

##[[ 
	deferImpl(function()
		for _,TEvent in pairs(Event.value.metafields) do
			CompSubList.value:add_field(
				getCompSubListEventFieldSpelling(TEvent), 
				SubList.value)
		end
  end) 
]]

function CompSubList:init()
	## deferImpl(function()
		## for _,field in ipairs(CompSubList.value.fields) do
			self.#|field.name|#:init()
		## end
	## end)
end

## deferImpl(function()
	EntityEventBus = @record
	{
		entmgr: *EntMgr,
		cmp_sub_lists: [#[Component.count+1]#]CompSubList
	}
## end)

function EntityEventBus:init(entmgr: *EntMgr)
	## deferImpl(function()
		self.entmgr = entmgr
		## for i=0,Component.count do
			self.cmp_sub_lists[#[i]#]:init()
		## end
	## end)
end

## helpers.generateCreateFunc(EntityEventBus)

-- when TEvent is raised on an entity that has a TComp, the given handler will be notified.
function EntityEventBus:subscribeTo(TComp: type, TEvent: type, subscriber: pointer, handler: auto)
## deferImpl(function()
		##[[
			local TArgs = handler.type.argtypes
			-- TODO(sushi) actually check that the type of entsys/component is correct
			assert(isEntSysPointer(TArgs[1]), "self must be an EntSys pointer")
			assert(isEntId(TArgs[2]), "first param must be an EntId")
			assert(isComponentPointer(TArgs[3]), "second param must be a Component pointer")
		  local field = CompSubList.value.fields[getCompSubListEventFieldSpelling(TEvent.value)]
		]]

		self.cmp_sub_lists[TComp.typeid].#|field.name|#:sub(subscriber, (HandlerSig)(handler))
## end)
end

function EntityEventBus:raise(event: AutoPtrConcept, entid: EntId)
	## if event.type.subtype.is_niltype then error() end

	## deferImpl(function()
		local cmplist = assert(self.entmgr:getEnt(entid), "failed to get component list of entity with id "..entid)

		## local field = CompSubList.value.fields[getCompSubListEventFieldSpelling(event.type)]
		## assert(field)

		for _,cmp in cmplist:each() do
			self.cmp_sub_lists[cmp.typeid].#|field.name|#:raise(entid, cmp, event)
		end
	## end)
end
