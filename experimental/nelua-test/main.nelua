require "io"
require "memory"
require "pool"
require "list"
require "Event"
require "Component"
require "EntMgr"
require "EntSys"
require "EntityEventBus"
require "FreeEventBus"
require "PlayerSystem"
require "InputSystem"

## pragmas.nochecks = false

local bool = boolean

## helpers.using(Component)
## helpers.using(Event)

global EntSys.Player = @record {}

## local subscribeTo = EntSys.subscribeTo

function EntSys.Player:test()
	-- ## helpers.dumpTable(context.scope.parent.selfsym)
	subscribeTo!(Health, KeyPressed, 
	(do
			
	end))
end

global Event.Thing = @record{}

local entmgr = EntMgr.create()

local eventbus = @record{}
local eventbus.entity = EntityEventBus.create(entmgr)
local eventbus.free = FreeEventBus.create()

local sys = @record{}

local sys.input = InputSystem.create(eventbus.free)
local sys.player = 
	PlayerSystem.create(
		eventbus.free,
		entmgr)

##[==[ 

cinclude 'termios.h'

cemit 
[[
	// setup non-canonical mode so keypresses on stdin are flushed 
	// immediately
	struct termios mode;
	tcgetattr(0, &mode);

	struct termios newmode = mode;
	newmode.c_lflag &= ~(ICANON|ECHO);
	newmode.c_cc[VMIN] = 1; // min characters needed for non-canonical read
	newmode.c_cc[VTIME] = 0; // timeout for read in non-canonical
	tcsetattr(0, TCSAFLUSH, &newmode);
]] 

]==]

while true do
	sys.input:update()
end

