require "io"
require "memory"
require "pool"
require "list"
require "Event"
require "Component"
require "EntMgr"
require "EntSys"
require "MapMgr"
require "EntityEventBus"
require "BroadcastEventBus"
require "PlayerSystem"
require "InputSystem"
require "MoveSystem"
require "EntSysMgr"

## pragmas.nochecks = false
## pragmas.nogc = true -- yah i dont think im using this shit properly so ima just turn it off

local bool = boolean

## helpers.using(Component)
## helpers.using(Event)
## helpers.using(EntSys)

ccomment! "Initialize managers"

local entmgr = EntMgr.create()
local mapmgr = MapMgr.create()

mapmgr:loadMap({5,5}, 
[[
	XXXXX
	X...X
	X.P.X
	X...X
	XXXXX
]])

ccomment! "Initialize event buses"

local eventbus = @record{}
local eventbus.entity = EntityEventBus.create(entmgr)
local eventbus.broadcast = BroadcastEventBus.create()

entmgr.eventbus.entity = eventbus.entity
entmgr.eventbus.broadcast = eventbus.broadcast

mapmgr.broadcast = eventbus.broadcast

-- eventbus.entity:raise()

ccomment! "Initialize entity systems"

local entsysmgr = new(EntSysMgr)
entsysmgr:init(entmgr, mapmgr)

##[==[ 

cinclude 'termios.h'

cemit 
[[
	// setup non-canonical mode so keypresses on stdin are flushed 
	// immediately
	struct termios mode;
	tcgetattr(0, &mode);

	struct termios newmode = mode;
	newmode.c_lflag &= ~(ICANON|ECHO);
	newmode.c_cc[VMIN] = 1; // min characters needed for non-canonical read
	newmode.c_cc[VTIME] = 0; // timeout for read in non-canonical
	tcsetattr(0, TCSAFLUSH, &newmode);
]] 

]==]

local input = InputSystem.create(eventbus.broadcast)

while true do
	mapmgr:render()
	input:update()
end

