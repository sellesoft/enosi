require "helpers"
require "EntMgr"
require "BroadcastEventBus"

global EntSys = @record
{
	entmgr: *EntMgr
}

##[[
isEntSys = function(T) return T.is_entsys end
isEntSysPointer = function(T) return T.is_pointer and isEntSys(T.subtype) end
]]

global pEntSysConcept = #[concept(function(attr)
	return isEntSysPointer(attr.type), "a pointer to an EntSys must be passed here"
end)]#

##[[

helpers.makeInheritable(EntSys, function(name, TChild)
	TChild.is_entsys = true
	for i,field in ipairs(EntSys.value.fields) do
		TChild:add_field(field.name, field.type, i)
	end
end)

]]

##[[

-- TODO(sushi) these could be moved to global functions in their respective busses that check for a type (such as EntSys)
--             defining some kinda function that handles these working in their contexts and stuff yeah

EntSys.subscribeToEntityEvent = function(TComp, TEvent, F)
	assert(self, "subscribeTo cannot be used outside of a method")
	assert(self.type.subtype.is_entsys, "subscribeTo must be used inside of an EntSys method")

	assert(TComp, "subscribeTo passed a nil TComp")
	assert(TEvent, "subscribeTo passed a nil TEvent")

	assert(isComponent(TComp.value), "subscribeTo must be passed a Component type as its first argument")
	assert(isEvent(TEvent.value), "subscribeTo must be passed an Event type as its first argument")

	local handler_name = self.type.subtype.nickname.."_"..TEvent.name.."_"..TComp.name.."_handler"
	]]
		local function #|handler_name|#(self: #[self.type]#, entid: EntId, comp: *#[TComp]#, event: *#[TEvent]#)
			## inject_statement(F.node[4])
		end
		self.entmgr.eventbus.entity:subscribeTo(#[TComp]#, #[TEvent]#, self, #|handler_name|#)
	##[[
end

EntSys.subscribeToBroadcastEvent = function(TEvent, F)
	assert(self, "subscribeTo cannot be used outside of a method")
	assert(TEvent, "subscribeTo passed a nil TEvent")
	assert(isEvent(TEvent.value), "subscribeToBroadcastEvent must be given an Event type")
	
	local handler_name = self.type.subtype.nickname.."_"..TEvent.name.."_broadcastHandler"
	print(F)
	]]
		local function #|handler_name|#(self: #[self.type]#, event: *#[TEvent]#)
			## inject_statement(F.node[4])
		end
		self.entmgr.eventbus.broadcast:subscribeTo(#[TEvent]#, self, #|handler_name|#)
	##[[
end

EntSys.raiseEntityEvent = function(entid, event)
	assert(self, "raise cannot be used outside of a method")
	assert(self.type.subtype.is_entsys, "raise must be used inside of an EntSys method")
	
	assert(entid, "raise passed a nil entid")
	assert(event, "raise passed a nil event")

	]]
		self.entmgr.eventbus.entity:raise(#[event]#, #[entid]#)
	##[[
end

EntSys.raiseBroadcastEvent = function(event)
	assert(self, "raise cannot be used outside of a method")
	assert(event, "raise passed a nil event")

	]]
		self.entmgr.eventbus.broadcast:raise(#[event]#)
	##[[
end

]]
