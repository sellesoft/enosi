$ local cmn = require "common"
$ local SourceData = require "resource.SourceData"

@@lpp.import "resource/Resource.lh"

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/memory/Allocator.h"

using namespace iro;

struct ResourceMgr;

namespace iro::io
{
  struct IO;
}

enum class ImageFormat
{
  BW,
  BWA,
  RGB,
  RGBA,
};

enum class ImageFilter
{
  Nearest,
  Linear,
};

enum class ImageAddressMode
{
  Repeat,
  MirroredRepeat,
  ClampToEdge,
  ClampToWhite,
  ClampToBlack,
  ClampToTransparent,
};

enum class ImageKind
{
  OneD,
  TwoD,
  ThreeD,
  Cube,
};

struct TextureData
{
  ImageFormat format;
  ImageFilter filter;
  ImageAddressMode address_mode;
  ImageKind kind;

  s32 width;
  s32 height;

  void* pixels;

  b8 serialize(io::IO* out);
};

struct Texture : public Resource
{
  TextureData* compiled;
 
  const TextureData* getTextureData() const
  {
    return compiled;
  }

  // Handle to the gfx representation of this Texture.
  u32 gfx_handle;

  static s64 writeAssetPath(io::IO* io, String name, ResourceMgr& rsrcmgr);
  static s64 writeDataPath(io::IO* io, String name, ResourceMgr& rsrcmgr);

  static MovedResourceRef load(
    String name, 
    ResourceMgr& rsrcmgr);

  struct CompileParams
  {
    String name;
    String asset_path;
    String data_path;
    u32 width;
    u32 height;
    ImageFormat format;
    ImageKind kind;
    ImageFilter filter;
    ImageAddressMode address_mode;
    mem::Allocator* allocator;
    ResourceMgr* rsrcmgr;
  };

  static b8 compile(CompileParams& params);

  // In this case 'asset_path' is unused.
  static b8 compileFromMemory(void* data, CompileParams& params);
};

typedef TypedResourceRef<Texture> TextureRef;
