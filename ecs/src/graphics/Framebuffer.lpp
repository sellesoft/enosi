$ require "common"

@@lpp.import "graphics/RendererInternal.lh"

@@lpp.import "graphics/Framebuffer.lh"
@@lpp.import "graphics/Renderer.lh"
@@lpp.import "graphics/Texture.lh"

#include "iro/Logger.h"

@defFileLogger(gfx.framebuffer, Trace)

namespace gfx
{

/* ----------------------------------------------------------------------------
 */
b8 Framebuffer::init(
  Renderer& renderer,
  u32 width,
  u32 height,
  Texture texture,
  vec4f clear_color,
  String name)
{
  RendererInternal& ri = *(RendererInternal*)renderer.internal;
  TRACE("initializing a framebuffer\n");

  if (index != 0)
    return ERROR("failed to initialize a framebuffer because the framebuffer"
      " is already initialized\n");

  if (ri.framebuffer_count >= ri.framebuffer_pool.MAX_COUNT)
    return ERROR("failed to initialize a framebuffer because the maximum"
      " number of framebuffers has been reached (",
      ri.framebuffer_pool.MAX_COUNT, ")\n");

  if (texture.index == 0)
    return ERROR("failed to initialize a framebuffer because the texture is"
      " not initialized\n");

  if (width == 0 || height == 0)
    return ERROR("failed to initialize a framebuffer because the width or"
      " height is not positive\n");

  VkAttachmentDescription attachment_desc =
  {
    .format = ri.surface_format.format,
    .samples = VK_SAMPLE_COUNT_1_BIT,
    .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
    .storeOp = VK_ATTACHMENT_STORE_OP_STORE,
    .stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
    .stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
    .initialLayout = VK_IMAGE_LAYOUT_UNDEFINED,
    .finalLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,
  };

  VkAttachmentReference attachment_ref =
  {
    .attachment = 0,
    .layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
  };

  VkSubpassDescription subpass =
  {
    .pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS,
    .colorAttachmentCount = 1,
    .pColorAttachments = &attachment_ref,
  };

  VkSubpassDependency dependency =
  {
    .srcSubpass = VK_SUBPASS_EXTERNAL,
    .dstSubpass = 0,
    .srcStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT
      | VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT,
    .dstStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT
      | VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT,
    .srcAccessMask = 0,
    .dstAccessMask = VK_ACCESS_COLOR_ATTACHMENT_READ_BIT
      | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,
    .dependencyFlags = VK_DEPENDENCY_BY_REGION_BIT,
  };

  VkRenderPassCreateInfo renderpass_create_info =
  {
    .sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,
    .attachmentCount = 1,
    .pAttachments = &attachment_desc,
    .subpassCount = 1,
    .pSubpasses = &subpass,
    .dependencyCount = 1,
    .pDependencies = &dependency,
  };

  VkRenderPass renderpass_handle;
  if (VK_SUCCESS != vkCreateRenderPass(ri.device, &renderpass_create_info,
    &ri.allocator, &renderpass_handle))
    return FATAL("failed to create the vulkan renderpass\n");

  VkFramebufferCreateInfo framebuffer_create_info =
  {
    .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
    .renderPass = renderpass_handle,
    .attachmentCount = 1,
    .pAttachments = &ri.texture_pool.at_index(texture.index)->view,
    .width = width,
    .height = height,
    .layers = 1,
  };

  VkFramebuffer framebuffer_handle;
  if (VK_SUCCESS != vkCreateFramebuffer(ri.device, &framebuffer_create_info,
    &ri.allocator, &framebuffer_handle))
    return FATAL("failed to create vulkan framebuffer\n");

  RendererFramebuffer* framebuffer = ri.framebuffer_pool.add();
  framebuffer->framebuffer = framebuffer_handle;
  framebuffer->renderpass = renderpass_handle;
  framebuffer->clear_color = clear_color;
  index = ri.framebuffer_pool.index_of(framebuffer);
  ri.framebuffer_count++;

  debugSetObjectName(renderer, VK_OBJECT_TYPE_FRAMEBUFFER, framebuffer_handle,
    "<", name, " framebuffer>");
  debugSetObjectName(renderer, VK_OBJECT_TYPE_RENDER_PASS, renderpass_handle,
    "<", name, " renderpass>");

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Framebuffer::deinit(Renderer& renderer)
{
  RendererInternal& ri = *(RendererInternal*)renderer.internal;
  TRACE("deinitializing a framebuffer at index ", index, "\n");

  if (index == 0)
    return true;

  RendererFramebuffer* framebuffer = ri.framebuffer_pool.at_index(index);
  if (framebuffer == nullptr)
    return ERROR("attempted to destroy a framebuffer at index ", index,
      " which is out of bounds\n");

  if (framebuffer->framebuffer == VK_NULL_HANDLE)
    return ERROR("attempted to destroy an uninitialized framebuffer\n");

  vkDestroyRenderPass(ri.device, framebuffer->renderpass, &ri.allocator);
  vkDestroyFramebuffer(ri.device, framebuffer->framebuffer, &ri.allocator);

  framebuffer->framebuffer = VK_NULL_HANDLE;
  framebuffer->renderpass = VK_NULL_HANDLE;

  index = 0;
  ri.framebuffer_pool.remove(framebuffer);
  ri.framebuffer_count--;

  return true;
}

}
