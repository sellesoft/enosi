/*
 * Graphics shader representation and management
 */

$ require "common"

#include "iro/containers/Slice.h"
#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/io/Format.h"

@@lpp.import "graphics/ShaderParams.lh"

using namespace iro;

namespace gfx
{

struct Renderer;

/* ============================================================================
 */
struct Shader
{
  u32 index = 0;

  struct CreateParams
  {
    ShaderKind kind;
    Bytes spv_binary;

    String debug_name;
  };

  static Shader create(Renderer& renderer, const CreateParams& params);
  void destroy(Renderer& renderer);

  inline b8 operator==(const Shader& other) const
  {
    return index == other.index;
  }

  inline b8 operator!=(const Shader& other) const
  {
    return index != other.index;
  }

  DefineNilTrait(Shader, {0}, x.index == 0);
};

}

namespace iro::io
{
static s64 format(io::IO* io, const gfx::Shader& shader)
{
  if (isnil(shader))
    return format(io, "gfx::Shader(nil)"_str);
  else
    return formatv(io, "gfx::Shader("_str, shader.index, ')');
}
}
