$ require "common"
$ local metadata = require "reflect.Metadata"

@@lpp.import "asset/Ref.lh"

#include "iro/Unicode.h"

using namespace iro;

namespace gfx
{

/* ============================================================================
 */
struct ResourceRef : Ref
{
  String name = {};

  @metadata.hidden
  void* resource;

  b8 isValid() const
  {
    return resource != nullptr;
  }
};

/* ============================================================================
 */
template<typename TResource>
struct TypedResourceRef : ResourceRef
{
  b8 load(LoadParams&);

  b8 isValid() const
  {
    return resource != nullptr;
  }

  TResource* operator->()
  {
    assert(resource != nullptr);
    return (TResource*)resource;
  }

  const TResource* operator->() const
  {
    assert(resource != nullptr);
    return (TResource*)resource;
  }

  TResource& operator*()
  {
    assert(resource != nullptr);
    return *(TResource*)resource;
  }

  const TResource& operator*() const
  {
    assert(resource != nullptr);
    return *(TResource*)resource;
  }

  TResource* deref()
  {
    return (TResource*)resource;
  }
};

struct CompiledTexture;
struct CompiledShader;
struct Font;

typedef TypedResourceRef<CompiledTexture> TextureRef;
typedef TypedResourceRef<CompiledShader>  ShaderRef;
typedef TypedResourceRef<Font>            FontRef;

}
