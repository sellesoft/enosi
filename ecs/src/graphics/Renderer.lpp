$ local cmn = require "common"

@@lpp.import "graphics/Renderer.lh"

@@lpp.import "Engine.lh"
@@lpp.import "window/Window.lh"
@@lpp.import "window/Window.events.lh"

@@lpp.import "asset/AssetMgr.lh"
@@lpp.import "graphics/CompiledTexture.lh"

#include "iro/Logger.h"
#include "iro/fs/File.h"

#include "graphics/glad/gl.h"

namespace gfx
{

// platform specific initialization defined in Renderer_<platform>.cpp
extern b8 rendererPlatformInit(Window* window);
extern b8 rendererPlatformSwapBuffers(Window* window);

static Logger logger = 
  Logger::create("gfx"_str, Logger::Verbosity::Info);

/* ----------------------------------------------------------------------------
 */
static void GLAPIENTRY glMessageCallback(
    GLenum source,
    GLenum type,
    GLuint id,
    GLenum severity,
    GLsizei length,
    const GLchar* message,
    const void* user_param)
{
  if (type == GL_DEBUG_TYPE_ERROR)
  {
    ERROR(message, "\n");
    assert(false);
  }
  else
  {
    // spams quite bad
    // INFO(message, "\n");
  }
}

/* ----------------------------------------------------------------------------
 */
b8 Renderer::init(Engine& engine)
{
  INFO("initializing\n");

  if (!rendererPlatformInit(&engine.window))
    return false;
    
  int opengl_version = gladLoaderLoadGL();
  if (!opengl_version)
    return ERROR("failed to load OpenGL\n");

#if ECS_DEBUG
  glEnable(GL_DEBUG_OUTPUT);
  glDebugMessageCallback(glMessageCallback, 0);
#endif

  INFO("loaded OpenGL ", 
    GLAD_VERSION_MAJOR(opengl_version), '.', 
    GLAD_VERSION_MINOR(opengl_version), "\n");

  glEnable(GL_BLEND);
  glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

  glEnable(GL_SCISSOR_TEST);
  glScissor(0, 0, engine.window.size.x, engine.window.size.y);

  if (!compileShaders())
    return false;

  if (!buffers.init())
    return ERROR("failed to initialize buffer pool\n");

  if (!drawcmds.init(16))
    return ERROR("failed to initialize draw cmd array\n");
  
  engine.subscribeToBroadcast<WindowResized>(this, &Renderer::onWindowResized);

  this->engine = &engine;

  frame = 0;

  INFO("done!\n");
  
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Renderer::update()
{
  TRACE("Renderer::update\n");

  glClearColor(0.f, 0.f, 0.f, 1.f);
  glClear(GL_COLOR_BUFFER_BIT);

  glUseProgram(shader_program);

  DEBUG("executing draw commands\n");

  u32 last_program = shader_program;
  Buffer* last_buff = nullptr;
  for (DrawCmd& cmd : drawcmds)
  {
    u32* base_offset = 0x0;

    switch (cmd.kind)
    {
    case DrawCmd::Kind::BindBuffer:
      if (cmd.bind_buffer != last_buff)
      {
        TRACE("binding buffer\n");
        last_buff = cmd.bind_buffer;
        glBindVertexArray(cmd.bind_buffer->vao);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, cmd.bind_buffer->ibo);
      }
      break;

    case DrawCmd::Kind::Draw:
      TRACE("drawing\n");
      glDrawRangeElementsBaseVertex(
        GL_TRIANGLES, 
        0, 
        // kind scuffed
        last_buff->num_indexes, 
        cmd.draw.index_count,
        GL_UNSIGNED_INT,
        (void*)(base_offset + cmd.draw.index_start),
        cmd.draw.vertex_start);
      break;

    case DrawCmd::Kind::SetScissor:
      glScissor(
        cmd.set_scissor.pos.x,
        cmd.set_scissor.pos.y,
        cmd.set_scissor.size.x,
        cmd.set_scissor.size.y);
      break;

    case DrawCmd::Kind::BindTexture:
      TRACE("binding texture ", cmd.bind_texture.id, "\n");
      glBindTexture(GL_TEXTURE_2D, cmd.bind_texture.id);
      break;
    
    case DrawCmd::Kind::PushUniformVec2:
      {
        TRACE("pushing vec2 uniform ", cmd.push_uniform.name, "\n");
        u32 loc = 
          glGetUniformLocation(
            last_program,
            (char*)cmd.push_uniform.name.ptr);
        glUniform2f(loc, cmd.push_uniform.v.x, cmd.push_uniform.v.y);
      }
      break;

    case DrawCmd::Kind::PushUniformFloat:
      {
        TRACE("pushing float uniform ", cmd.push_uniform.name, "\n");
        u32 loc = 
          glGetUniformLocation(
            last_program,
            (char*)cmd.push_uniform.name.ptr);
        glUniform1f(loc, cmd.push_uniform.f);
      }
      break;

    case DrawCmd::Kind::PushUniformBool:
      {
        TRACE("pushing bool uniform ", cmd.push_uniform.name, "\n");
        u32 loc = 
          glGetUniformLocation(
            last_program,
            (char*)cmd.push_uniform.name.ptr);
        glUniform1i(loc, cmd.push_uniform.b);
      }
      break;

    case DrawCmd::Kind::PushUniformMat3x2:
      {
        TRACE("pushing mat3x2 uniform ", cmd.push_uniform.name, "\n");
        u32 loc = 
          glGetUniformLocation(
            last_program,
            (char*)cmd.push_uniform.name.ptr);

        auto& m = cmd.push_uniform.m;

        f32 extended[3*3] = 
        {
          m.get(0,0), m.get(0,1), 0.f,
          m.get(1,0), m.get(1,1), 0.f,
          m.get(2,0), m.get(2,1), 1.f,
        };

        glUniformMatrix3fv(
          loc,
          1,
          GL_FALSE,
          extended);
      }
      break;

    case DrawCmd::Kind::UseProgram:
      {
        TRACE("pushing program ", cmd.use_program, "\n");
        glUseProgram(cmd.use_program);
        last_program = cmd.use_program;
      }
      break;
    }
  }

  TRACE("clearing drawcmds\n");
  drawcmds.clear();
  
  glFlush();

  TRACE("swapping buffers\n");
  rendererPlatformSwapBuffers(&engine->window);

  frame += 1;

  return true;
};

/* ----------------------------------------------------------------------------
 */
static b8 compileShader(String path, int kind, u32* out_shader_id)
{
  using namespace fs;
  auto file = File::from(path, OpenFlag::Read);
  if (isnil(file))
    return ERROR("failed to open shader at path '", path, "'\n");
  defer { file.close(); };

  u64 filesize = file.getInfo().byte_size;
    
  io::Memory buffer;
  buffer.open();
  defer { buffer.close(); };

  if (filesize != buffer.consume(&file, filesize))
    return ERROR("failed to read entire shader '", path, "'\n");

  u32 id = *out_shader_id = glCreateShader(kind);

  glShaderSource(id, 1, &(char*&)buffer.ptr, nullptr);
  glCompileShader(id);

  int success;
  glGetShaderiv(id, GL_COMPILE_STATUS, &success);

  if (!success)
  {
    u8 buffer[512];
    glGetShaderInfoLog(id, 512, nullptr, (char*)buffer);
    return ERROR("failed to compile shader ", path, ":\n", 
        (char*)buffer, "\n");
  }

  return true;
}

/*----------------------------------------------------------------------------
 */
b8 Renderer::compileShaders()
{
  // TODO shader asse/compilation API
  // TODO(sushi) use the rsrcmgr here
  INFO("compiling shaders\n");

  {
    u32 vertex_shader;
    if (!compileShader(
        "assets/shaders/vertex.glsl"_str, 
        GL_VERTEX_SHADER,
        &vertex_shader))
    return false;
    defer { glDeleteShader(vertex_shader); };

    u32 frag_shader;
    if (!compileShader(
          "assets/shaders/frag.glsl"_str,
          GL_FRAGMENT_SHADER,
          &frag_shader))
      return false;
    defer { glDeleteShader(frag_shader); };

    shader_program = glCreateProgram();
    glAttachShader(shader_program, vertex_shader);
    glAttachShader(shader_program, frag_shader);
    glLinkProgram(shader_program);

    int success;
    glGetProgramiv(shader_program, GL_LINK_STATUS, &success);
    if (!success)
    {
      u8 buffer[512];
      glGetShaderInfoLog(shader_program, 512, nullptr, (char*)buffer);
      return ERROR("failed to link shaders\n");
    }
  }

  {
    u32 fullscreen_shader;
    if (!compileShader(
        "assets/shaders/fullscreen_vert.glsl"_str,
        GL_VERTEX_SHADER,
        &fullscreen_shader))
    return false;
    defer { glDeleteShader(fullscreen_shader); };

    u32 stars_shader;
    if (!compileShader(
          "assets/shaders/stars_frag.glsl"_str,
          GL_FRAGMENT_SHADER,
          &stars_shader))
      return false;
    defer { glDeleteShader(stars_shader); };

    stars_program = glCreateProgram();
    glAttachShader(stars_program, fullscreen_shader);
    glAttachShader(stars_program, stars_shader);
    glLinkProgram(stars_program);

    int success;
    glGetProgramiv(stars_program, GL_LINK_STATUS, &success);
    if (!success)
    {
      u8 buffer[512];
      glGetShaderInfoLog(stars_program, 512, nullptr, (char*)buffer);
      return ERROR("failed to link shaders\n");
    }
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
Buffer* Renderer::createBuffer()
{
  return buffers.push()->data;
}

/* ----------------------------------------------------------------------------
 */
b8 Renderer::loadTexture(CompiledTexture* texture)
{
  if (texture->gfx_texture.id != 0)
    return ERROR("call to loadTexture with a texture that has already "
                 "been assigned a gfx::Texture\n");

  const CompiledTextureData* data = texture->data;
  assert(data);

  texture->gfx_texture = 
    gfx::Texture::create(
      data->width,
      data->height,
      data->format,
      data->address_mode,
      data->filter,
      data->kind,
      data->pixels);

  return notnil(texture->gfx_texture);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushBindBuffer(Buffer* buffer)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::BindBuffer;
  cmd.bind_buffer = buffer;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushDraw(
  u64 index_start, 
  u64 index_count, 
  u64 vertex_start)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::Draw;
  cmd.draw = 
  {
    .index_start = index_start,
    .index_count = index_count,
    .vertex_start = vertex_start,
  };
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushSetScissor(vec2i pos, vec2i size)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::SetScissor;
  cmd.set_scissor.pos = pos;
  cmd.set_scissor.size = size;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushBindTexture(gfx::Texture texture)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::BindTexture;
  cmd.bind_texture = texture;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushUniformVec2(String name, vec2f v)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::PushUniformVec2;
  cmd.push_uniform.name = name;
  cmd.push_uniform.v = v;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushUniformFloat(String name, f32 f)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::PushUniformFloat;
  cmd.push_uniform.name = name;
  cmd.push_uniform.f = f;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushUniformBool(String name, b8 b)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::PushUniformBool;
  cmd.push_uniform.name = name;
  cmd.push_uniform.b = b;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushUniformMat3x2(String name, const mat3x2& m)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::PushUniformMat3x2;
  cmd.push_uniform.name = name;
  cmd.push_uniform.m = m;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushUseProgram(u32 program)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::UseProgram;
  cmd.use_program = program;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::onWindowResized(WindowResized& event)
{
  glViewport(0, 0, event.size.x, event.size.y);
}


}
