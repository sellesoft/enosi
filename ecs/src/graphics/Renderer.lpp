$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"

@@lpp.import "graphics/Renderer.lh"

@@lpp.import "Engine.lh"
@@lpp.import "window/Window.lh"
@@lpp.import "window/Window.events.lh"

@@lpp.import "asset/AssetMgr.lh"
@@lpp.import "asset/Texture.lh"

#include "iro/logger.h"
#include "iro/fs/file.h"

#include "graphics/glad/gl.h"

namespace gfx
{

// platform specific initialization defined in Renderer_<platform>.cpp
extern b8 rendererPlatformInit(Window* window);
extern b8 rendererPlatformSwapBuffers(Window* window);

static Logger logger = 
  Logger::create("gfx"_str, Logger::Verbosity::Info);

/* ----------------------------------------------------------------------------
 */
static void GLAPIENTRY glMessageCallback(
    GLenum source,
    GLenum type,
    GLuint id,
    GLenum severity,
    GLsizei length,
    const GLchar* message,
    const void* user_param)
{
  if (type == GL_DEBUG_TYPE_ERROR)
  {
    ERROR(message, "\n");
  }
  else
  {
    INFO(message, "\n");
  }
}

/* ----------------------------------------------------------------------------
 */
b8 Renderer::init(Engine& engine)
{
  INFO("initializing\n");

  if (!rendererPlatformInit(&engine.window))
    return false;
    
  int opengl_version = gladLoaderLoadGL();
  if (!opengl_version)
    return ERROR("failed to load OpenGL\n");

#if ECS_DEBUG
  glEnable(GL_DEBUG_OUTPUT);
  glDebugMessageCallback(glMessageCallback, 0);
#endif

  INFO("loaded OpenGL ", 
    GLAD_VERSION_MAJOR(opengl_version), '.', 
    GLAD_VERSION_MINOR(opengl_version), "\n");

  glEnable(GL_BLEND);
  glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

  glEnable(GL_SCISSOR_TEST);
  glScissor(0, 0, engine.window.size.x, engine.window.size.y);

  if (!compileShaders())
    return false;

  if (!buffers.init())
    return ERROR("failed to initialize buffer pool\n");

  if (!drawcmds.init(16))
    return ERROR("failed to initialize draw cmd array\n");
  
  engine.subscribeToBroadcast<WindowResized>(this, &Renderer::onWindowResized);

  this->engine = &engine;

  frame = 0;

  INFO("done!\n");
  
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Renderer::update()
{
  TRACE("Renderer::update\n");

  glClearColor(0.f, 0.f, 0.f, 1.f);
  glClear(GL_COLOR_BUFFER_BIT);

  glUseProgram(shader_program);

  DEBUG("executing draw commands\n");

  Buffer* last_buff = nullptr;
  for (DrawCmd& cmd : drawcmds)
  {
    u32* base_offset = 0x0;

    switch (cmd.kind)
    {
    case DrawCmd::Kind::BindBuffer:
      if (cmd.bind_buffer != last_buff)
      {
        TRACE("binding buffer\n");
        last_buff = cmd.bind_buffer;
        glBindVertexArray(cmd.bind_buffer->vao);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, cmd.bind_buffer->ibo);
      }
      break;

    case DrawCmd::Kind::Draw:
      TRACE("drawing\n");
      glDrawRangeElementsBaseVertex(
        GL_TRIANGLES, 
        0, 
        // kind scuffed
        last_buff->num_indexes, 
        cmd.draw.index_count,
        GL_UNSIGNED_INT,
        (void*)(base_offset + cmd.draw.index_start),
        cmd.draw.vertex_start);
      break;

    case DrawCmd::Kind::SetScissor:
      glScissor(
        cmd.set_scissor.pos.x,
        cmd.set_scissor.pos.y,
        cmd.set_scissor.size.x,
        cmd.set_scissor.size.y);
      break;

    case DrawCmd::Kind::BindTexture:
      TRACE("binding texture ", cmd.bind_texture, "\n");
      glBindTexture(GL_TEXTURE_2D, cmd.bind_texture->gfx_handle);
      break;
    
    case DrawCmd::Kind::PushUniformVec2:
      {
        TRACE("pushing vec2 uniform ", cmd.push_uniform.name, "\n");
        u32 loc = 
          glGetUniformLocation(
            shader_program, 
            (char*)cmd.push_uniform.name.ptr);
        glUniform2f(loc, cmd.push_uniform.v.x, cmd.push_uniform.v.y);
      }
      break;

    case DrawCmd::Kind::PushUniformFloat:
      {
        TRACE("pushing float uniform ", cmd.push_uniform.name, "\n");
        u32 loc = 
          glGetUniformLocation(
            shader_program, 
            (char*)cmd.push_uniform.name.ptr);
        glUniform1f(loc, cmd.push_uniform.f);
      }
      break;

    case DrawCmd::Kind::PushUniformBool:
      {
        TRACE("pushing bool uniform ", cmd.push_uniform.name, "\n");
        u32 loc = 
          glGetUniformLocation(
            shader_program, 
            (char*)cmd.push_uniform.name.ptr);
        glUniform1i(loc, cmd.push_uniform.b);
      }
      break;

    case DrawCmd::Kind::PushUniformMat3x2:
      {
        TRACE("pushing bool uniform ", cmd.push_uniform.name, "\n");
        u32 loc = 
          glGetUniformLocation(
            shader_program, 
            (char*)cmd.push_uniform.name.ptr);

        auto& m = cmd.push_uniform.m;

        f32 extended[3*3] = 
        {
          m.get(0,0), m.get(0,1), 0.f,
          m.get(1,0), m.get(1,1), 0.f,
          m.get(2,0), m.get(2,1), 1.f,
        };

        glUniformMatrix3fv(
          loc,
          1,
          GL_FALSE,
          extended);
      }
      break;
    }
  }

  TRACE("clearing drawcmds\n");
  drawcmds.clear();
  
  TRACE("swapping buffers\n");
  rendererPlatformSwapBuffers(&engine->window);

  frame += 1;

  return true;
};

/* ----------------------------------------------------------------------------
 */
static b8 compileShader(String path, int kind, u32* out_shader_id)
{
  using namespace fs;
  auto file = File::from(path, OpenFlag::Read);
  if (isnil(file))
    return ERROR("failed to open shader at path '", path, "'\n");
  defer { file.close(); };

  u64 filesize = file.getInfo().byte_size;
    
  io::Memory buffer;
  buffer.open();
  defer { buffer.close(); };

  if (filesize != buffer.consume(&file, filesize))
    return ERROR("failed to read entire shader '", path, "'\n");

  u32 id = *out_shader_id = glCreateShader(kind);

  glShaderSource(id, 1, &(char*&)buffer.ptr, nullptr);
  glCompileShader(id);

  int success;
  glGetShaderiv(id, GL_COMPILE_STATUS, &success);

  if (!success)
  {
    u8 buffer[512];
    glGetShaderInfoLog(id, 512, nullptr, (char*)buffer);
    return ERROR("failed to compile shader ", path, ":\n", 
        (char*)buffer, "\n");
  }

  return true;
}

/*----------------------------------------------------------------------------
 */
b8 Renderer::compileShaders()
{
  INFO("compiling shaders\n");

  // TODO(sushi) use the assetmgr here
  if (!compileShader(
        "assets/shaders/frag.glsl"_str, 
        GL_FRAGMENT_SHADER,
        &frag_shader))
    return false;
  
  if (!compileShader(
        "assets/shaders/vertex.glsl"_str, 
        GL_VERTEX_SHADER,
        &vertex_shader))
    return false;

  shader_program = glCreateProgram();

  glAttachShader(shader_program, vertex_shader);
  glAttachShader(shader_program, frag_shader);
  glLinkProgram(shader_program);

  int success;
  glGetProgramiv(shader_program, GL_LINK_STATUS, &success);
  
  if (!success)
  {
    u8 buffer[512];
    glGetShaderInfoLog(shader_program, 512, nullptr, (char*)buffer);
    return ERROR("failed to link shaders\n");
  }

  glDeleteShader(vertex_shader);
  glDeleteShader(frag_shader);

  return true;
}

/* ----------------------------------------------------------------------------
 */
Buffer* Renderer::createBuffer()
{
  return buffers.push()->data;
}

/* ----------------------------------------------------------------------------
 */
b8 Renderer::loadTexture(Texture& texture)
{
  if (texture.gfx_handle != 0)
    return ERROR("call to loadTexture with a texture that has already "
                 "been assigned a gfx_handle\n");

  glGenTextures(1, &texture.gfx_handle);

  glBindTexture(GL_TEXTURE_2D, texture.gfx_handle);

  TextureData* data = texture.data;

  if (data->width % 4 != 0)
  {
    // TODO(sushi) handle alignments of 2 as well.
    auto* asset = engine->assetmgr.getAsset(texture.handle);
    WARN("provided texture '", asset->path, "' has a width that is not "
         "aligned to 4 and will likely be loaded improperly\n");
  }

  struct GLFormat { GLint internal; GLint format; };

  GLFormat formats[] = 
  {
    { GL_R8, GL_RED },
    { GL_RG8, GL_RG },
    { GL_RGB8, GL_RGB },
    { GL_RGBA8, GL_RGBA },
  };

  GLFormat format = formats[(u32)data->format];

  glTexImage2D(
    GL_TEXTURE_2D, 
    0, 
    format.internal,
    data->width,
    data->height,
    0,
    format.format,
    GL_UNSIGNED_BYTE,
    data->pixels);

  GLint address_modes[] = 
  {
    GL_REPEAT,
    GL_MIRRORED_REPEAT,
    GL_CLAMP_TO_EDGE,
  };

  f32 border_colors[6][4] = 
  {
    {},{},{},
    { 1.f, 1.f, 1.f, 1.f },
    { 0.f, 0.f, 0.f, 1.f },
    { 0.f, 0.f, 0.f, 0.f },
  };

  GLint address_mode;

  switch (data->address_mode)
  {
  case ImageAddressMode::ClampToWhite:
  case ImageAddressMode::ClampToBlack:
  case ImageAddressMode::ClampToTransparent:
    address_mode = GL_CLAMP_TO_BORDER;
    glTexParameterfv(
      GL_TEXTURE_2D, 
      GL_TEXTURE_BORDER_COLOR, 
      border_colors[(u32)data->address_mode]);
    break;
  default:
    address_mode = address_modes[(u32)data->address_mode];
    break;
  }

  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, address_mode);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, address_mode);

  GLint filters[] = 
  {
    GL_NEAREST,
    GL_LINEAR,
  };

  GLint filter = filters[(u32)data->filter];

  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, filter);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, filter);

  if (data->format == ImageFormat::BW)
  {
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_G, GL_RED);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_B, GL_RED);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_A, GL_RED);
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Buffer::init(u64 vsize, u64 isize)
{
  glGenBuffers(1, &vbo);
  glGenBuffers(1, &ibo);
  glGenVertexArrays(1, &vao);

  glBindVertexArray(vao);
  glBindBuffer(GL_ARRAY_BUFFER, vbo);
  glBindBuffer(GL_ARRAY_BUFFER, 0);
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

  vertex_size = vsize;
  index_size = isize;

  glNamedBufferStorage(vbo, vertex_size, nullptr, GL_MAP_WRITE_BIT);
  glNamedBufferStorage(ibo, index_size, nullptr, GL_MAP_WRITE_BIT);

  return true;
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushBindBuffer(Buffer* buffer)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::BindBuffer;
  cmd.bind_buffer = buffer;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushDraw(
  u64 index_start, 
  u64 index_count, 
  u64 vertex_start)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::Draw;
  cmd.draw = 
  {
    .index_start = index_start,
    .index_count = index_count,
    .vertex_start = vertex_start,
  };
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushSetScissor(vec2i pos, vec2i size)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::SetScissor;
  cmd.set_scissor.pos = pos;
  cmd.set_scissor.size = size;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushBindTexture(Texture* texture)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::BindTexture;
  cmd.bind_texture = texture;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushUniformVec2(String name, vec2f v)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::PushUniformVec2;
  cmd.push_uniform.name = name;
  cmd.push_uniform.v = v;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushUniformFloat(String name, f32 f)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::PushUniformFloat;
  cmd.push_uniform.name = name;
  cmd.push_uniform.f = f;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushUniformBool(String name, b8 b)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::PushUniformBool;
  cmd.push_uniform.name = name;
  cmd.push_uniform.b = b;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
void Renderer::pushUniformMat3x2(String name, const mat3x2& m)
{
  DrawCmd cmd;
  cmd.kind = DrawCmd::Kind::PushUniformMat3x2;
  cmd.push_uniform.name = name;
  cmd.push_uniform.m = m;
  drawcmds.push(cmd);
}

/* ----------------------------------------------------------------------------
 */
static void setAttrib(
    u32 bufferidx, 
    u32 idx, 
    u32 len, 
    u32 type, 
    b8 normalized,
    u64 stride,
    u64 offset)
{
  glBindBuffer(GL_ARRAY_BUFFER, bufferidx);
  u8* baseOffset = 0;
  glVertexAttribPointer(
    idx, 
    len, 
    type, 
    normalized, 
    stride, 
    (void*)(baseOffset+offset));
  glEnableVertexAttribArray(idx);
  glBindBuffer(GL_ARRAY_BUFFER, 0);
}

/* ----------------------------------------------------------------------------
 */
void Buffer::setF32AttribF32(
    u32 idx, 
    u32 len, 
    b8 normalized, 
    u64 stride,
    u64 offset)
{
  glBindVertexArray(vao);
  setAttrib(vbo, idx, len, GL_FLOAT, normalized, stride, offset);
}

/* ----------------------------------------------------------------------------
 */
void Buffer::setF32AttribU8(
    u32 idx, 
    u32 len, 
    b8 normalized, 
    u64 stride,
    u64 offset)
{
  glBindVertexArray(vao);
  setAttrib(vbo, idx, len, GL_UNSIGNED_BYTE, normalized, stride, offset);
}

/* ----------------------------------------------------------------------------
 */
void Buffer::setGfxAttributes()
{
  setF32AttribF32(
      0, 2, false, sizeof(Vertex), offsetof(Vertex, pos));
  setF32AttribF32(
      1, 2, false, sizeof(Vertex), offsetof(Vertex, uv));
  setF32AttribU8(
      2, 4, true,  sizeof(Vertex), offsetof(Vertex, color));
}

/* ----------------------------------------------------------------------------
 */
void Buffer::map()
{
  assert(!mapped.vp && !mapped.ip && "buffer is already mapped");
  
  glBindVertexArray(vao);
  mapped.vp = glMapNamedBuffer(vbo, GL_WRITE_ONLY);
  mapped.ip = glMapNamedBuffer(ibo, GL_WRITE_ONLY);
}

/* ----------------------------------------------------------------------------
 */
void Buffer::unmap()
{
  assert(mapped.vp && mapped.ip && "buffer is not mapped");

  assert(glUnmapNamedBuffer(vbo));
  assert(glUnmapNamedBuffer(ibo));

  mapped.vp = mapped.ip = nullptr;
}

/* ----------------------------------------------------------------------------
 */
void Renderer::onWindowResized(WindowResized& event)
{
  glViewport(0, 0, event.size.x, event.size.y);
}


}
