/*
 *  For drawing things to the screen.
 */

$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"

#ifndef _ecs_renderer_h
#define _ecs_renderer_h

#include "iro/common.h"
#include "iro/unicode.h"
#include "iro/containers/linked_pool.h"

using namespace iro;

#include "math/vec.h"

struct Engine;
struct Window;
struct Texture;
struct WindowResized;

namespace gfx
{

/* ============================================================================
 */
struct Buffer
{
  u32 vbo = 0;
  u32 ibo = 0;
  u32 vao = 0;

  u64 vertex_size = 0;
  u64 index_size = 0;

  u64 num_vertexes = 0;
  u64 num_indexes = 0;

  struct
  {
    void* vp = nullptr;
    void* ip = nullptr;
  } mapped;

  b8   init(u64 vsize, u64 isize);
  void deinit();

  void setF32AttribF32(
      u32 idx, 
      u32 len, 
      b8 normalized, 
      u64 stride, 
      u64 offset);
  void setF32AttribU8(
      u32 idx, 
      u32 len, 
      b8 normalized, 
      u64 stride,
      u64 offset);

  void map();
  void unmap();
};

/* ============================================================================
 */
struct DrawCmd
{
  enum class Kind
  {
    Invalid,
    BindBuffer,
    Draw,
    SetScissor,
    BindTexture,
    PushUniformVec2,
    PushUniformFloat,
    PushUniformBool,
  };

  Kind kind;

  union
  {
    Buffer* bind_buffer;

    struct 
    {
      u64 index_start;
      u64 index_count;
      u64 vertex_start;
    } draw;

    struct 
    {
      vec2i pos;
      vec2i size;
    } set_scissor;

    Texture* bind_texture;
    
    struct
    {
      String name;
      union
      {
        vec2f v;
        f32 f;
        b8 b;
      };
    } push_uniform;
  };

  DrawCmd() : kind(Kind::Invalid), bind_buffer() {}
};

/* ============================================================================
 */
struct Renderer
{
  u64 frame;

  u32 vertex_shader;
  u32 frag_shader;
  u32 shader_program;

  SLinkedPool<Buffer> buffers;
  Array<DrawCmd> drawcmds;

  Engine* engine;

  b8   init(Engine& engine);
  void deinit();

  b8 update();

  b8 compileShaders();

  Buffer* createBuffer();
  void    destroyBuffer(Buffer* buffer);

  // Loads a texture into opengl and sets the proper reference to it 
  // on the given texture.
  b8 loadTexture(Texture& texture);

  void pushBindBuffer(Buffer* buffer);
  void pushDraw(u64 index_start, u64 index_count, u64 vertex_start);
  void pushSetScissor(vec2i pos, vec2i size);
  void pushBindTexture(Texture* texture);
  void pushUniformVec2(String name, vec2f v);
  void pushUniformFloat(String name, f32 f);
  void pushUniformBool(String name, b8 b);
  
  Renderer() {}

  // NOTE(sushi) explicitly deleting the copy constructor of Renderer
  //             to prevent accidental copies since operating on a copy 
  //             of it has potential to cause really really awesome bugs
  //             that are hard to find.
  Renderer(const Renderer& rhs) = delete;
  Renderer operator=(const Renderer& rhs) = delete;

private:

  void onWindowResized(WindowResized& event);

};

}

#endif
