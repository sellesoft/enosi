/*
 *  For drawing things to the screen.
 */

$ require "common"

#include "iro/Common.h"
#include "iro/containers/Array.h"
#include "iro/Unicode.h"
#include "math/mat.h"
#include "math/vec.h"

@@lpp.import "Buffer.lh"
@@lpp.import "DrawCmd.lh"
@@lpp.import "Framebuffer.lh"
@@lpp.import "graphics/ResourceMgr.lh"
@@lpp.import "Pipeline.lh"
@@lpp.import "Shader.lh"
@@lpp.import "Texture.lh"

using namespace iro;

struct Engine;
struct WindowResized;

namespace gfx
{

/* ============================================================================
 */
struct Renderer
{
  Engine* engine;
  mem::Allocator* allocator;
  void* internal;
  u64 frame;
  Array<DrawCmd> drawcmds;

  ResourceMgr resource_mgr;

  b8 loadTexture(CompiledTexture* texture);

  b8 init(Engine& engine, mem::Allocator& allocator);
  b8 deinit();
  b8 update();

  void setScissor(vec2i pos, vec2i size);
  void setViewport(vec2i pos, vec2i size);
  void bindFramebuffer(Framebuffer framebuffer); //{0} for default
  void bindPipeline(Pipeline pipeline);
  void bindTexture(Texture texture);
  void bindUniformBuffer(Buffer buffer);
  void bindStorageBuffer(Buffer buffer);
  void bindVertexBuffer(Buffer buffer);
  void bindIndexBuffer(Buffer buffer);
  void pushConstant(void* data, u64 size);
  void draw(u64 index_start, u64 index_count, u64 vertex_start);

  u64 getMaxPushConstantSize();

  void debugBeginLabel(vec4f color, utf8::String label);
  void debugEndLabel();
  void debugInsertLabel(vec4f color, utf8::String label);

  // NOTE(sushi) explicitly deleting the copy constructor of Renderer
  //             to prevent accidental copies since operating on a copy
  //             of it has potential to cause really really awesome bugs
  //             that are hard to find.
  Renderer() {}
  Renderer(const Renderer& rhs) = delete;
  Renderer operator=(const Renderer& rhs) = delete;

private:
  void onWindowResized(WindowResized& event);
};

}
