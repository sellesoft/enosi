/*
 *  For drawing things to the screen.
 */

$ require "common"

#include "iro/Common.h"
#include "iro/containers/Array.h"
#include "iro/containers/StackArray.h"
#include "iro/Unicode.h"
#include "math/mat.h"
#include "math/vec.h"
#include "math/Rect.h"

@@lpp.import "graphics/DescriptorSetLayout.lh"
@@lpp.import "graphics/ResourceMgr.lh"

using namespace iro;

struct Client;
struct WindowResized;
struct Window;
struct PostReload;
struct Color;

namespace gfx
{

struct RenderTarget;
struct Pipeline;
struct Vulkan;

/* ============================================================================
 */
struct Renderer
{
  mem::Allocator* allocator;
  ResourceMgr resource_mgr;
  
  // Temp until I figure out how to manage textures better.
  DescriptorSetLayout default_sampler_set_layout;
  DescriptorSetLayout default_ubo_set_layout;

  u32 next_image;

  struct InitParams
  {
    AssetMgr& assetmgr;
    Window& window;
    mem::Allocator& allocator;
  };

  b8 init(InitParams& params);
  b8 deinit();

  b8 beginFrame();
  void endFrame(); 

  b8 beginRenderPass(
    vec2i render_area_pos,
    vec2u render_area_size,
    RenderTarget target,
    Color clear_color);

  b8 beginRenderPassOverSwapchainImage(
    vec2i render_area_pos,
    vec2u render_area_size,
    Color clear_color);

  void endRenderPass();

  b8 submitQueue();
  b8 present();

  void setScissor(vec2i pos, vec2u size);
  void setViewport(vec2f pos, vec2f size);
  void bindPipeline(Pipeline pipeline);
  void bindDescriptorSet(u32 set_idx, DescriptorSet set);
  void bindVertexBuffer(Buffer buffer);
  void bindIndexBuffer(Buffer buffer);
  void bindUniformBuffer(Buffer buffer);

  void bindTexture(Texture texture)
  {
    bindDescriptorSet(1, texture.set);
  }

  void pushConstant(
    void* data, 
    u32 size, 
    u32 offset,
    ShaderStage stage);

  void draw(u32 index_start, u32 index_count, u32 vertex_start);

  // NOTE(sushi) a hacky way to get an image into a state where it can be 
  //             sampled by a shader, for use when wanting to display a 
  //             RenderTarget image. Needs to be done better later.
  void prepareImageForSampling(Image image);

  void debugBeginLabel(Color color, utf8::String label);
  void debugEndLabel();
  void debugInsertLabel(Color color, utf8::String label);

  void onWindowResized(vec2i size);

  // NOTE(sushi) explicitly deleting the copy constructor of Renderer
  //             to prevent accidental copies since operating on a copy
  //             of it has potential to cause really really awesome bugs
  //             that are hard to find.
  Renderer() {}
  Renderer(const Renderer& rhs) = delete;
  Renderer operator=(const Renderer& rhs) = delete;

  Vulkan* vk;

private:
  b8 updateSwapchain(vec2i viewport_size);
};

}
