/*
 *  For drawing things to the screen.
 */

$ require "common"

#include "iro/Common.h"
#include "iro/containers/Array.h"
#include "iro/Unicode.h"
#include "math/mat.h"
#include "math/vec.h"

@@lpp.import "graphics/Buffer.lh"
@@lpp.import "graphics/DrawCmd.lh"
@@lpp.import "graphics/Framebuffer.lh"
@@lpp.import "graphics/Pipeline.lh"
@@lpp.import "graphics/ResourceMgr.lh"
@@lpp.import "graphics/Shader.lh"
@@lpp.import "graphics/Texture.lh"

using namespace iro;

struct Client;
struct WindowResized;
struct Window;
struct PostReload;
struct Color;

namespace gfx
{

/* ============================================================================
 */
struct Renderer
{
  mem::Allocator* allocator;
  void* internal;
  u64 frame;
  Array<DrawCmd> drawcmds;
  ResourceMgr resource_mgr;

  struct InitParams
  {
    AssetMgr& assetmgr;
    Window& window;
    mem::Allocator& allocator;
  };

  b8 init(InitParams& params);
  b8 deinit();

  struct UpdateParams
  {
    Window& window;
  };

  b8 update(UpdateParams& params);

  void setScissor(vec2i pos, vec2i size);
  void setViewport(vec2i pos, vec2i size);
  void bindFramebuffer(Framebuffer framebuffer); //{0} for default
  void bindPipeline(Pipeline pipeline);
  void bindTexture(Texture texture);
  void bindUniformBuffer(Buffer buffer);
  void bindStorageBuffer(Buffer buffer);
  void bindVertexBuffer(Buffer buffer);
  void bindIndexBuffer(Buffer buffer);
  void pushConstant(void* data, u64 size);
  void draw(u64 index_start, u64 index_count, u64 vertex_start);

  u64 getMaxPushConstantSize();

  void debugBeginLabel(Color color, utf8::String label);
  void debugEndLabel();
  void debugInsertLabel(Color color, utf8::String label);

  void onWindowResized(vec2i size);

  // NOTE(sushi) explicitly deleting the copy constructor of Renderer
  //             to prevent accidental copies since operating on a copy
  //             of it has potential to cause really really awesome bugs
  //             that are hard to find.
  Renderer() {}
  Renderer(const Renderer& rhs) = delete;
  Renderer operator=(const Renderer& rhs) = delete;

private:
  b8 updateSwapchain(vec2i viewport_size);
};

}
