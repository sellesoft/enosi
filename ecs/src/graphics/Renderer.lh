/*
 *  For drawing things to the screen.
 */

$ local cmn = require "common"

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/containers/LinkedPool.h"

using namespace iro;

#include "math/vec.h"
#include "math/mat.h"

@@lpp.import "Geo.lh"
@@lpp.import "Buffer.lh"
@@lpp.import "DrawCmd.lh"

struct Engine;
struct Window;
struct WindowResized;

namespace gfx
{

struct CompiledTexture;

/* ============================================================================
 */
struct Renderer
{
  u64 frame;

  u32 shader_program;
  u32 stars_program;

  SLinkedPool<Buffer> buffers;
  Array<DrawCmd> drawcmds;

  Engine* engine;

  b8   init(Engine& engine);
  void deinit();

  b8 update();

  b8 compileShaders();

  Buffer* createBuffer();
  void    destroyBuffer(Buffer* buffer);

  // Loads a texture into opengl and sets the proper reference to it
  // on the given texture.
  b8 loadTexture(CompiledTexture* texture);

  void pushBindBuffer(Buffer* buffer);
  void pushDraw(u64 index_start, u64 index_count, u64 vertex_start);
  void pushSetScissor(vec2i pos, vec2i size);
  void pushBindTexture(gfx::Texture texture);
  void pushUniformVec2(String name, vec2f v);
  void pushUniformFloat(String name, f32 f);
  void pushUniformBool(String name, b8 b);
  void pushUniformMat3x2(String name, const mat3x2& m);
  void pushUseProgram(u32 program);
  void pushSetViewport(vec2i pos, vec2i size);

  Renderer() {}

  // NOTE(sushi) explicitly deleting the copy constructor of Renderer
  //             to prevent accidental copies since operating on a copy
  //             of it has potential to cause really really awesome bugs
  //             that are hard to find.
  Renderer(const Renderer& rhs) = delete;
  Renderer operator=(const Renderer& rhs) = delete;

private:

  void onWindowResized(WindowResized& event);

};

}
