$ require "common"

@@lpp.import "graphics/RendererInternal.lh"

@@lpp.import "graphics/Geo.lh"
@@lpp.import "graphics/Pipeline.lh"
@@lpp.import "graphics/Renderer.lh"

#include "iro/Logger.h"

@defFileLogger(gfx.pipeline, Info)

namespace gfx {

/* ----------------------------------------------------------------------------
 */
b8 Pipeline::init(
  Renderer& renderer,
  Shader vert_shader,
  Shader frag_shader,
  u64 push_constant_size,
  String name)
{
  RendererInternal& ri = *(RendererInternal*)renderer.internal;
  TRACE("initializing a pipeline with vertex shader ", vert_shader.index,
    " and fragment shader ", frag_shader.index, "\n");

  if (index != 0)
    return ERROR("attempted to initialize a pipeline with an already"
      " initialized pipeline\n");

  if (ri.pipeline_count >= ri.pipeline_pool.MAX_COUNT)
    return ERROR("failed to initialize a pipeline because the maximum"
      " number of pipelines has been reached (", ri.pipeline_pool.MAX_COUNT,
      ")\n");

  if (vert_shader.index == 0)
    return ERROR("attempted to initialize a pipeline with an invalid"
      " vertex shader\n");

  if (frag_shader.index == 0)
    return ERROR("attempted to initialize a pipeline with an invalid"
      " fragment shader\n");

  if (push_constant_size > renderer.getMaxPushConstantSize())
    return ERROR("attempted to initialize a pipeline with a push constant"
      " size that is too large (", push_constant_size, " > ",
      renderer.getMaxPushConstantSize(), ")\n");

  VkPushConstantRange push_constant =
  {
    .stageFlags = VK_SHADER_STAGE_VERTEX_BIT,
    .offset = 0,
    .size = (u32)push_constant_size,
  };

  VkDescriptorSetLayout descriptor_set_layouts[] =
  {
    ri.default_uniform_buffer_descriptor_set_layout,
    ri.default_sampler_descriptor_set_layout,
    ri.default_storage_buffer_descriptor_set_layout,
  };
  constexpr u32 descriptor_set_layout_count =
    sizeof(descriptor_set_layouts) / sizeof(descriptor_set_layouts[0]);

  VkPipelineLayoutCreateInfo pipeline_layout_create_info =
  {
    .sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
    .setLayoutCount = descriptor_set_layout_count,
    .pSetLayouts = descriptor_set_layouts,
    .pushConstantRangeCount = (push_constant_size > 0) ? 1u : 0u,
    .pPushConstantRanges = (push_constant_size > 0) ? &push_constant : nullptr,
  };

  VkPipelineLayout pipeline_layout;
  if (VK_SUCCESS != vkCreatePipelineLayout(ri.device,
      &pipeline_layout_create_info, &ri.allocator, &pipeline_layout))
    return ERROR("failed to create the pipeline layout\n");

  auto destroy_pipeline_layout = deferWithCancel
  {
    vkDestroyPipelineLayout(ri.device, pipeline_layout, &ri.allocator);
  };

  VkVertexInputBindingDescription vertex_binding =
  {
    .binding = 0,
    .stride = sizeof(Vertex),
    .inputRate = VK_VERTEX_INPUT_RATE_VERTEX,
  };

  VkVertexInputAttributeDescription vertex_attributes[] =
  {
    {
      .location = 0,
      .binding = 0,
      .format = VK_FORMAT_R32G32_SFLOAT,
      .offset = offsetof(Vertex, pos),
    },
    {
      .location = 1,
      .binding = 0,
      .format = VK_FORMAT_R32G32_SFLOAT,
      .offset = offsetof(Vertex, uv),
    },
    {
      .location = 2,
      .binding = 0,
      .format = VK_FORMAT_R8G8B8A8_UNORM,
      .offset = offsetof(Vertex, color),
    },
  };
  constexpr u32 vertex_attribute_count =
    sizeof(vertex_attributes) / sizeof(vertex_attributes[0]);

  VkPipelineVertexInputStateCreateInfo vertex_input_info =
  {
    .sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
    .vertexBindingDescriptionCount = 1,
    .pVertexBindingDescriptions = &vertex_binding,
    .vertexAttributeDescriptionCount = vertex_attribute_count,
    .pVertexAttributeDescriptions = vertex_attributes,
  };

  VkPipelineInputAssemblyStateCreateInfo input_assembly =
  {
    .sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
    .topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
    .primitiveRestartEnable = VK_FALSE,
  };

  VkPipelineViewportStateCreateInfo viewport_state =
  {
    .sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
    .viewportCount = 1,
    .scissorCount = 1,
  };

  VkPipelineRasterizationStateCreateInfo rasterizer =
  {
    .sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
    .depthClampEnable = VK_FALSE,
    .rasterizerDiscardEnable = VK_FALSE,
    .polygonMode = VK_POLYGON_MODE_FILL,
    .cullMode = VK_CULL_MODE_NONE,
    .frontFace = VK_FRONT_FACE_CLOCKWISE,
    .depthBiasEnable = VK_FALSE,
    .lineWidth = 1.0f,
  };

  VkPipelineMultisampleStateCreateInfo multisampling =
  {
    .sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO,
    .rasterizationSamples = VK_SAMPLE_COUNT_1_BIT,
    .sampleShadingEnable = VK_FALSE,
  };

  VkPipelineColorBlendAttachmentState blend_attachment =
  {
    .blendEnable = VK_TRUE,
    .srcColorBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA,
    .dstColorBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
    .colorBlendOp = VK_BLEND_OP_ADD,
    .srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE,
    .dstAlphaBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
    .alphaBlendOp = VK_BLEND_OP_ADD,
    .colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT
      | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT,
  };

  VkPipelineColorBlendStateCreateInfo blend_state =
  {
    .sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
    .logicOpEnable = VK_FALSE,
    .attachmentCount = 1,
    .pAttachments = &blend_attachment,
  };

  VkDynamicState dynamic_states[] =
  {
    VK_DYNAMIC_STATE_VIEWPORT,
    VK_DYNAMIC_STATE_SCISSOR
  };
  constexpr u32 dynamic_state_count =
    sizeof(dynamic_states) / sizeof(dynamic_states[0]);

  VkPipelineDynamicStateCreateInfo dynamic_state =
  {
    .sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
    .dynamicStateCount = dynamic_state_count,
    .pDynamicStates = dynamic_states,
  };

  RendererShader* vert_renderer_shader =
    ri.shader_pool.at_index(vert_shader.index);
  if (vert_renderer_shader == nullptr)
    return ERROR("attempted to initialize a pipeline with an invalid"
      " vertex shader\n");

  RendererShader* frag_renderer_shader =
    ri.shader_pool.at_index(frag_shader.index);
  if (frag_renderer_shader == nullptr)
    return ERROR("attempted to initialize a pipeline with an invalid"
      " fragment shader\n");

  VkPipelineShaderStageCreateInfo shader_stages[2] =
  {
    {
      .sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
      .stage = VK_SHADER_STAGE_VERTEX_BIT,
      .module = vert_renderer_shader->module,
      .pName = "main",
    },
    {
      .sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
      .stage = VK_SHADER_STAGE_FRAGMENT_BIT,
      .module = frag_renderer_shader->module,
      .pName = "main",
    }
  };

  VkGraphicsPipelineCreateInfo pipeline_create_info =
  {
    .sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
    .stageCount = 2,
    .pStages = shader_stages,
    .pVertexInputState = &vertex_input_info,
    .pInputAssemblyState = &input_assembly,
    .pViewportState = &viewport_state,
    .pRasterizationState = &rasterizer,
    .pMultisampleState = &multisampling,
    .pColorBlendState = &blend_state,
    .pDynamicState = &dynamic_state,
    .layout = pipeline_layout,
    .renderPass = ri.default_renderpass,
    .subpass = 0,
  };

  VkPipeline pipeline_handle;
  if (VK_SUCCESS != vkCreateGraphicsPipelines(ri.device, ri.pipeline_cache, 1,
    &pipeline_create_info, &ri.allocator, &pipeline_handle))
    return ERROR("failed to create the graphics pipeline\n");

  RendererPipeline* pipeline = ri.pipeline_pool.at_index(ri.pipeline_count);
  pipeline->pipeline = pipeline_handle;
  pipeline->layout = pipeline_layout;
  pipeline->push_constant_size = push_constant_size;
  index = ri.pipeline_pool.index_of(pipeline);
  ri.pipeline_count++;

  debugSetObjectName(renderer, VK_OBJECT_TYPE_PIPELINE, pipeline_handle,
    "<", name, " pipeline>");
  debugSetObjectName(renderer, VK_OBJECT_TYPE_PIPELINE_LAYOUT, pipeline_layout,
    "<", name, " pipeline layout>");

  destroy_pipeline_layout.cancel();
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Pipeline::deinit(Renderer& renderer)
{
  RendererInternal& ri = *(RendererInternal*)renderer.internal;
  TRACE("destroying the pipeline at index ", index, "\n");

  if (index == 0)
    return true;

  RendererPipeline* pipeline = ri.pipeline_pool.at_index(index);
  if (pipeline == nullptr)
    return ERROR("attempted to destroy a pipeline at index ", index,
      " which is out of bounds\n");

  if (pipeline->pipeline == VK_NULL_HANDLE)
    return ERROR("attempted to destroy an uninitialized pipeline\n");

  vkDestroyPipeline(ri.device, pipeline->pipeline, &ri.allocator);
  vkDestroyPipelineLayout(ri.device, pipeline->layout, &ri.allocator);

  pipeline->pipeline = VK_NULL_HANDLE;
  pipeline->layout = VK_NULL_HANDLE;

  index = 0;
  ri.pipeline_pool.remove(pipeline);
  ri.pipeline_count--;

  return true;
}

}