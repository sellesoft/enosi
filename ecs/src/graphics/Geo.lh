/*
 *  Definition of Vertex and Index types used for drawing as well as helpers
 *  for drawing primitives.
 */

$ local cmn = require "common"
$ local List = require "List"

#include "math/vec.h"
#include "Color.h"
#include "iro/Unicode.h"

using namespace iro;

namespace gfx
{

struct Font;

struct Vertex
{
  vec2f pos;
  vec2f uv;
  u32   color;
};

typedef u32 Index;

/* ----------------------------------------------------------------------------
 */
static inline vec2i putLineCounts() { return { 4, 6 }; }

/* ----------------------------------------------------------------------------
 */
static vec2i putLine(
    Vertex* putverts, 
    Index*  putindices, 
    vec2i   offsets, 
    vec2f   start,
    vec2f   end,
    f32     thickness,
    Color   color)
{
  if (color.a == 0)
    return {0, 0};

  u32 col = color.rgba;

  Vertex* vp = putverts + offsets.x;
  Index* ip = putindices + offsets.y;

  vec2f ott = end - start;
  vec2f norm = vec2f(ott.y, -ott.x).normalized();

  ip[0] = offsets.x; ip[1] = offsets.x + 1; ip[2] = offsets.x + 2;
  ip[3] = offsets.x; ip[4] = offsets.x + 2; ip[5] = offsets.x + 3;
  vp[0] = { { start.x, start.y }, { 0, 0 }, col };
  vp[1] = { { end.x,   end.y },   { 0, 0 }, col };
  vp[2] = { { end.x,   end.y },   { 0, 0 }, col };
  vp[3] = { { start.x, start.y }, { 0, 0 }, col };

  vp[0].pos += norm * thickness / 2.f;
  vp[1].pos += norm * thickness / 2.f;
  vp[2].pos -= norm * thickness / 2.f;
  vp[3].pos -= norm * thickness / 2.f;

  return putLineCounts();
}

/* ----------------------------------------------------------------------------
 */
static inline vec2i putFilledTriangleCounts() { return { 3, 3 }; }

/* ----------------------------------------------------------------------------
 */
static vec2i putFilledTriangle(
    Vertex* putverts,
    Index*  putindices,
    vec2i   offsets,
    vec2f   p1,
    vec2f   p2,
    vec2f   p3,
    Color   color)
{
  if (color.a == 0)
    return { 0, 0 };

  u32 col = color.rgba;

  Vertex* vp = putverts + offsets.x;
  Index*  ip = putindices + offsets.y;

  ip[0] = offsets.x; ip[1] = offsets.x + 1; ip[2] = offsets.x + 2;
  vp[0] = { p1, { 0, 0 }, col };
  vp[1] = { p2, { 0, 0 }, col };
  vp[2] = { p3, { 0, 0 }, col };

  return putFilledTriangleCounts();

}

/* ----------------------------------------------------------------------------
 */
static inline vec2i putTriangleCounts() { return { 12, 18 }; }

/* ----------------------------------------------------------------------------
 */
static vec2i putTriangle(
    Vertex* putverts,
    Index* putindices,
    vec2i offsets,
    vec2f p0,
    vec2f p1,
    vec2f p2,
    f32 thickness,
    Color color)
{
  if (color.a == 0)
    return { 0, 0 };

  // TODO(sushi) ref the old deshi code and remove this function's 
  //             dependency on putLine.

  vec2i sum = {};

  Index* ip = putindices + offsets.y;
  
  sum += putLine(putverts, ip, sum, p0, p1, thickness, color);
  sum += putLine(putverts, ip, sum, p1, p2, thickness, color);
  sum += putLine(putverts, ip, sum, p2, p0, thickness, color);

  return sum;
}

/* ----------------------------------------------------------------------------
 */
static inline vec2i putFilledRectCounts() { return { 4, 6 }; }

/* ----------------------------------------------------------------------------
 */
static vec2i putFilledRect(
    Vertex* putverts,
    Index*  putindices,
    vec2i   offsets,
    vec2f   pos,
    vec2f   dim,
    vec2f   uv0,
    vec2f   uv1,
    vec2f   uv2,
    vec2f   uv3,
    Color   color)
{
  if (color.a == 0)
    return { 0, 0 };

  u32 col = color.rgba;

  Vertex* vp = putverts + offsets.x;
  Index*  ip = putindices + offsets.y;

  vec2f tl = pos;
  vec2f br = pos + dim;
  vec2f bl = pos + vec2f{ 0, dim.y };
  vec2f tr = pos + vec2f{ dim.x, 0 };

  ip[0] = offsets.x; ip[1] = offsets.x + 1; ip[2] = offsets.x + 2;
  ip[3] = offsets.x; ip[4] = offsets.x + 2; ip[5] = offsets.x + 3;
  vp[0] = { tl, uv0, col };
  vp[1] = { tr, uv1, col };
  vp[2] = { br, uv2, col };
  vp[3] = { bl, uv3, col };

  return putFilledRectCounts();
}

/* ----------------------------------------------------------------------------
 */
static vec2i putFilledRect(
    Vertex* putverts,
    Index*  putindices,
    vec2i   offsets,
    vec2f   pos,
    vec2f   dim,
    Color   color)
{
  return putFilledRect(
    putverts,
    putindices,
    offsets,
    pos,
    dim,
    { 0.f, 1.f },
    { 1.f, 1.f },
    { 1.f, 0.f },
    { 0.f, 0.f },
    color);
}

/* ----------------------------------------------------------------------------
 */
static void putFilledRect(
    Vertex* putverts,
    Index*  putindices,
    vec2i*  offsets,
    vec2f   pos,
    vec2f   dim,
    Color   color)
{
  vec2i counts = 
    putFilledRect(
      putverts,
      putindices,
      *offsets,
      pos,
      dim,
      color);

  *offsets += counts;
}

/* ----------------------------------------------------------------------------
 */
static vec2i putBordersCounts() { return { 8, 24 }; }

/* ----------------------------------------------------------------------------
 */
static vec2i putBorders(
    Vertex* putverts,
    Index* putindices,
    vec2i offsets,
    vec4f borders,
    vec2f pos,
    vec2f area,
    Color color)
{
  if (color.a == 0)
    return { 0, 0 };

  u32 col = color.rgba;

  Vertex* vp = putverts + offsets.x;
  Index*  ip = putindices + offsets.y;

  u8 mask = 
      (borders.x != 0.f? 1 << 0 : 0) 
    | (borders.y != 0.f? 1 << 1 : 0)
    | (borders.z != 0.f? 1 << 2 : 0)
    | (borders.w != 0.f? 1 << 3 : 0);

  vec2f tl = pos;
  vec2f tr = pos.xadd(area.x);
  vec2f br = pos + area;
  vec2f bl = pos.yadd(area.y);

// Helper for writing out the data. imap and vmap are filled out 
// with appropriate data then this writes it out for us in each case.
$ local imap,vmap
$ local placeData = function()
$   for i=0,#imap-1 do
      ip[$(i)] = $(imap[i+1]);
$   end
$   for i=0,#vmap-1 do
      vp[$(i)] = { $(vmap[i+1]), {0,0}, col };
$   end
$ end


$$$
    -- TODO(sushi) this data is kinda useless.
    local i = 
    {
      [4] = 
      {
        0, 1, 3,
        0, 3, 2,
        2, 3, 5,
        2, 5, 4,
        4, 5, 7,
        4, 7, 6,
        6, 7, 1,
        6, 1, 0,
      },

      [3] = 
      {
        0, 1, 3,
        0, 3, 2,
        2, 3, 5,
        2, 5, 4,
        4, 5, 7,
        4, 7, 6,
      },

      [2] = 
      {
        0, 1, 3,
        0, 3, 2,
        2, 3, 5,
        2, 5, 4,
      },

      s = 
      {
        0, 1, 3,
        0, 2, 3,
        4, 5, 7,
        4, 7, 6,
      },

      [1] = 
      {
        0, 1, 3,
        0, 3, 2,
      },
    }

    local when = setmetatable({},
    {
      __index = function(_, key)
        local mask = ""
        local count = 0
        local addMask = function(n)
          if count ~= 0 then
            mask = mask.." | "
          end
          mask = mask.."(1 << "..n..")"
          count = count + 1
        end

        if key:find "l" then
          addMask(0)
        end

        if key:find "t" then
          addMask(1)
        end

        if key:find "r" then
          addMask(2)
        end

        if key:find "b" then
          addMask(3)
        end 

        return function()
          return "case "..mask..":"
        end
      end
    })

    local put = function(m, ...)
      local indicies
      local n = tonumber(m)
      if n then
        indicies = i[n]
      else
        indicies = i[m]
      end

      List(indicies):eachWithIndex(function(idx, i)
$$$
        ip[$(i-1)] = offsets.x + $(idx);
$$$
      end)

      local args = {...}

      List(args):eachWithIndex(function(v, i)
$$$
        vp[$(i-1)] = { $(v), {0.f, 0.f}, col };
$$$
      end)
$$$
      return { $(#args), $(#indicies) };
$$$
    end
$$$

  switch (mask)
  {
  @when.ltrb
    @put(4, 
      tl - borders.xy(),
      tl,
      tr + borders.zy().yneg(),
      tr,
      br + borders.zw(),
      br,
      bl + borders.xw().xneg(),
      bl)
    break;

  @when.ltr
    @put(3,
      bl.xadd(-borders.x),
      bl,
      tl - borders.xy(),
      tl,
      tr + borders.zy().yneg(),
      tr,
      br.xadd(borders.z),
      br)
    break;

  @when.ltb
    @put(3,
      br.yadd(borders.w),
      br,
      bl + borders.xw().xneg(),
      bl,
      tl - borders.xy(),
      tl,
      tr + borders.zy().yneg(),
      tr)
    break;

  @when.lrb
    @put(3,
      tr.xadd(borders.z),
      tr,
      br + borders.zw(),
      br,
      bl + borders.xw().xneg(),
      bl,
      tl.xadd(-borders.x),
      tl)
    break;

  @when.trb
    @put(3,
      tl.yadd(-borders.y),
      tl,
      tr + borders.zy().yneg(),
      tr,
      br + borders.zw(),
      br,
      bl.yadd(borders.w),
      bl)
    break;

  @when.lt
    @put(2,
      bl.xadd(-borders.x),
      bl,
      tl - borders.xy(),
      tl,
      tr.yadd(-borders.y),
      tr)
    break;

  @when.lr
    @put(s,
      bl.xadd(-borders.x),
      bl,
      tl.xadd(-borders.x),
      tl,
      tr.xadd(borders.z),
      tr,
      br.xadd(borders.z),
      br)
    break;

  @when.lb
    @put(2,
      br.yadd(borders.w),
      br,
      bl + borders.xw().xneg(),
      bl,
      tl.xadd(-borders.x),
      tl)
    break;

  @when.tb
    @put(s,
      tl.yadd(-borders.y),
      tl,
      tr.yadd(-borders.y),
      tr,
      br.yadd(borders.w),
      br,
      bl.yadd(borders.w),
      bl)
    break;

  @when.tr
    @put(2,
      tl.yadd(-borders.y),
      tl,
      tr + borders.zy().yneg(),
      tr,
      br.xadd(borders.z),
      br)
    break;

  @when.rb
    @put(2,
      tr.xadd(borders.z),
      tr,
      br + borders.zw(),
      br,
      bl.yadd(borders.w),
      bl)
    break;

  @when.l
    @put(1,
      tl.yadd(-borders.y),
      tl,
      tr.yadd(-borders.y),
      tr)
    break;

  @when.t
    @put(1,
      tr.xadd(borders.z),
      tr,
      br.yadd(borders.z),
      br)
    break;

  @when.r
    @put(1,
      br.yadd(borders.w),
      br,
      bl.yadd(borders.w),
      bl)
    break;

  @when.b
    @put(1,
      bl.xadd(-borders.x),
      bl,
      tl.xadd(-borders.x),
      tl)
    break;

  default:
    return {0, 0};
  }

}

/* ----------------------------------------------------------------------------
 */
static void putBorders(
    Vertex* putverts,
    Index*  putindices,
    vec2i*  offsets,
    vec4f   borders,
    vec2f   pos,
    vec2f   area,
    Color   color)
{
  *offsets += 
    putBorders(
      putverts,
      putindices,
      *offsets,
      borders,
      pos,
      area,
      color);
}

/* ----------------------------------------------------------------------------
 */
static vec2i putTextCounts(String text) 
{  
  return s32(text.countCharacters()) * putFilledRectCounts();
}

/* ----------------------------------------------------------------------------
 */
void putGlyph(
  Vertex* vp,
  Index*  ip,
  vec2i*  counts,
  Font*   font,
  u32     codepoint,
  vec2f*  pos, 
  Color   color);

/* ----------------------------------------------------------------------------
 */
vec2f measureText(
  String text,
  Font*  font,
  f32    font_height,
  f32    tab_spaces);

/* ----------------------------------------------------------------------------
 */
void putText(
  Vertex* putverts,
  Index*  putindices,
  vec2i*  offsets,
  vec2f   pos,
  String  text,
  Font*   font,
  f32     font_height,
  f32     tab_spaces,
  Color   color,
  vec2f*  size);

/* ----------------------------------------------------------------------------
 */
/*enum class TextWrapping*/
/*{*/
/*  None,*/
/*  Word,*/
/*  Char,*/
/*};*/



}
