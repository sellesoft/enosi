$ local cmn = require "common"

@@lpp.import "asset/AssetMgr.lh"

@@lpp.import "graphics/Font.lh"
@@lpp.import "graphics/CompiledTexture.lh"

#include "iro/Logger.h"
#include "iro/Platform.h"
#include "iro/BinarySearch.h"
#include "iro/fs/Path.h"
#include "iro/fs/File.h"
#include "iro/memory/Bump.h"
#include "iro/Scanner.h"

#include "math/util.h"

#include "ctype.h"
#include "stdlib.h"

namespace gfx
{

@defFileLogger(font.bdf, Info)

/* ----------------------------------------------------------------------------
 */
b8 Font::compileBDF(CompileParams& params)
{
  using namespace fs;
  
  String source_name = params.name;

  PathBuffer source_path_buffer;
  io::format(&source_path_buffer, params.name);
  if (!Path::hasExtension(source_name))
    io::format(&source_path_buffer, ".bdf"_str);
  else
    source_name = params.name.subToLast('.');

  String source_path = source_path_buffer.asStr();

  PathBuffer dest_path_buffer;
  io::formatv(&dest_path_buffer, 
    params.assetmgr->getDataDir(), '/', source_name, ".cmp_font"_str);

  String dest_path = dest_path_buffer.asStr();

  if (!Path::exists(source_path))
    return ERROR("attempt to compile font '", params.name, "' as bdf, but "
                 "there is no asset at '", source_path, "\n");

  if (!AssetMgr::checkNeedsCompiled(source_path, dest_path))
    return true;

  INFO("compiling '", dest_path, "'\n");

  auto file = File::from(source_path, OpenFlag::Read);
  if (isnil(file))
    return false;
  defer { file.close(); };

  Scanner scanner = {};
  if (!scanner.init(&file))
    return ERROR("failed to initialize Scanner\n");
  defer { scanner.deinit(); };

  auto err = [&](auto... args)
  {
    ERROR(source_path, ':', scanner.line, ':', scanner.column, ": ", 
          args..., '\n');
    return false;
  };
    
  if ("STARTFONT"_str != scanner.scanIdentifier())
    return err("font does not start with STARTFONT");

  scanner.skipLine();

  enum class Section
  {
    Global,
    FontProperties,
    Chars,
    Char,
  } section = Section::Global;

  vec4i bbx = {};

  auto consumeNumber = [&](auto* x)
  {
    scanner.skipWhitespace();
    io::StaticBuffer<16> buf;

    if (0 == scanner.scanNumber(&buf))
      return err("expected a number");
    *x = atoi((char*)buf.buffer);
    return true;
  };

  // Allocate the data buffer we'll output.
  io::Memory data_buffer;
  data_buffer.open();
  defer { data_buffer.close(); };

  // Determine the number of codepoints we want to compile.
  u32 num_codepoints = 0;
  for (auto& range : params.ranges)
    num_codepoints += range.num_codepoints;

  // Allocate the full buffer.
  u64 data_size = 
    sizeof(FontData) + 
    sizeof(PackRange) * params.ranges.len + 
    sizeof(PackedChar) * num_codepoints;

  auto* data = (FontData*)data_buffer.allocateBytes(data_size);
  data->kind = FontKind::BDF;

  auto* ranges = (PackRange*)(data + 1);
  data->ranges.setSlice(ranges, params.ranges.len);

  auto* chars = (PackedChar*)(ranges + params.ranges.len);

  u32 chars_offset = 0;
  for (s32 i = 0; i < params.ranges.len; ++i)
  {
    PackRange* out_range = ranges + i;
    CodepointRange* in_range = &params.ranges[i];
    
    out_range->first_codepoint = in_range->first_codepoint;
    out_range->chars.setSlice(chars + chars_offset, in_range->num_codepoints);

    chars_offset += in_range->num_codepoints;
  }

  // Figure out how many codepoints we want per row.
  u64 codepoints_per_row = 
    math::roundUpToPower2(u64(sqrt((f32)num_codepoints)));

  // And how many rows.
  u64 row_count = 1 + num_codepoints / codepoints_per_row;

  // The size of the texture we'll create and its pixels. Allocated once 
  // we know the font's bounding box.
  // Also, the desired width of each codepoint, aligned to 2.
  io::Memory pixels_buffer;
  pixels_buffer.open();
  defer { pixels_buffer.close(); };

  u8* pixels = nullptr;
  vec2i texture_size = {};
  u32 width_aligned = 0;

  static const u32 max_bitmap_rows = 32;

  struct Char
  {
    u64   encoding;
    vec4i bbx;
    vec2i dwidth;
    u64   bitmap_rows[max_bitmap_rows];
  };

  // The current character we are parsing.
  Char curchar = {};

  // The number of characters reported by the font.
  u64 bdf_chars_count = 0;

  // Keep around the last range we wrote to to avoid looking up the same
  // range repeatedly.
  PackRange* currange = ranges;

  auto getPackedChar = [&]() -> PackedChar*
  {
    // Check if curchar is within the cached range.
    if (curchar.encoding < currange->first_codepoint ||
        curchar.encoding > currange->first_codepoint + currange->chars.len)
    {
      // Search for a range containing curchar.
      b8 found = false;
      for (PackRange& range : data->ranges.getSlice())
      {
        if (curchar.encoding > range.first_codepoint &&
            curchar.encoding < range.first_codepoint + range.chars.len)
        {
          currange = &range;
          found = true;
          break;
        }
      }
      
      if (!found)
        return nullptr;
    }

    return 
      currange->chars.ptr.get() + 
      (curchar.encoding - currange->first_codepoint);
  };

  auto getCharPixelsOffset = [&]()
  {
    u32 offset = 0;

    auto* irange = ranges;
    while (irange != currange)
    {
      offset += irange->chars.len;
      irange += 1;
    }

    offset += (curchar.encoding - currange->first_codepoint);
    
    vec2i pos;
    pos.x = offset % codepoints_per_row;
    pos.y = offset / codepoints_per_row;
    return pos.x * bbx.z + bbx.w * pos.y * texture_size.x;
  };

  for (b8 done = false; !done;)
  {
    scanner.skipWhitespace();

    if (scanner.eof())
      return err("unexpected end of file");

    String keyword = scanner.scanIdentifier();
    if (isnil(keyword))
      return err("expected a keyword");

    if ("COMMENT"_str == keyword)
    {
      scanner.skipLine();
      continue;
    }

    u64 keyword_hash = keyword.hash();

    switch (section)
    {
    case Section::Global:
      switch (keyword_hash)
      {
      case "FONTBOUNDINGBOX"_hashed:
        if (!consumeNumber(&bbx.z)) return false;
        if (!consumeNumber(&bbx.w)) return false;
        if (!consumeNumber(&bbx.x)) return false;
        if (!consumeNumber(&bbx.y)) return false;

        data->height = bbx.w;
        
        width_aligned = u64(ceil(bbx.z / 2.f) * 2.f);

        // We have enough information to setup the texture now.
        texture_size = vec2i(
          codepoints_per_row * width_aligned, row_count * bbx.w);

        data->size_x = texture_size.x;
        data->size_y = texture_size.y;

        pixels = pixels_buffer.allocateBytes(
          u64(texture_size.x) * texture_size.y);

        // Set the font height of each range (not sure if this is actually 
        // used ever).
        for (s32 i = 0; i < params.ranges.len; ++i)
          ranges[i].font_size = bbx.w;
        break;

      case "STARTPROPERTIES"_hashed:
        section = Section::FontProperties;
        scanner.skipLine();
        break;

      case "CHARS"_hashed:
        if (!consumeNumber(&bdf_chars_count))
          return false;
        section = Section::Chars;
        break;

      default:
        scanner.skipLine();
        break;
      }
      break;
    
    case Section::FontProperties:
      switch (keyword_hash)
      {
      case "FONT_ASCENT"_hashed:
        if (!consumeNumber(&data->ascent))
          return false;
        break;
      case "FONT_DESCENT"_hashed:
        if (!consumeNumber(&data->descent))
          return false;
        break;
      case "ENDPROPERTIES"_hashed:
        section = Section::Global;
        break;
      default:
        scanner.skipLine();
        break;
      }
      break;

    case Section::Chars:
      switch (keyword_hash)
      {
      case "STARTCHAR"_hashed:
        section = Section::Char;
        scanner.skipLine();
        curchar = {};
        break;

      case "ENDFONT"_hashed:
        done = true;
        break;

      default:
        if (bdf_chars_count != 0)
          return err("expected STARTCHAR (", bdf_chars_count, " remaining)");
        section = Section::Global;
        break;
      }
      break;

    case Section::Char:
      switch (keyword_hash)
      {
      case "ENCODING"_hashed:
        if (!consumeNumber(&curchar.encoding))
          return false;
        break;
      case "DWIDTH"_hashed:
        if (!consumeNumber(&curchar.dwidth.x))
          return false;
        if (!consumeNumber(&curchar.dwidth.y))
          return false;
        break;
      case "BBX"_hashed:
        if (!consumeNumber(&curchar.bbx.z)) return false;
        if (!consumeNumber(&curchar.bbx.w)) return false;
        if (!consumeNumber(&curchar.bbx.x)) return false;
        if (!consumeNumber(&curchar.bbx.y)) return false;
        assert(curchar.bbx.w < max_bitmap_rows);
        break;
      case "BITMAP"_hashed:
        scanner.skipLine();
        for (s32 row = 0; row < curchar.bbx.w; ++row)
        {
          String val = scanner.scanLine();
          curchar.bitmap_rows[row] = strtoll((char*)val.ptr, nullptr, 16);
        }
        break;
      case "ENDCHAR"_hashed:
        if (PackedChar* pchar = getPackedChar())
        {
          /*
             bbx.z (6)
      bbx.w  `------->
      (11) `  ________  
            | |      | ,-- cbbx.w (8)
            | | #    | | 
            | | #    | |
            | | #    | |
            | | #    | |
            | | #    | |
            | | #    | |
            | |      | |
            | * #    | v<-- cbbx.y (0)
            | |      |
   bbx.y -> v |______|
   (-2)       ^ ^
              bbx.x (0)
                |
                cbbx.x (2) & cbbx.z (1)
              
              top = 11 - (0 - (-2)) - 8 = 1

           */

          u32 top_offset = bbx.w - (curchar.bbx.y - bbx.y) - curchar.bbx.w;
          u32 left_offset = curchar.bbx.x - bbx.x;

          u32 pix_offset = getCharPixelsOffset();

          auto pos = 
            vec2i(pix_offset % texture_size.x, pix_offset / texture_size.x);

          pchar->x0 = pos.x;
          pchar->y0 = pos.y;
          pchar->x1 = pos.x + bbx.z;
          pchar->y1 = pos.y + bbx.w;
          pchar->xadvance = curchar.dwidth.x;
          pchar->xoff = pchar->yoff = pchar->xoff2 = pchar->yoff2 = 0.f;

          u8* tl = pixels + pix_offset;
          u8* ctl = tl + top_offset * texture_size.x + left_offset;

          for (u32 rowi = 0; rowi < curchar.bbx.w; ++rowi)
          {
            u8* row = ctl + (rowi * texture_size.x);

            for (u32 coli = 0; coli < curchar.bbx.z; ++coli)
            {
              if (curchar.bitmap_rows[rowi] & (1 << (bbx.z - coli + 1)))
                *(row + coli) = 0xff;
            }
          }
        }
        section = Section::Chars;
        bdf_chars_count -= 1;
        break;
      default:
        scanner.skipLine();
        break;
      }
      break;
    }
  }

  if (!platform::makeDir(Path::removeBasename(dest_path), true))
    return ERROR("failed to make directorys for '", dest_path, "'\n");

  auto data_file = 
    File::from(dest_path,
        OpenFlag::Write
      | OpenFlag::Truncate
      | OpenFlag::Create);

  if (isnil(data_file))
    return 
      ERROR("failed to open data file for writing at '", dest_path, "'\n");
  defer { data_file.close(); };

  data_file.write(data_buffer.asBytes());

  gfx::CompiledTexture::CompileParams tparams = 
  {
    .name         = source_name,
    .width        = u32(texture_size.x),
    .height       = u32(texture_size.y),
    .format       = gfx::ImageFormat::BW,
    .usage        = gfx::ImageUsage::Sampled,
    .filter       = gfx::ImageFilter::Nearest,
    .address_mode = gfx::ImageAddressMode::ClampToWhite,
    .allocator    = params.allocator,
    .assetmgr     = params.assetmgr,
  };

  if (!gfx::CompiledTexture::compileFromMemory(pixels, tparams))
    return ERROR("failed to compile font texture\n");

  return true;
}

}
