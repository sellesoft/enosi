/**
 * Loader generated by glad 2.0.8 on Mon Feb 10 22:02:05 2025
 *
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 *
 * Generator: C/C++
 * Specification: glx
 * Extensions: 3
 *
 * APIs:
 *  - glx=1.4
 *
 * Options:
 *  - ALIAS = False
 *  - DEBUG = True
 *  - HEADER_ONLY = True
 *  - LOADER = True
 *  - MX = False
 *  - ON_DEMAND = False
 *
 * Commandline:
 *    --api='glx=1.4' --extensions='GLX_ARB_create_context,GLX_ARB_framebuffer_sRGB,GLX_EXT_framebuffer_sRGB' c --debug --header-only --loader
 *
 * Online:
 *    http://glad.sh/#api=glx%3D1.4&extensions=GLX_ARB_create_context%2CGLX_ARB_framebuffer_sRGB%2CGLX_EXT_framebuffer_sRGB&generator=c&options=DEBUG%2CHEADER_ONLY%2CLOADER
 *
 */

#ifndef GLAD_GLX_H_
#define GLAD_GLX_H_

#ifdef GLX_H
  #error GLX header already included (API: glx), remove previous include!
#endif
#define GLX_H 1


#include <X11/X.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>

#include "gl.h"

#define GLAD_GLX
#define GLAD_OPTION_GLX_DEBUG
#define GLAD_OPTION_GLX_HEADER_ONLY
#define GLAD_OPTION_GLX_LOADER

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define GLAD_PLATFORM_WIN32 1
  #else
    #define GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define GLAD_PLATFORM_APPLE 1
  #else
    #define GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#define GLAD_UNUSED(x) (void)(x)

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif

#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

#define GLAD_GENERATOR_VERSION "2.0.8"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define GLX_ACCUM_ALPHA_SIZE 17
#define GLX_ACCUM_BLUE_SIZE 16
#define GLX_ACCUM_BUFFER_BIT 0x00000080
#define GLX_ACCUM_GREEN_SIZE 15
#define GLX_ACCUM_RED_SIZE 14
#define GLX_ALPHA_SIZE 11
#define GLX_AUX_BUFFERS 7
#define GLX_AUX_BUFFERS_BIT 0x00000010
#define GLX_BACK_LEFT_BUFFER_BIT 0x00000004
#define GLX_BACK_RIGHT_BUFFER_BIT 0x00000008
#define GLX_BAD_ATTRIBUTE 2
#define GLX_BAD_CONTEXT 5
#define GLX_BAD_ENUM 7
#define GLX_BAD_SCREEN 1
#define GLX_BAD_VALUE 6
#define GLX_BAD_VISUAL 4
#define GLX_BLUE_SIZE 10
#define GLX_BUFFER_SIZE 2
#define GLX_BufferSwapComplete 1
#define GLX_COLOR_INDEX_BIT 0x00000002
#define GLX_COLOR_INDEX_TYPE 0x8015
#define GLX_CONFIG_CAVEAT 0x20
#define GLX_CONTEXT_DEBUG_BIT_ARB 0x00000001
#define GLX_CONTEXT_FLAGS_ARB 0x2094
#define GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB 0x00000002
#define GLX_CONTEXT_MAJOR_VERSION_ARB 0x2091
#define GLX_CONTEXT_MINOR_VERSION_ARB 0x2092
#define GLX_DAMAGED 0x8020
#define GLX_DEPTH_BUFFER_BIT 0x00000020
#define GLX_DEPTH_SIZE 12
#define GLX_DIRECT_COLOR 0x8003
#define GLX_DONT_CARE 0xFFFFFFFF
#define GLX_DOUBLEBUFFER 5
#define GLX_DRAWABLE_TYPE 0x8010
#define GLX_EVENT_MASK 0x801F
#define GLX_EXTENSIONS 0x3
#define GLX_EXTENSION_NAME "GLX"
#define GLX_FBCONFIG_ID 0x8013
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB 0x20B2
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x20B2
#define GLX_FRONT_LEFT_BUFFER_BIT 0x00000001
#define GLX_FRONT_RIGHT_BUFFER_BIT 0x00000002
#define GLX_GRAY_SCALE 0x8006
#define GLX_GREEN_SIZE 9
#define GLX_HEIGHT 0x801E
#define GLX_LARGEST_PBUFFER 0x801C
#define GLX_LEVEL 3
#define GLX_MAX_PBUFFER_HEIGHT 0x8017
#define GLX_MAX_PBUFFER_PIXELS 0x8018
#define GLX_MAX_PBUFFER_WIDTH 0x8016
#define GLX_NONE 0x8000
#define GLX_NON_CONFORMANT_CONFIG 0x800D
#define GLX_NO_EXTENSION 3
#define GLX_PBUFFER 0x8023
#define GLX_PBUFFER_BIT 0x00000004
#define GLX_PBUFFER_CLOBBER_MASK 0x08000000
#define GLX_PBUFFER_HEIGHT 0x8040
#define GLX_PBUFFER_WIDTH 0x8041
#define GLX_PIXMAP_BIT 0x00000002
#define GLX_PRESERVED_CONTENTS 0x801B
#define GLX_PSEUDO_COLOR 0x8004
#define GLX_PbufferClobber 0
#define GLX_RED_SIZE 8
#define GLX_RENDER_TYPE 0x8011
#define GLX_RGBA 4
#define GLX_RGBA_BIT 0x00000001
#define GLX_RGBA_TYPE 0x8014
#define GLX_SAMPLES 100001
#define GLX_SAMPLE_BUFFERS 100000
#define GLX_SAVED 0x8021
#define GLX_SCREEN 0x800C
#define GLX_SLOW_CONFIG 0x8001
#define GLX_STATIC_COLOR 0x8005
#define GLX_STATIC_GRAY 0x8007
#define GLX_STENCIL_BUFFER_BIT 0x00000040
#define GLX_STENCIL_SIZE 13
#define GLX_STEREO 6
#define GLX_TRANSPARENT_ALPHA_VALUE 0x28
#define GLX_TRANSPARENT_BLUE_VALUE 0x27
#define GLX_TRANSPARENT_GREEN_VALUE 0x26
#define GLX_TRANSPARENT_INDEX 0x8009
#define GLX_TRANSPARENT_INDEX_VALUE 0x24
#define GLX_TRANSPARENT_RED_VALUE 0x25
#define GLX_TRANSPARENT_RGB 0x8008
#define GLX_TRANSPARENT_TYPE 0x23
#define GLX_TRUE_COLOR 0x8002
#define GLX_USE_GL 1
#define GLX_VENDOR 0x1
#define GLX_VERSION 0x2
#define GLX_VISUAL_ID 0x800B
#define GLX_WIDTH 0x801D
#define GLX_WINDOW 0x8022
#define GLX_WINDOW_BIT 0x00000001
#define GLX_X_RENDERABLE 0x8012
#define GLX_X_VISUAL_TYPE 0x22
#define __GLX_NUMBER_EVENTS 17


#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GLX_OML_sync_control extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif

















#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)

#else

#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)

#else

#endif







typedef XID GLXFBConfigID;
typedef struct __GLXFBConfigRec *GLXFBConfig;
typedef XID GLXContextID;
typedef struct __GLXcontextRec *GLXContext;
typedef XID GLXPixmap;
typedef XID GLXDrawable;
typedef XID GLXWindow;
typedef XID GLXPbuffer;
typedef void (GLAD_API_PTR *__GLXextFuncPtr)(void);
typedef XID GLXVideoCaptureDeviceNV;
typedef unsigned int GLXVideoDeviceNV;
typedef XID GLXVideoSourceSGIX;
typedef XID GLXFBConfigIDSGIX;
typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;
typedef XID GLXPbufferSGIX;
typedef struct {
    int event_type;             /* GLX_DAMAGED or GLX_SAVED */
    int draw_type;              /* GLX_WINDOW or GLX_PBUFFER */
    unsigned long serial;       /* # of last request processed by server */
    Bool send_event;            /* true if this came for SendEvent request */
    Display *display;           /* display the event was read from */
    GLXDrawable drawable;       /* XID of Drawable */
    unsigned int buffer_mask;   /* mask indicating which buffers are affected */
    unsigned int aux_buffer;    /* which aux buffer was affected */
    int x, y;
    int width, height;
    int count;                  /* if nonzero, at least this many more */
} GLXPbufferClobberEvent;
typedef struct {
    int type;
    unsigned long serial;       /* # of last request processed by server */
    Bool send_event;            /* true if this came from a SendEvent request */
    Display *display;           /* Display the event was read from */
    GLXDrawable drawable;       /* drawable on which event was requested in event mask */
    int event_type;
    int64_t ust;
    int64_t msc;
    int64_t sbc;
} GLXBufferSwapComplete;
typedef union __GLXEvent {
    GLXPbufferClobberEvent glxpbufferclobber;
    GLXBufferSwapComplete glxbufferswapcomplete;
    long pad[24];
} GLXEvent;
typedef struct {
    int type;
    unsigned long serial;
    Bool send_event;
    Display *display;
    int extension;
    int evtype;
    GLXDrawable window;
    Bool stereo_tree;
} GLXStereoNotifyEventEXT;
typedef struct {
    int type;
    unsigned long serial;   /* # of last request processed by server */
    Bool send_event;        /* true if this came for SendEvent request */
    Display *display;       /* display the event was read from */
    GLXDrawable drawable;   /* i.d. of Drawable */
    int event_type;         /* GLX_DAMAGED_SGIX or GLX_SAVED_SGIX */
    int draw_type;          /* GLX_WINDOW_SGIX or GLX_PBUFFER_SGIX */
    unsigned int mask;      /* mask indicating which buffers are affected*/
    int x, y;
    int width, height;
    int count;              /* if nonzero, at least this many more */
} GLXBufferClobberEventSGIX;
typedef struct {
    char    pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int     networkId;
} GLXHyperpipeNetworkSGIX;
typedef struct {
    char    pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int     channel;
    unsigned int participationType;
    int     timeSlice;
} GLXHyperpipeConfigSGIX;
typedef struct {
    char pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int srcXOrigin, srcYOrigin, srcWidth, srcHeight;
    int destXOrigin, destYOrigin, destWidth, destHeight;
} GLXPipeRect;
typedef struct {
    char pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int XOrigin, YOrigin, maxHeight, maxWidth;
} GLXPipeRectLimits;


#define GLX_VERSION_1_0 1
GLAD_API_CALL int GLAD_GLX_VERSION_1_0;
#define GLX_VERSION_1_1 1
GLAD_API_CALL int GLAD_GLX_VERSION_1_1;
#define GLX_VERSION_1_2 1
GLAD_API_CALL int GLAD_GLX_VERSION_1_2;
#define GLX_VERSION_1_3 1
GLAD_API_CALL int GLAD_GLX_VERSION_1_3;
#define GLX_VERSION_1_4 1
GLAD_API_CALL int GLAD_GLX_VERSION_1_4;
#define GLX_ARB_create_context 1
GLAD_API_CALL int GLAD_GLX_ARB_create_context;
#define GLX_ARB_framebuffer_sRGB 1
GLAD_API_CALL int GLAD_GLX_ARB_framebuffer_sRGB;
#define GLX_EXT_framebuffer_sRGB 1
GLAD_API_CALL int GLAD_GLX_EXT_framebuffer_sRGB;


typedef GLXFBConfig * (GLAD_API_PTR *PFNGLXCHOOSEFBCONFIGPROC)(Display * dpy, int screen, const int * attrib_list, int * nelements);
typedef XVisualInfo * (GLAD_API_PTR *PFNGLXCHOOSEVISUALPROC)(Display * dpy, int screen, int * attribList);
typedef void (GLAD_API_PTR *PFNGLXCOPYCONTEXTPROC)(Display * dpy, GLXContext src, GLXContext dst, unsigned long mask);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATECONTEXTPROC)(Display * dpy, XVisualInfo * vis, GLXContext shareList, Bool direct);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATECONTEXTATTRIBSARBPROC)(Display * dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int * attrib_list);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEGLXPIXMAPPROC)(Display * dpy, XVisualInfo * visual, Pixmap pixmap);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATENEWCONTEXTPROC)(Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
typedef GLXPbuffer (GLAD_API_PTR *PFNGLXCREATEPBUFFERPROC)(Display * dpy, GLXFBConfig config, const int * attrib_list);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEPIXMAPPROC)(Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list);
typedef GLXWindow (GLAD_API_PTR *PFNGLXCREATEWINDOWPROC)(Display * dpy, GLXFBConfig config, Window win, const int * attrib_list);
typedef void (GLAD_API_PTR *PFNGLXDESTROYCONTEXTPROC)(Display * dpy, GLXContext ctx);
typedef void (GLAD_API_PTR *PFNGLXDESTROYGLXPIXMAPPROC)(Display * dpy, GLXPixmap pixmap);
typedef void (GLAD_API_PTR *PFNGLXDESTROYPBUFFERPROC)(Display * dpy, GLXPbuffer pbuf);
typedef void (GLAD_API_PTR *PFNGLXDESTROYPIXMAPPROC)(Display * dpy, GLXPixmap pixmap);
typedef void (GLAD_API_PTR *PFNGLXDESTROYWINDOWPROC)(Display * dpy, GLXWindow win);
typedef const char * (GLAD_API_PTR *PFNGLXGETCLIENTSTRINGPROC)(Display * dpy, int name);
typedef int (GLAD_API_PTR *PFNGLXGETCONFIGPROC)(Display * dpy, XVisualInfo * visual, int attrib, int * value);
typedef GLXContext (GLAD_API_PTR *PFNGLXGETCURRENTCONTEXTPROC)(void);
typedef Display * (GLAD_API_PTR *PFNGLXGETCURRENTDISPLAYPROC)(void);
typedef GLXDrawable (GLAD_API_PTR *PFNGLXGETCURRENTDRAWABLEPROC)(void);
typedef GLXDrawable (GLAD_API_PTR *PFNGLXGETCURRENTREADDRAWABLEPROC)(void);
typedef int (GLAD_API_PTR *PFNGLXGETFBCONFIGATTRIBPROC)(Display * dpy, GLXFBConfig config, int attribute, int * value);
typedef GLXFBConfig * (GLAD_API_PTR *PFNGLXGETFBCONFIGSPROC)(Display * dpy, int screen, int * nelements);
typedef __GLXextFuncPtr (GLAD_API_PTR *PFNGLXGETPROCADDRESSPROC)(const GLubyte * procName);
typedef void (GLAD_API_PTR *PFNGLXGETSELECTEDEVENTPROC)(Display * dpy, GLXDrawable draw, unsigned long * event_mask);
typedef XVisualInfo * (GLAD_API_PTR *PFNGLXGETVISUALFROMFBCONFIGPROC)(Display * dpy, GLXFBConfig config);
typedef Bool (GLAD_API_PTR *PFNGLXISDIRECTPROC)(Display * dpy, GLXContext ctx);
typedef Bool (GLAD_API_PTR *PFNGLXMAKECONTEXTCURRENTPROC)(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef Bool (GLAD_API_PTR *PFNGLXMAKECURRENTPROC)(Display * dpy, GLXDrawable drawable, GLXContext ctx);
typedef int (GLAD_API_PTR *PFNGLXQUERYCONTEXTPROC)(Display * dpy, GLXContext ctx, int attribute, int * value);
typedef void (GLAD_API_PTR *PFNGLXQUERYDRAWABLEPROC)(Display * dpy, GLXDrawable draw, int attribute, unsigned int * value);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYEXTENSIONPROC)(Display * dpy, int * errorb, int * event);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYEXTENSIONSSTRINGPROC)(Display * dpy, int screen);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYSERVERSTRINGPROC)(Display * dpy, int screen, int name);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYVERSIONPROC)(Display * dpy, int * maj, int * min);
typedef void (GLAD_API_PTR *PFNGLXSELECTEVENTPROC)(Display * dpy, GLXDrawable draw, unsigned long event_mask);
typedef void (GLAD_API_PTR *PFNGLXSWAPBUFFERSPROC)(Display * dpy, GLXDrawable drawable);
typedef void (GLAD_API_PTR *PFNGLXUSEXFONTPROC)(Font font, int first, int count, int list);
typedef void (GLAD_API_PTR *PFNGLXWAITGLPROC)(void);
typedef void (GLAD_API_PTR *PFNGLXWAITXPROC)(void);

GLAD_API_CALL PFNGLXCHOOSEFBCONFIGPROC glad_glXChooseFBConfig;
GLAD_API_CALL PFNGLXCHOOSEFBCONFIGPROC glad_debug_glXChooseFBConfig;
#define glXChooseFBConfig glad_debug_glXChooseFBConfig
GLAD_API_CALL PFNGLXCHOOSEVISUALPROC glad_glXChooseVisual;
GLAD_API_CALL PFNGLXCHOOSEVISUALPROC glad_debug_glXChooseVisual;
#define glXChooseVisual glad_debug_glXChooseVisual
GLAD_API_CALL PFNGLXCOPYCONTEXTPROC glad_glXCopyContext;
GLAD_API_CALL PFNGLXCOPYCONTEXTPROC glad_debug_glXCopyContext;
#define glXCopyContext glad_debug_glXCopyContext
GLAD_API_CALL PFNGLXCREATECONTEXTPROC glad_glXCreateContext;
GLAD_API_CALL PFNGLXCREATECONTEXTPROC glad_debug_glXCreateContext;
#define glXCreateContext glad_debug_glXCreateContext
GLAD_API_CALL PFNGLXCREATECONTEXTATTRIBSARBPROC glad_glXCreateContextAttribsARB;
GLAD_API_CALL PFNGLXCREATECONTEXTATTRIBSARBPROC glad_debug_glXCreateContextAttribsARB;
#define glXCreateContextAttribsARB glad_debug_glXCreateContextAttribsARB
GLAD_API_CALL PFNGLXCREATEGLXPIXMAPPROC glad_glXCreateGLXPixmap;
GLAD_API_CALL PFNGLXCREATEGLXPIXMAPPROC glad_debug_glXCreateGLXPixmap;
#define glXCreateGLXPixmap glad_debug_glXCreateGLXPixmap
GLAD_API_CALL PFNGLXCREATENEWCONTEXTPROC glad_glXCreateNewContext;
GLAD_API_CALL PFNGLXCREATENEWCONTEXTPROC glad_debug_glXCreateNewContext;
#define glXCreateNewContext glad_debug_glXCreateNewContext
GLAD_API_CALL PFNGLXCREATEPBUFFERPROC glad_glXCreatePbuffer;
GLAD_API_CALL PFNGLXCREATEPBUFFERPROC glad_debug_glXCreatePbuffer;
#define glXCreatePbuffer glad_debug_glXCreatePbuffer
GLAD_API_CALL PFNGLXCREATEPIXMAPPROC glad_glXCreatePixmap;
GLAD_API_CALL PFNGLXCREATEPIXMAPPROC glad_debug_glXCreatePixmap;
#define glXCreatePixmap glad_debug_glXCreatePixmap
GLAD_API_CALL PFNGLXCREATEWINDOWPROC glad_glXCreateWindow;
GLAD_API_CALL PFNGLXCREATEWINDOWPROC glad_debug_glXCreateWindow;
#define glXCreateWindow glad_debug_glXCreateWindow
GLAD_API_CALL PFNGLXDESTROYCONTEXTPROC glad_glXDestroyContext;
GLAD_API_CALL PFNGLXDESTROYCONTEXTPROC glad_debug_glXDestroyContext;
#define glXDestroyContext glad_debug_glXDestroyContext
GLAD_API_CALL PFNGLXDESTROYGLXPIXMAPPROC glad_glXDestroyGLXPixmap;
GLAD_API_CALL PFNGLXDESTROYGLXPIXMAPPROC glad_debug_glXDestroyGLXPixmap;
#define glXDestroyGLXPixmap glad_debug_glXDestroyGLXPixmap
GLAD_API_CALL PFNGLXDESTROYPBUFFERPROC glad_glXDestroyPbuffer;
GLAD_API_CALL PFNGLXDESTROYPBUFFERPROC glad_debug_glXDestroyPbuffer;
#define glXDestroyPbuffer glad_debug_glXDestroyPbuffer
GLAD_API_CALL PFNGLXDESTROYPIXMAPPROC glad_glXDestroyPixmap;
GLAD_API_CALL PFNGLXDESTROYPIXMAPPROC glad_debug_glXDestroyPixmap;
#define glXDestroyPixmap glad_debug_glXDestroyPixmap
GLAD_API_CALL PFNGLXDESTROYWINDOWPROC glad_glXDestroyWindow;
GLAD_API_CALL PFNGLXDESTROYWINDOWPROC glad_debug_glXDestroyWindow;
#define glXDestroyWindow glad_debug_glXDestroyWindow
GLAD_API_CALL PFNGLXGETCLIENTSTRINGPROC glad_glXGetClientString;
GLAD_API_CALL PFNGLXGETCLIENTSTRINGPROC glad_debug_glXGetClientString;
#define glXGetClientString glad_debug_glXGetClientString
GLAD_API_CALL PFNGLXGETCONFIGPROC glad_glXGetConfig;
GLAD_API_CALL PFNGLXGETCONFIGPROC glad_debug_glXGetConfig;
#define glXGetConfig glad_debug_glXGetConfig
GLAD_API_CALL PFNGLXGETCURRENTCONTEXTPROC glad_glXGetCurrentContext;
GLAD_API_CALL PFNGLXGETCURRENTCONTEXTPROC glad_debug_glXGetCurrentContext;
#define glXGetCurrentContext glad_debug_glXGetCurrentContext
GLAD_API_CALL PFNGLXGETCURRENTDISPLAYPROC glad_glXGetCurrentDisplay;
GLAD_API_CALL PFNGLXGETCURRENTDISPLAYPROC glad_debug_glXGetCurrentDisplay;
#define glXGetCurrentDisplay glad_debug_glXGetCurrentDisplay
GLAD_API_CALL PFNGLXGETCURRENTDRAWABLEPROC glad_glXGetCurrentDrawable;
GLAD_API_CALL PFNGLXGETCURRENTDRAWABLEPROC glad_debug_glXGetCurrentDrawable;
#define glXGetCurrentDrawable glad_debug_glXGetCurrentDrawable
GLAD_API_CALL PFNGLXGETCURRENTREADDRAWABLEPROC glad_glXGetCurrentReadDrawable;
GLAD_API_CALL PFNGLXGETCURRENTREADDRAWABLEPROC glad_debug_glXGetCurrentReadDrawable;
#define glXGetCurrentReadDrawable glad_debug_glXGetCurrentReadDrawable
GLAD_API_CALL PFNGLXGETFBCONFIGATTRIBPROC glad_glXGetFBConfigAttrib;
GLAD_API_CALL PFNGLXGETFBCONFIGATTRIBPROC glad_debug_glXGetFBConfigAttrib;
#define glXGetFBConfigAttrib glad_debug_glXGetFBConfigAttrib
GLAD_API_CALL PFNGLXGETFBCONFIGSPROC glad_glXGetFBConfigs;
GLAD_API_CALL PFNGLXGETFBCONFIGSPROC glad_debug_glXGetFBConfigs;
#define glXGetFBConfigs glad_debug_glXGetFBConfigs
GLAD_API_CALL PFNGLXGETPROCADDRESSPROC glad_glXGetProcAddress;
GLAD_API_CALL PFNGLXGETPROCADDRESSPROC glad_debug_glXGetProcAddress;
#define glXGetProcAddress glad_debug_glXGetProcAddress
GLAD_API_CALL PFNGLXGETSELECTEDEVENTPROC glad_glXGetSelectedEvent;
GLAD_API_CALL PFNGLXGETSELECTEDEVENTPROC glad_debug_glXGetSelectedEvent;
#define glXGetSelectedEvent glad_debug_glXGetSelectedEvent
GLAD_API_CALL PFNGLXGETVISUALFROMFBCONFIGPROC glad_glXGetVisualFromFBConfig;
GLAD_API_CALL PFNGLXGETVISUALFROMFBCONFIGPROC glad_debug_glXGetVisualFromFBConfig;
#define glXGetVisualFromFBConfig glad_debug_glXGetVisualFromFBConfig
GLAD_API_CALL PFNGLXISDIRECTPROC glad_glXIsDirect;
GLAD_API_CALL PFNGLXISDIRECTPROC glad_debug_glXIsDirect;
#define glXIsDirect glad_debug_glXIsDirect
GLAD_API_CALL PFNGLXMAKECONTEXTCURRENTPROC glad_glXMakeContextCurrent;
GLAD_API_CALL PFNGLXMAKECONTEXTCURRENTPROC glad_debug_glXMakeContextCurrent;
#define glXMakeContextCurrent glad_debug_glXMakeContextCurrent
GLAD_API_CALL PFNGLXMAKECURRENTPROC glad_glXMakeCurrent;
GLAD_API_CALL PFNGLXMAKECURRENTPROC glad_debug_glXMakeCurrent;
#define glXMakeCurrent glad_debug_glXMakeCurrent
GLAD_API_CALL PFNGLXQUERYCONTEXTPROC glad_glXQueryContext;
GLAD_API_CALL PFNGLXQUERYCONTEXTPROC glad_debug_glXQueryContext;
#define glXQueryContext glad_debug_glXQueryContext
GLAD_API_CALL PFNGLXQUERYDRAWABLEPROC glad_glXQueryDrawable;
GLAD_API_CALL PFNGLXQUERYDRAWABLEPROC glad_debug_glXQueryDrawable;
#define glXQueryDrawable glad_debug_glXQueryDrawable
GLAD_API_CALL PFNGLXQUERYEXTENSIONPROC glad_glXQueryExtension;
GLAD_API_CALL PFNGLXQUERYEXTENSIONPROC glad_debug_glXQueryExtension;
#define glXQueryExtension glad_debug_glXQueryExtension
GLAD_API_CALL PFNGLXQUERYEXTENSIONSSTRINGPROC glad_glXQueryExtensionsString;
GLAD_API_CALL PFNGLXQUERYEXTENSIONSSTRINGPROC glad_debug_glXQueryExtensionsString;
#define glXQueryExtensionsString glad_debug_glXQueryExtensionsString
GLAD_API_CALL PFNGLXQUERYSERVERSTRINGPROC glad_glXQueryServerString;
GLAD_API_CALL PFNGLXQUERYSERVERSTRINGPROC glad_debug_glXQueryServerString;
#define glXQueryServerString glad_debug_glXQueryServerString
GLAD_API_CALL PFNGLXQUERYVERSIONPROC glad_glXQueryVersion;
GLAD_API_CALL PFNGLXQUERYVERSIONPROC glad_debug_glXQueryVersion;
#define glXQueryVersion glad_debug_glXQueryVersion
GLAD_API_CALL PFNGLXSELECTEVENTPROC glad_glXSelectEvent;
GLAD_API_CALL PFNGLXSELECTEVENTPROC glad_debug_glXSelectEvent;
#define glXSelectEvent glad_debug_glXSelectEvent
GLAD_API_CALL PFNGLXSWAPBUFFERSPROC glad_glXSwapBuffers;
GLAD_API_CALL PFNGLXSWAPBUFFERSPROC glad_debug_glXSwapBuffers;
#define glXSwapBuffers glad_debug_glXSwapBuffers
GLAD_API_CALL PFNGLXUSEXFONTPROC glad_glXUseXFont;
GLAD_API_CALL PFNGLXUSEXFONTPROC glad_debug_glXUseXFont;
#define glXUseXFont glad_debug_glXUseXFont
GLAD_API_CALL PFNGLXWAITGLPROC glad_glXWaitGL;
GLAD_API_CALL PFNGLXWAITGLPROC glad_debug_glXWaitGL;
#define glXWaitGL glad_debug_glXWaitGL
GLAD_API_CALL PFNGLXWAITXPROC glad_glXWaitX;
GLAD_API_CALL PFNGLXWAITXPROC glad_debug_glXWaitX;
#define glXWaitX glad_debug_glXWaitX




GLAD_API_CALL void gladSetGLXPreCallback(GLADprecallback cb);
GLAD_API_CALL void gladSetGLXPostCallback(GLADpostcallback cb);

GLAD_API_CALL void gladInstallGLXDebug(void);
GLAD_API_CALL void gladUninstallGLXDebug(void);

GLAD_API_CALL int gladLoadGLXUserPtr(Display *display, int screen, GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadGLX(Display *display, int screen, GLADloadfunc load);

#ifdef GLAD_GLX

GLAD_API_CALL int gladLoaderLoadGLX(Display *display, int screen);

GLAD_API_CALL void gladLoaderUnloadGLX(void);

#endif
#ifdef __cplusplus
}
#endif
#endif

/* Source */
#ifdef GLAD_GLX_IMPLEMENTATION
/**
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef GLAD_IMPL_UTIL_C_
#define GLAD_IMPL_UTIL_C_

#ifdef _MSC_VER
#define GLAD_IMPL_UTIL_SSCANF sscanf_s
#else
#define GLAD_IMPL_UTIL_SSCANF sscanf
#endif

#endif /* GLAD_IMPL_UTIL_C_ */

#ifdef __cplusplus
extern "C" {
#endif



int GLAD_GLX_VERSION_1_0 = 0;
int GLAD_GLX_VERSION_1_1 = 0;
int GLAD_GLX_VERSION_1_2 = 0;
int GLAD_GLX_VERSION_1_3 = 0;
int GLAD_GLX_VERSION_1_4 = 0;
int GLAD_GLX_ARB_create_context = 0;
int GLAD_GLX_ARB_framebuffer_sRGB = 0;
int GLAD_GLX_EXT_framebuffer_sRGB = 0;


static void _pre_call_glx_callback_default(const char *name, GLADapiproc apiproc, int len_args, ...) {
    GLAD_UNUSED(name);
    GLAD_UNUSED(apiproc);
    GLAD_UNUSED(len_args);
}
static void _post_call_glx_callback_default(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...) {
    GLAD_UNUSED(ret);
    GLAD_UNUSED(name);
    GLAD_UNUSED(apiproc);
    GLAD_UNUSED(len_args);
}

static GLADprecallback _pre_call_glx_callback = _pre_call_glx_callback_default;
void gladSetGLXPreCallback(GLADprecallback cb) {
    _pre_call_glx_callback = cb;
}
static GLADpostcallback _post_call_glx_callback = _post_call_glx_callback_default;
void gladSetGLXPostCallback(GLADpostcallback cb) {
    _post_call_glx_callback = cb;
}

PFNGLXCHOOSEFBCONFIGPROC glad_glXChooseFBConfig = NULL;
static GLXFBConfig * GLAD_API_PTR glad_debug_impl_glXChooseFBConfig(Display * dpy, int screen, const int * attrib_list, int * nelements) {
    GLXFBConfig * ret;
    _pre_call_glx_callback("glXChooseFBConfig", (GLADapiproc) glad_glXChooseFBConfig, 4, dpy, screen, attrib_list, nelements);
    ret = glad_glXChooseFBConfig(dpy, screen, attrib_list, nelements);
    _post_call_glx_callback((void*) &ret, "glXChooseFBConfig", (GLADapiproc) glad_glXChooseFBConfig, 4, dpy, screen, attrib_list, nelements);
    return ret;
}
PFNGLXCHOOSEFBCONFIGPROC glad_debug_glXChooseFBConfig = glad_debug_impl_glXChooseFBConfig;
PFNGLXCHOOSEVISUALPROC glad_glXChooseVisual = NULL;
static XVisualInfo * GLAD_API_PTR glad_debug_impl_glXChooseVisual(Display * dpy, int screen, int * attribList) {
    XVisualInfo * ret;
    _pre_call_glx_callback("glXChooseVisual", (GLADapiproc) glad_glXChooseVisual, 3, dpy, screen, attribList);
    ret = glad_glXChooseVisual(dpy, screen, attribList);
    _post_call_glx_callback((void*) &ret, "glXChooseVisual", (GLADapiproc) glad_glXChooseVisual, 3, dpy, screen, attribList);
    return ret;
}
PFNGLXCHOOSEVISUALPROC glad_debug_glXChooseVisual = glad_debug_impl_glXChooseVisual;
PFNGLXCOPYCONTEXTPROC glad_glXCopyContext = NULL;
static void GLAD_API_PTR glad_debug_impl_glXCopyContext(Display * dpy, GLXContext src, GLXContext dst, unsigned long mask) {
    _pre_call_glx_callback("glXCopyContext", (GLADapiproc) glad_glXCopyContext, 4, dpy, src, dst, mask);
    glad_glXCopyContext(dpy, src, dst, mask);
    _post_call_glx_callback(NULL, "glXCopyContext", (GLADapiproc) glad_glXCopyContext, 4, dpy, src, dst, mask);
    
}
PFNGLXCOPYCONTEXTPROC glad_debug_glXCopyContext = glad_debug_impl_glXCopyContext;
PFNGLXCREATECONTEXTPROC glad_glXCreateContext = NULL;
static GLXContext GLAD_API_PTR glad_debug_impl_glXCreateContext(Display * dpy, XVisualInfo * vis, GLXContext shareList, Bool direct) {
    GLXContext ret;
    _pre_call_glx_callback("glXCreateContext", (GLADapiproc) glad_glXCreateContext, 4, dpy, vis, shareList, direct);
    ret = glad_glXCreateContext(dpy, vis, shareList, direct);
    _post_call_glx_callback((void*) &ret, "glXCreateContext", (GLADapiproc) glad_glXCreateContext, 4, dpy, vis, shareList, direct);
    return ret;
}
PFNGLXCREATECONTEXTPROC glad_debug_glXCreateContext = glad_debug_impl_glXCreateContext;
PFNGLXCREATECONTEXTATTRIBSARBPROC glad_glXCreateContextAttribsARB = NULL;
static GLXContext GLAD_API_PTR glad_debug_impl_glXCreateContextAttribsARB(Display * dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int * attrib_list) {
    GLXContext ret;
    _pre_call_glx_callback("glXCreateContextAttribsARB", (GLADapiproc) glad_glXCreateContextAttribsARB, 5, dpy, config, share_context, direct, attrib_list);
    ret = glad_glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list);
    _post_call_glx_callback((void*) &ret, "glXCreateContextAttribsARB", (GLADapiproc) glad_glXCreateContextAttribsARB, 5, dpy, config, share_context, direct, attrib_list);
    return ret;
}
PFNGLXCREATECONTEXTATTRIBSARBPROC glad_debug_glXCreateContextAttribsARB = glad_debug_impl_glXCreateContextAttribsARB;
PFNGLXCREATEGLXPIXMAPPROC glad_glXCreateGLXPixmap = NULL;
static GLXPixmap GLAD_API_PTR glad_debug_impl_glXCreateGLXPixmap(Display * dpy, XVisualInfo * visual, Pixmap pixmap) {
    GLXPixmap ret;
    _pre_call_glx_callback("glXCreateGLXPixmap", (GLADapiproc) glad_glXCreateGLXPixmap, 3, dpy, visual, pixmap);
    ret = glad_glXCreateGLXPixmap(dpy, visual, pixmap);
    _post_call_glx_callback((void*) &ret, "glXCreateGLXPixmap", (GLADapiproc) glad_glXCreateGLXPixmap, 3, dpy, visual, pixmap);
    return ret;
}
PFNGLXCREATEGLXPIXMAPPROC glad_debug_glXCreateGLXPixmap = glad_debug_impl_glXCreateGLXPixmap;
PFNGLXCREATENEWCONTEXTPROC glad_glXCreateNewContext = NULL;
static GLXContext GLAD_API_PTR glad_debug_impl_glXCreateNewContext(Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct) {
    GLXContext ret;
    _pre_call_glx_callback("glXCreateNewContext", (GLADapiproc) glad_glXCreateNewContext, 5, dpy, config, render_type, share_list, direct);
    ret = glad_glXCreateNewContext(dpy, config, render_type, share_list, direct);
    _post_call_glx_callback((void*) &ret, "glXCreateNewContext", (GLADapiproc) glad_glXCreateNewContext, 5, dpy, config, render_type, share_list, direct);
    return ret;
}
PFNGLXCREATENEWCONTEXTPROC glad_debug_glXCreateNewContext = glad_debug_impl_glXCreateNewContext;
PFNGLXCREATEPBUFFERPROC glad_glXCreatePbuffer = NULL;
static GLXPbuffer GLAD_API_PTR glad_debug_impl_glXCreatePbuffer(Display * dpy, GLXFBConfig config, const int * attrib_list) {
    GLXPbuffer ret;
    _pre_call_glx_callback("glXCreatePbuffer", (GLADapiproc) glad_glXCreatePbuffer, 3, dpy, config, attrib_list);
    ret = glad_glXCreatePbuffer(dpy, config, attrib_list);
    _post_call_glx_callback((void*) &ret, "glXCreatePbuffer", (GLADapiproc) glad_glXCreatePbuffer, 3, dpy, config, attrib_list);
    return ret;
}
PFNGLXCREATEPBUFFERPROC glad_debug_glXCreatePbuffer = glad_debug_impl_glXCreatePbuffer;
PFNGLXCREATEPIXMAPPROC glad_glXCreatePixmap = NULL;
static GLXPixmap GLAD_API_PTR glad_debug_impl_glXCreatePixmap(Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list) {
    GLXPixmap ret;
    _pre_call_glx_callback("glXCreatePixmap", (GLADapiproc) glad_glXCreatePixmap, 4, dpy, config, pixmap, attrib_list);
    ret = glad_glXCreatePixmap(dpy, config, pixmap, attrib_list);
    _post_call_glx_callback((void*) &ret, "glXCreatePixmap", (GLADapiproc) glad_glXCreatePixmap, 4, dpy, config, pixmap, attrib_list);
    return ret;
}
PFNGLXCREATEPIXMAPPROC glad_debug_glXCreatePixmap = glad_debug_impl_glXCreatePixmap;
PFNGLXCREATEWINDOWPROC glad_glXCreateWindow = NULL;
static GLXWindow GLAD_API_PTR glad_debug_impl_glXCreateWindow(Display * dpy, GLXFBConfig config, Window win, const int * attrib_list) {
    GLXWindow ret;
    _pre_call_glx_callback("glXCreateWindow", (GLADapiproc) glad_glXCreateWindow, 4, dpy, config, win, attrib_list);
    ret = glad_glXCreateWindow(dpy, config, win, attrib_list);
    _post_call_glx_callback((void*) &ret, "glXCreateWindow", (GLADapiproc) glad_glXCreateWindow, 4, dpy, config, win, attrib_list);
    return ret;
}
PFNGLXCREATEWINDOWPROC glad_debug_glXCreateWindow = glad_debug_impl_glXCreateWindow;
PFNGLXDESTROYCONTEXTPROC glad_glXDestroyContext = NULL;
static void GLAD_API_PTR glad_debug_impl_glXDestroyContext(Display * dpy, GLXContext ctx) {
    _pre_call_glx_callback("glXDestroyContext", (GLADapiproc) glad_glXDestroyContext, 2, dpy, ctx);
    glad_glXDestroyContext(dpy, ctx);
    _post_call_glx_callback(NULL, "glXDestroyContext", (GLADapiproc) glad_glXDestroyContext, 2, dpy, ctx);
    
}
PFNGLXDESTROYCONTEXTPROC glad_debug_glXDestroyContext = glad_debug_impl_glXDestroyContext;
PFNGLXDESTROYGLXPIXMAPPROC glad_glXDestroyGLXPixmap = NULL;
static void GLAD_API_PTR glad_debug_impl_glXDestroyGLXPixmap(Display * dpy, GLXPixmap pixmap) {
    _pre_call_glx_callback("glXDestroyGLXPixmap", (GLADapiproc) glad_glXDestroyGLXPixmap, 2, dpy, pixmap);
    glad_glXDestroyGLXPixmap(dpy, pixmap);
    _post_call_glx_callback(NULL, "glXDestroyGLXPixmap", (GLADapiproc) glad_glXDestroyGLXPixmap, 2, dpy, pixmap);
    
}
PFNGLXDESTROYGLXPIXMAPPROC glad_debug_glXDestroyGLXPixmap = glad_debug_impl_glXDestroyGLXPixmap;
PFNGLXDESTROYPBUFFERPROC glad_glXDestroyPbuffer = NULL;
static void GLAD_API_PTR glad_debug_impl_glXDestroyPbuffer(Display * dpy, GLXPbuffer pbuf) {
    _pre_call_glx_callback("glXDestroyPbuffer", (GLADapiproc) glad_glXDestroyPbuffer, 2, dpy, pbuf);
    glad_glXDestroyPbuffer(dpy, pbuf);
    _post_call_glx_callback(NULL, "glXDestroyPbuffer", (GLADapiproc) glad_glXDestroyPbuffer, 2, dpy, pbuf);
    
}
PFNGLXDESTROYPBUFFERPROC glad_debug_glXDestroyPbuffer = glad_debug_impl_glXDestroyPbuffer;
PFNGLXDESTROYPIXMAPPROC glad_glXDestroyPixmap = NULL;
static void GLAD_API_PTR glad_debug_impl_glXDestroyPixmap(Display * dpy, GLXPixmap pixmap) {
    _pre_call_glx_callback("glXDestroyPixmap", (GLADapiproc) glad_glXDestroyPixmap, 2, dpy, pixmap);
    glad_glXDestroyPixmap(dpy, pixmap);
    _post_call_glx_callback(NULL, "glXDestroyPixmap", (GLADapiproc) glad_glXDestroyPixmap, 2, dpy, pixmap);
    
}
PFNGLXDESTROYPIXMAPPROC glad_debug_glXDestroyPixmap = glad_debug_impl_glXDestroyPixmap;
PFNGLXDESTROYWINDOWPROC glad_glXDestroyWindow = NULL;
static void GLAD_API_PTR glad_debug_impl_glXDestroyWindow(Display * dpy, GLXWindow win) {
    _pre_call_glx_callback("glXDestroyWindow", (GLADapiproc) glad_glXDestroyWindow, 2, dpy, win);
    glad_glXDestroyWindow(dpy, win);
    _post_call_glx_callback(NULL, "glXDestroyWindow", (GLADapiproc) glad_glXDestroyWindow, 2, dpy, win);
    
}
PFNGLXDESTROYWINDOWPROC glad_debug_glXDestroyWindow = glad_debug_impl_glXDestroyWindow;
PFNGLXGETCLIENTSTRINGPROC glad_glXGetClientString = NULL;
static const char * GLAD_API_PTR glad_debug_impl_glXGetClientString(Display * dpy, int name) {
    const char * ret;
    _pre_call_glx_callback("glXGetClientString", (GLADapiproc) glad_glXGetClientString, 2, dpy, name);
    ret = glad_glXGetClientString(dpy, name);
    _post_call_glx_callback((void*) &ret, "glXGetClientString", (GLADapiproc) glad_glXGetClientString, 2, dpy, name);
    return ret;
}
PFNGLXGETCLIENTSTRINGPROC glad_debug_glXGetClientString = glad_debug_impl_glXGetClientString;
PFNGLXGETCONFIGPROC glad_glXGetConfig = NULL;
static int GLAD_API_PTR glad_debug_impl_glXGetConfig(Display * dpy, XVisualInfo * visual, int attrib, int * value) {
    int ret;
    _pre_call_glx_callback("glXGetConfig", (GLADapiproc) glad_glXGetConfig, 4, dpy, visual, attrib, value);
    ret = glad_glXGetConfig(dpy, visual, attrib, value);
    _post_call_glx_callback((void*) &ret, "glXGetConfig", (GLADapiproc) glad_glXGetConfig, 4, dpy, visual, attrib, value);
    return ret;
}
PFNGLXGETCONFIGPROC glad_debug_glXGetConfig = glad_debug_impl_glXGetConfig;
PFNGLXGETCURRENTCONTEXTPROC glad_glXGetCurrentContext = NULL;
static GLXContext GLAD_API_PTR glad_debug_impl_glXGetCurrentContext(void) {
    GLXContext ret;
    _pre_call_glx_callback("glXGetCurrentContext", (GLADapiproc) glad_glXGetCurrentContext, 0);
    ret = glad_glXGetCurrentContext();
    _post_call_glx_callback((void*) &ret, "glXGetCurrentContext", (GLADapiproc) glad_glXGetCurrentContext, 0);
    return ret;
}
PFNGLXGETCURRENTCONTEXTPROC glad_debug_glXGetCurrentContext = glad_debug_impl_glXGetCurrentContext;
PFNGLXGETCURRENTDISPLAYPROC glad_glXGetCurrentDisplay = NULL;
static Display * GLAD_API_PTR glad_debug_impl_glXGetCurrentDisplay(void) {
    Display * ret;
    _pre_call_glx_callback("glXGetCurrentDisplay", (GLADapiproc) glad_glXGetCurrentDisplay, 0);
    ret = glad_glXGetCurrentDisplay();
    _post_call_glx_callback((void*) &ret, "glXGetCurrentDisplay", (GLADapiproc) glad_glXGetCurrentDisplay, 0);
    return ret;
}
PFNGLXGETCURRENTDISPLAYPROC glad_debug_glXGetCurrentDisplay = glad_debug_impl_glXGetCurrentDisplay;
PFNGLXGETCURRENTDRAWABLEPROC glad_glXGetCurrentDrawable = NULL;
static GLXDrawable GLAD_API_PTR glad_debug_impl_glXGetCurrentDrawable(void) {
    GLXDrawable ret;
    _pre_call_glx_callback("glXGetCurrentDrawable", (GLADapiproc) glad_glXGetCurrentDrawable, 0);
    ret = glad_glXGetCurrentDrawable();
    _post_call_glx_callback((void*) &ret, "glXGetCurrentDrawable", (GLADapiproc) glad_glXGetCurrentDrawable, 0);
    return ret;
}
PFNGLXGETCURRENTDRAWABLEPROC glad_debug_glXGetCurrentDrawable = glad_debug_impl_glXGetCurrentDrawable;
PFNGLXGETCURRENTREADDRAWABLEPROC glad_glXGetCurrentReadDrawable = NULL;
static GLXDrawable GLAD_API_PTR glad_debug_impl_glXGetCurrentReadDrawable(void) {
    GLXDrawable ret;
    _pre_call_glx_callback("glXGetCurrentReadDrawable", (GLADapiproc) glad_glXGetCurrentReadDrawable, 0);
    ret = glad_glXGetCurrentReadDrawable();
    _post_call_glx_callback((void*) &ret, "glXGetCurrentReadDrawable", (GLADapiproc) glad_glXGetCurrentReadDrawable, 0);
    return ret;
}
PFNGLXGETCURRENTREADDRAWABLEPROC glad_debug_glXGetCurrentReadDrawable = glad_debug_impl_glXGetCurrentReadDrawable;
PFNGLXGETFBCONFIGATTRIBPROC glad_glXGetFBConfigAttrib = NULL;
static int GLAD_API_PTR glad_debug_impl_glXGetFBConfigAttrib(Display * dpy, GLXFBConfig config, int attribute, int * value) {
    int ret;
    _pre_call_glx_callback("glXGetFBConfigAttrib", (GLADapiproc) glad_glXGetFBConfigAttrib, 4, dpy, config, attribute, value);
    ret = glad_glXGetFBConfigAttrib(dpy, config, attribute, value);
    _post_call_glx_callback((void*) &ret, "glXGetFBConfigAttrib", (GLADapiproc) glad_glXGetFBConfigAttrib, 4, dpy, config, attribute, value);
    return ret;
}
PFNGLXGETFBCONFIGATTRIBPROC glad_debug_glXGetFBConfigAttrib = glad_debug_impl_glXGetFBConfigAttrib;
PFNGLXGETFBCONFIGSPROC glad_glXGetFBConfigs = NULL;
static GLXFBConfig * GLAD_API_PTR glad_debug_impl_glXGetFBConfigs(Display * dpy, int screen, int * nelements) {
    GLXFBConfig * ret;
    _pre_call_glx_callback("glXGetFBConfigs", (GLADapiproc) glad_glXGetFBConfigs, 3, dpy, screen, nelements);
    ret = glad_glXGetFBConfigs(dpy, screen, nelements);
    _post_call_glx_callback((void*) &ret, "glXGetFBConfigs", (GLADapiproc) glad_glXGetFBConfigs, 3, dpy, screen, nelements);
    return ret;
}
PFNGLXGETFBCONFIGSPROC glad_debug_glXGetFBConfigs = glad_debug_impl_glXGetFBConfigs;
PFNGLXGETPROCADDRESSPROC glad_glXGetProcAddress = NULL;
static __GLXextFuncPtr GLAD_API_PTR glad_debug_impl_glXGetProcAddress(const GLubyte * procName) {
    __GLXextFuncPtr ret;
    _pre_call_glx_callback("glXGetProcAddress", (GLADapiproc) glad_glXGetProcAddress, 1, procName);
    ret = glad_glXGetProcAddress(procName);
    _post_call_glx_callback((void*) &ret, "glXGetProcAddress", (GLADapiproc) glad_glXGetProcAddress, 1, procName);
    return ret;
}
PFNGLXGETPROCADDRESSPROC glad_debug_glXGetProcAddress = glad_debug_impl_glXGetProcAddress;
PFNGLXGETSELECTEDEVENTPROC glad_glXGetSelectedEvent = NULL;
static void GLAD_API_PTR glad_debug_impl_glXGetSelectedEvent(Display * dpy, GLXDrawable draw, unsigned long * event_mask) {
    _pre_call_glx_callback("glXGetSelectedEvent", (GLADapiproc) glad_glXGetSelectedEvent, 3, dpy, draw, event_mask);
    glad_glXGetSelectedEvent(dpy, draw, event_mask);
    _post_call_glx_callback(NULL, "glXGetSelectedEvent", (GLADapiproc) glad_glXGetSelectedEvent, 3, dpy, draw, event_mask);
    
}
PFNGLXGETSELECTEDEVENTPROC glad_debug_glXGetSelectedEvent = glad_debug_impl_glXGetSelectedEvent;
PFNGLXGETVISUALFROMFBCONFIGPROC glad_glXGetVisualFromFBConfig = NULL;
static XVisualInfo * GLAD_API_PTR glad_debug_impl_glXGetVisualFromFBConfig(Display * dpy, GLXFBConfig config) {
    XVisualInfo * ret;
    _pre_call_glx_callback("glXGetVisualFromFBConfig", (GLADapiproc) glad_glXGetVisualFromFBConfig, 2, dpy, config);
    ret = glad_glXGetVisualFromFBConfig(dpy, config);
    _post_call_glx_callback((void*) &ret, "glXGetVisualFromFBConfig", (GLADapiproc) glad_glXGetVisualFromFBConfig, 2, dpy, config);
    return ret;
}
PFNGLXGETVISUALFROMFBCONFIGPROC glad_debug_glXGetVisualFromFBConfig = glad_debug_impl_glXGetVisualFromFBConfig;
PFNGLXISDIRECTPROC glad_glXIsDirect = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXIsDirect(Display * dpy, GLXContext ctx) {
    Bool ret;
    _pre_call_glx_callback("glXIsDirect", (GLADapiproc) glad_glXIsDirect, 2, dpy, ctx);
    ret = glad_glXIsDirect(dpy, ctx);
    _post_call_glx_callback((void*) &ret, "glXIsDirect", (GLADapiproc) glad_glXIsDirect, 2, dpy, ctx);
    return ret;
}
PFNGLXISDIRECTPROC glad_debug_glXIsDirect = glad_debug_impl_glXIsDirect;
PFNGLXMAKECONTEXTCURRENTPROC glad_glXMakeContextCurrent = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXMakeContextCurrent(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx) {
    Bool ret;
    _pre_call_glx_callback("glXMakeContextCurrent", (GLADapiproc) glad_glXMakeContextCurrent, 4, dpy, draw, read, ctx);
    ret = glad_glXMakeContextCurrent(dpy, draw, read, ctx);
    _post_call_glx_callback((void*) &ret, "glXMakeContextCurrent", (GLADapiproc) glad_glXMakeContextCurrent, 4, dpy, draw, read, ctx);
    return ret;
}
PFNGLXMAKECONTEXTCURRENTPROC glad_debug_glXMakeContextCurrent = glad_debug_impl_glXMakeContextCurrent;
PFNGLXMAKECURRENTPROC glad_glXMakeCurrent = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXMakeCurrent(Display * dpy, GLXDrawable drawable, GLXContext ctx) {
    Bool ret;
    _pre_call_glx_callback("glXMakeCurrent", (GLADapiproc) glad_glXMakeCurrent, 3, dpy, drawable, ctx);
    ret = glad_glXMakeCurrent(dpy, drawable, ctx);
    _post_call_glx_callback((void*) &ret, "glXMakeCurrent", (GLADapiproc) glad_glXMakeCurrent, 3, dpy, drawable, ctx);
    return ret;
}
PFNGLXMAKECURRENTPROC glad_debug_glXMakeCurrent = glad_debug_impl_glXMakeCurrent;
PFNGLXQUERYCONTEXTPROC glad_glXQueryContext = NULL;
static int GLAD_API_PTR glad_debug_impl_glXQueryContext(Display * dpy, GLXContext ctx, int attribute, int * value) {
    int ret;
    _pre_call_glx_callback("glXQueryContext", (GLADapiproc) glad_glXQueryContext, 4, dpy, ctx, attribute, value);
    ret = glad_glXQueryContext(dpy, ctx, attribute, value);
    _post_call_glx_callback((void*) &ret, "glXQueryContext", (GLADapiproc) glad_glXQueryContext, 4, dpy, ctx, attribute, value);
    return ret;
}
PFNGLXQUERYCONTEXTPROC glad_debug_glXQueryContext = glad_debug_impl_glXQueryContext;
PFNGLXQUERYDRAWABLEPROC glad_glXQueryDrawable = NULL;
static void GLAD_API_PTR glad_debug_impl_glXQueryDrawable(Display * dpy, GLXDrawable draw, int attribute, unsigned int * value) {
    _pre_call_glx_callback("glXQueryDrawable", (GLADapiproc) glad_glXQueryDrawable, 4, dpy, draw, attribute, value);
    glad_glXQueryDrawable(dpy, draw, attribute, value);
    _post_call_glx_callback(NULL, "glXQueryDrawable", (GLADapiproc) glad_glXQueryDrawable, 4, dpy, draw, attribute, value);
    
}
PFNGLXQUERYDRAWABLEPROC glad_debug_glXQueryDrawable = glad_debug_impl_glXQueryDrawable;
PFNGLXQUERYEXTENSIONPROC glad_glXQueryExtension = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXQueryExtension(Display * dpy, int * errorb, int * event) {
    Bool ret;
    _pre_call_glx_callback("glXQueryExtension", (GLADapiproc) glad_glXQueryExtension, 3, dpy, errorb, event);
    ret = glad_glXQueryExtension(dpy, errorb, event);
    _post_call_glx_callback((void*) &ret, "glXQueryExtension", (GLADapiproc) glad_glXQueryExtension, 3, dpy, errorb, event);
    return ret;
}
PFNGLXQUERYEXTENSIONPROC glad_debug_glXQueryExtension = glad_debug_impl_glXQueryExtension;
PFNGLXQUERYEXTENSIONSSTRINGPROC glad_glXQueryExtensionsString = NULL;
static const char * GLAD_API_PTR glad_debug_impl_glXQueryExtensionsString(Display * dpy, int screen) {
    const char * ret;
    _pre_call_glx_callback("glXQueryExtensionsString", (GLADapiproc) glad_glXQueryExtensionsString, 2, dpy, screen);
    ret = glad_glXQueryExtensionsString(dpy, screen);
    _post_call_glx_callback((void*) &ret, "glXQueryExtensionsString", (GLADapiproc) glad_glXQueryExtensionsString, 2, dpy, screen);
    return ret;
}
PFNGLXQUERYEXTENSIONSSTRINGPROC glad_debug_glXQueryExtensionsString = glad_debug_impl_glXQueryExtensionsString;
PFNGLXQUERYSERVERSTRINGPROC glad_glXQueryServerString = NULL;
static const char * GLAD_API_PTR glad_debug_impl_glXQueryServerString(Display * dpy, int screen, int name) {
    const char * ret;
    _pre_call_glx_callback("glXQueryServerString", (GLADapiproc) glad_glXQueryServerString, 3, dpy, screen, name);
    ret = glad_glXQueryServerString(dpy, screen, name);
    _post_call_glx_callback((void*) &ret, "glXQueryServerString", (GLADapiproc) glad_glXQueryServerString, 3, dpy, screen, name);
    return ret;
}
PFNGLXQUERYSERVERSTRINGPROC glad_debug_glXQueryServerString = glad_debug_impl_glXQueryServerString;
PFNGLXQUERYVERSIONPROC glad_glXQueryVersion = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXQueryVersion(Display * dpy, int * maj, int * min) {
    Bool ret;
    _pre_call_glx_callback("glXQueryVersion", (GLADapiproc) glad_glXQueryVersion, 3, dpy, maj, min);
    ret = glad_glXQueryVersion(dpy, maj, min);
    _post_call_glx_callback((void*) &ret, "glXQueryVersion", (GLADapiproc) glad_glXQueryVersion, 3, dpy, maj, min);
    return ret;
}
PFNGLXQUERYVERSIONPROC glad_debug_glXQueryVersion = glad_debug_impl_glXQueryVersion;
PFNGLXSELECTEVENTPROC glad_glXSelectEvent = NULL;
static void GLAD_API_PTR glad_debug_impl_glXSelectEvent(Display * dpy, GLXDrawable draw, unsigned long event_mask) {
    _pre_call_glx_callback("glXSelectEvent", (GLADapiproc) glad_glXSelectEvent, 3, dpy, draw, event_mask);
    glad_glXSelectEvent(dpy, draw, event_mask);
    _post_call_glx_callback(NULL, "glXSelectEvent", (GLADapiproc) glad_glXSelectEvent, 3, dpy, draw, event_mask);
    
}
PFNGLXSELECTEVENTPROC glad_debug_glXSelectEvent = glad_debug_impl_glXSelectEvent;
PFNGLXSWAPBUFFERSPROC glad_glXSwapBuffers = NULL;
static void GLAD_API_PTR glad_debug_impl_glXSwapBuffers(Display * dpy, GLXDrawable drawable) {
    _pre_call_glx_callback("glXSwapBuffers", (GLADapiproc) glad_glXSwapBuffers, 2, dpy, drawable);
    glad_glXSwapBuffers(dpy, drawable);
    _post_call_glx_callback(NULL, "glXSwapBuffers", (GLADapiproc) glad_glXSwapBuffers, 2, dpy, drawable);
    
}
PFNGLXSWAPBUFFERSPROC glad_debug_glXSwapBuffers = glad_debug_impl_glXSwapBuffers;
PFNGLXUSEXFONTPROC glad_glXUseXFont = NULL;
static void GLAD_API_PTR glad_debug_impl_glXUseXFont(Font font, int first, int count, int list) {
    _pre_call_glx_callback("glXUseXFont", (GLADapiproc) glad_glXUseXFont, 4, font, first, count, list);
    glad_glXUseXFont(font, first, count, list);
    _post_call_glx_callback(NULL, "glXUseXFont", (GLADapiproc) glad_glXUseXFont, 4, font, first, count, list);
    
}
PFNGLXUSEXFONTPROC glad_debug_glXUseXFont = glad_debug_impl_glXUseXFont;
PFNGLXWAITGLPROC glad_glXWaitGL = NULL;
static void GLAD_API_PTR glad_debug_impl_glXWaitGL(void) {
    _pre_call_glx_callback("glXWaitGL", (GLADapiproc) glad_glXWaitGL, 0);
    glad_glXWaitGL();
    _post_call_glx_callback(NULL, "glXWaitGL", (GLADapiproc) glad_glXWaitGL, 0);
    
}
PFNGLXWAITGLPROC glad_debug_glXWaitGL = glad_debug_impl_glXWaitGL;
PFNGLXWAITXPROC glad_glXWaitX = NULL;
static void GLAD_API_PTR glad_debug_impl_glXWaitX(void) {
    _pre_call_glx_callback("glXWaitX", (GLADapiproc) glad_glXWaitX, 0);
    glad_glXWaitX();
    _post_call_glx_callback(NULL, "glXWaitX", (GLADapiproc) glad_glXWaitX, 0);
    
}
PFNGLXWAITXPROC glad_debug_glXWaitX = glad_debug_impl_glXWaitX;


static void glad_glx_load_GLX_VERSION_1_0( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_VERSION_1_0) return;
    glad_glXChooseVisual = (PFNGLXCHOOSEVISUALPROC) load(userptr, "glXChooseVisual");
    glad_glXCopyContext = (PFNGLXCOPYCONTEXTPROC) load(userptr, "glXCopyContext");
    glad_glXCreateContext = (PFNGLXCREATECONTEXTPROC) load(userptr, "glXCreateContext");
    glad_glXCreateGLXPixmap = (PFNGLXCREATEGLXPIXMAPPROC) load(userptr, "glXCreateGLXPixmap");
    glad_glXDestroyContext = (PFNGLXDESTROYCONTEXTPROC) load(userptr, "glXDestroyContext");
    glad_glXDestroyGLXPixmap = (PFNGLXDESTROYGLXPIXMAPPROC) load(userptr, "glXDestroyGLXPixmap");
    glad_glXGetConfig = (PFNGLXGETCONFIGPROC) load(userptr, "glXGetConfig");
    glad_glXGetCurrentContext = (PFNGLXGETCURRENTCONTEXTPROC) load(userptr, "glXGetCurrentContext");
    glad_glXGetCurrentDrawable = (PFNGLXGETCURRENTDRAWABLEPROC) load(userptr, "glXGetCurrentDrawable");
    glad_glXIsDirect = (PFNGLXISDIRECTPROC) load(userptr, "glXIsDirect");
    glad_glXMakeCurrent = (PFNGLXMAKECURRENTPROC) load(userptr, "glXMakeCurrent");
    glad_glXQueryExtension = (PFNGLXQUERYEXTENSIONPROC) load(userptr, "glXQueryExtension");
    glad_glXQueryVersion = (PFNGLXQUERYVERSIONPROC) load(userptr, "glXQueryVersion");
    glad_glXSwapBuffers = (PFNGLXSWAPBUFFERSPROC) load(userptr, "glXSwapBuffers");
    glad_glXUseXFont = (PFNGLXUSEXFONTPROC) load(userptr, "glXUseXFont");
    glad_glXWaitGL = (PFNGLXWAITGLPROC) load(userptr, "glXWaitGL");
    glad_glXWaitX = (PFNGLXWAITXPROC) load(userptr, "glXWaitX");
}
static void glad_glx_load_GLX_VERSION_1_1( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_VERSION_1_1) return;
    glad_glXGetClientString = (PFNGLXGETCLIENTSTRINGPROC) load(userptr, "glXGetClientString");
    glad_glXQueryExtensionsString = (PFNGLXQUERYEXTENSIONSSTRINGPROC) load(userptr, "glXQueryExtensionsString");
    glad_glXQueryServerString = (PFNGLXQUERYSERVERSTRINGPROC) load(userptr, "glXQueryServerString");
}
static void glad_glx_load_GLX_VERSION_1_2( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_VERSION_1_2) return;
    glad_glXGetCurrentDisplay = (PFNGLXGETCURRENTDISPLAYPROC) load(userptr, "glXGetCurrentDisplay");
}
static void glad_glx_load_GLX_VERSION_1_3( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_VERSION_1_3) return;
    glad_glXChooseFBConfig = (PFNGLXCHOOSEFBCONFIGPROC) load(userptr, "glXChooseFBConfig");
    glad_glXCreateNewContext = (PFNGLXCREATENEWCONTEXTPROC) load(userptr, "glXCreateNewContext");
    glad_glXCreatePbuffer = (PFNGLXCREATEPBUFFERPROC) load(userptr, "glXCreatePbuffer");
    glad_glXCreatePixmap = (PFNGLXCREATEPIXMAPPROC) load(userptr, "glXCreatePixmap");
    glad_glXCreateWindow = (PFNGLXCREATEWINDOWPROC) load(userptr, "glXCreateWindow");
    glad_glXDestroyPbuffer = (PFNGLXDESTROYPBUFFERPROC) load(userptr, "glXDestroyPbuffer");
    glad_glXDestroyPixmap = (PFNGLXDESTROYPIXMAPPROC) load(userptr, "glXDestroyPixmap");
    glad_glXDestroyWindow = (PFNGLXDESTROYWINDOWPROC) load(userptr, "glXDestroyWindow");
    glad_glXGetCurrentReadDrawable = (PFNGLXGETCURRENTREADDRAWABLEPROC) load(userptr, "glXGetCurrentReadDrawable");
    glad_glXGetFBConfigAttrib = (PFNGLXGETFBCONFIGATTRIBPROC) load(userptr, "glXGetFBConfigAttrib");
    glad_glXGetFBConfigs = (PFNGLXGETFBCONFIGSPROC) load(userptr, "glXGetFBConfigs");
    glad_glXGetSelectedEvent = (PFNGLXGETSELECTEDEVENTPROC) load(userptr, "glXGetSelectedEvent");
    glad_glXGetVisualFromFBConfig = (PFNGLXGETVISUALFROMFBCONFIGPROC) load(userptr, "glXGetVisualFromFBConfig");
    glad_glXMakeContextCurrent = (PFNGLXMAKECONTEXTCURRENTPROC) load(userptr, "glXMakeContextCurrent");
    glad_glXQueryContext = (PFNGLXQUERYCONTEXTPROC) load(userptr, "glXQueryContext");
    glad_glXQueryDrawable = (PFNGLXQUERYDRAWABLEPROC) load(userptr, "glXQueryDrawable");
    glad_glXSelectEvent = (PFNGLXSELECTEVENTPROC) load(userptr, "glXSelectEvent");
}
static void glad_glx_load_GLX_VERSION_1_4( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_VERSION_1_4) return;
    glad_glXGetProcAddress = (PFNGLXGETPROCADDRESSPROC) load(userptr, "glXGetProcAddress");
}
static void glad_glx_load_GLX_ARB_create_context( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_ARB_create_context) return;
    glad_glXCreateContextAttribsARB = (PFNGLXCREATECONTEXTATTRIBSARBPROC) load(userptr, "glXCreateContextAttribsARB");
}



static int glad_glx_has_extension(Display *display, int screen, const char *ext) {
#ifndef GLX_VERSION_1_1
    GLAD_UNUSED(display);
    GLAD_UNUSED(screen);
    GLAD_UNUSED(ext);
#else
    const char *terminator;
    const char *loc;
    const char *extensions;

    if (glXQueryExtensionsString == NULL) {
        return 0;
    }

    extensions = glXQueryExtensionsString(display, screen);

    if(extensions == NULL || ext == NULL) {
        return 0;
    }

    while(1) {
        loc = strstr(extensions, ext);
        if(loc == NULL)
            break;

        terminator = loc + strlen(ext);
        if((loc == extensions || *(loc - 1) == ' ') &&
            (*terminator == ' ' || *terminator == '\0')) {
            return 1;
        }
        extensions = terminator;
    }
#endif

    return 0;
}

static GLADapiproc glad_glx_get_proc_from_userptr(void *userptr, const char* name) {
    return (GLAD_GNUC_EXTENSION (GLADapiproc (*)(const char *name)) userptr)(name);
}

static int glad_glx_find_extensions(Display *display, int screen) {
    GLAD_GLX_ARB_create_context = glad_glx_has_extension(display, screen, "GLX_ARB_create_context");
    GLAD_GLX_ARB_framebuffer_sRGB = glad_glx_has_extension(display, screen, "GLX_ARB_framebuffer_sRGB");
    GLAD_GLX_EXT_framebuffer_sRGB = glad_glx_has_extension(display, screen, "GLX_EXT_framebuffer_sRGB");
    return 1;
}

static int glad_glx_find_core_glx(Display **display, int *screen) {
    int major = 0, minor = 0;
    if(*display == NULL) {
#ifdef GLAD_GLX_NO_X11
        GLAD_UNUSED(screen);
        return 0;
#else
        *display = XOpenDisplay(0);
        if (*display == NULL) {
            return 0;
        }
        *screen = XScreenNumberOfScreen(XDefaultScreenOfDisplay(*display));
#endif
    }
    glXQueryVersion(*display, &major, &minor);
    GLAD_GLX_VERSION_1_0 = (major == 1 && minor >= 0) || major > 1;
    GLAD_GLX_VERSION_1_1 = (major == 1 && minor >= 1) || major > 1;
    GLAD_GLX_VERSION_1_2 = (major == 1 && minor >= 2) || major > 1;
    GLAD_GLX_VERSION_1_3 = (major == 1 && minor >= 3) || major > 1;
    GLAD_GLX_VERSION_1_4 = (major == 1 && minor >= 4) || major > 1;
    return GLAD_MAKE_VERSION(major, minor);
}

int gladLoadGLXUserPtr(Display *display, int screen, GLADuserptrloadfunc load, void *userptr) {
    int version;
    glXQueryVersion = (PFNGLXQUERYVERSIONPROC) load(userptr, "glXQueryVersion");
    if(glXQueryVersion == NULL) return 0;
    version = glad_glx_find_core_glx(&display, &screen);

    glad_glx_load_GLX_VERSION_1_0(load, userptr);
    glad_glx_load_GLX_VERSION_1_1(load, userptr);
    glad_glx_load_GLX_VERSION_1_2(load, userptr);
    glad_glx_load_GLX_VERSION_1_3(load, userptr);
    glad_glx_load_GLX_VERSION_1_4(load, userptr);

    if (!glad_glx_find_extensions(display, screen)) return 0;
    glad_glx_load_GLX_ARB_create_context(load, userptr);


    return version;
}

int gladLoadGLX(Display *display, int screen, GLADloadfunc load) {
    return gladLoadGLXUserPtr(display, screen, glad_glx_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}

 
void gladInstallGLXDebug(void) {
    glad_debug_glXChooseFBConfig = glad_debug_impl_glXChooseFBConfig;
    glad_debug_glXChooseVisual = glad_debug_impl_glXChooseVisual;
    glad_debug_glXCopyContext = glad_debug_impl_glXCopyContext;
    glad_debug_glXCreateContext = glad_debug_impl_glXCreateContext;
    glad_debug_glXCreateContextAttribsARB = glad_debug_impl_glXCreateContextAttribsARB;
    glad_debug_glXCreateGLXPixmap = glad_debug_impl_glXCreateGLXPixmap;
    glad_debug_glXCreateNewContext = glad_debug_impl_glXCreateNewContext;
    glad_debug_glXCreatePbuffer = glad_debug_impl_glXCreatePbuffer;
    glad_debug_glXCreatePixmap = glad_debug_impl_glXCreatePixmap;
    glad_debug_glXCreateWindow = glad_debug_impl_glXCreateWindow;
    glad_debug_glXDestroyContext = glad_debug_impl_glXDestroyContext;
    glad_debug_glXDestroyGLXPixmap = glad_debug_impl_glXDestroyGLXPixmap;
    glad_debug_glXDestroyPbuffer = glad_debug_impl_glXDestroyPbuffer;
    glad_debug_glXDestroyPixmap = glad_debug_impl_glXDestroyPixmap;
    glad_debug_glXDestroyWindow = glad_debug_impl_glXDestroyWindow;
    glad_debug_glXGetClientString = glad_debug_impl_glXGetClientString;
    glad_debug_glXGetConfig = glad_debug_impl_glXGetConfig;
    glad_debug_glXGetCurrentContext = glad_debug_impl_glXGetCurrentContext;
    glad_debug_glXGetCurrentDisplay = glad_debug_impl_glXGetCurrentDisplay;
    glad_debug_glXGetCurrentDrawable = glad_debug_impl_glXGetCurrentDrawable;
    glad_debug_glXGetCurrentReadDrawable = glad_debug_impl_glXGetCurrentReadDrawable;
    glad_debug_glXGetFBConfigAttrib = glad_debug_impl_glXGetFBConfigAttrib;
    glad_debug_glXGetFBConfigs = glad_debug_impl_glXGetFBConfigs;
    glad_debug_glXGetProcAddress = glad_debug_impl_glXGetProcAddress;
    glad_debug_glXGetSelectedEvent = glad_debug_impl_glXGetSelectedEvent;
    glad_debug_glXGetVisualFromFBConfig = glad_debug_impl_glXGetVisualFromFBConfig;
    glad_debug_glXIsDirect = glad_debug_impl_glXIsDirect;
    glad_debug_glXMakeContextCurrent = glad_debug_impl_glXMakeContextCurrent;
    glad_debug_glXMakeCurrent = glad_debug_impl_glXMakeCurrent;
    glad_debug_glXQueryContext = glad_debug_impl_glXQueryContext;
    glad_debug_glXQueryDrawable = glad_debug_impl_glXQueryDrawable;
    glad_debug_glXQueryExtension = glad_debug_impl_glXQueryExtension;
    glad_debug_glXQueryExtensionsString = glad_debug_impl_glXQueryExtensionsString;
    glad_debug_glXQueryServerString = glad_debug_impl_glXQueryServerString;
    glad_debug_glXQueryVersion = glad_debug_impl_glXQueryVersion;
    glad_debug_glXSelectEvent = glad_debug_impl_glXSelectEvent;
    glad_debug_glXSwapBuffers = glad_debug_impl_glXSwapBuffers;
    glad_debug_glXUseXFont = glad_debug_impl_glXUseXFont;
    glad_debug_glXWaitGL = glad_debug_impl_glXWaitGL;
    glad_debug_glXWaitX = glad_debug_impl_glXWaitX;
}

void gladUninstallGLXDebug(void) {
    glad_debug_glXChooseFBConfig = glad_glXChooseFBConfig;
    glad_debug_glXChooseVisual = glad_glXChooseVisual;
    glad_debug_glXCopyContext = glad_glXCopyContext;
    glad_debug_glXCreateContext = glad_glXCreateContext;
    glad_debug_glXCreateContextAttribsARB = glad_glXCreateContextAttribsARB;
    glad_debug_glXCreateGLXPixmap = glad_glXCreateGLXPixmap;
    glad_debug_glXCreateNewContext = glad_glXCreateNewContext;
    glad_debug_glXCreatePbuffer = glad_glXCreatePbuffer;
    glad_debug_glXCreatePixmap = glad_glXCreatePixmap;
    glad_debug_glXCreateWindow = glad_glXCreateWindow;
    glad_debug_glXDestroyContext = glad_glXDestroyContext;
    glad_debug_glXDestroyGLXPixmap = glad_glXDestroyGLXPixmap;
    glad_debug_glXDestroyPbuffer = glad_glXDestroyPbuffer;
    glad_debug_glXDestroyPixmap = glad_glXDestroyPixmap;
    glad_debug_glXDestroyWindow = glad_glXDestroyWindow;
    glad_debug_glXGetClientString = glad_glXGetClientString;
    glad_debug_glXGetConfig = glad_glXGetConfig;
    glad_debug_glXGetCurrentContext = glad_glXGetCurrentContext;
    glad_debug_glXGetCurrentDisplay = glad_glXGetCurrentDisplay;
    glad_debug_glXGetCurrentDrawable = glad_glXGetCurrentDrawable;
    glad_debug_glXGetCurrentReadDrawable = glad_glXGetCurrentReadDrawable;
    glad_debug_glXGetFBConfigAttrib = glad_glXGetFBConfigAttrib;
    glad_debug_glXGetFBConfigs = glad_glXGetFBConfigs;
    glad_debug_glXGetProcAddress = glad_glXGetProcAddress;
    glad_debug_glXGetSelectedEvent = glad_glXGetSelectedEvent;
    glad_debug_glXGetVisualFromFBConfig = glad_glXGetVisualFromFBConfig;
    glad_debug_glXIsDirect = glad_glXIsDirect;
    glad_debug_glXMakeContextCurrent = glad_glXMakeContextCurrent;
    glad_debug_glXMakeCurrent = glad_glXMakeCurrent;
    glad_debug_glXQueryContext = glad_glXQueryContext;
    glad_debug_glXQueryDrawable = glad_glXQueryDrawable;
    glad_debug_glXQueryExtension = glad_glXQueryExtension;
    glad_debug_glXQueryExtensionsString = glad_glXQueryExtensionsString;
    glad_debug_glXQueryServerString = glad_glXQueryServerString;
    glad_debug_glXQueryVersion = glad_glXQueryVersion;
    glad_debug_glXSelectEvent = glad_glXSelectEvent;
    glad_debug_glXSwapBuffers = glad_glXSwapBuffers;
    glad_debug_glXUseXFont = glad_glXUseXFont;
    glad_debug_glXWaitGL = glad_glXWaitGL;
    glad_debug_glXWaitX = glad_glXWaitX;
}

#ifdef GLAD_GLX

#ifndef GLAD_LOADER_LIBRARY_C_
#define GLAD_LOADER_LIBRARY_C_

#include <stddef.h>
#include <stdlib.h>

#if GLAD_PLATFORM_WIN32
#include <windows.h>
#else
#include <dlfcn.h>
#endif


static void* glad_get_dlopen_handle(const char *lib_names[], int length) {
    void *handle = NULL;
    int i;

    for (i = 0; i < length; ++i) {
#if GLAD_PLATFORM_WIN32
  #if GLAD_PLATFORM_UWP
        size_t buffer_size = (strlen(lib_names[i]) + 1) * sizeof(WCHAR);
        LPWSTR buffer = (LPWSTR) malloc(buffer_size);
        if (buffer != NULL) {
            int ret = MultiByteToWideChar(CP_ACP, 0, lib_names[i], -1, buffer, buffer_size);
            if (ret != 0) {
                handle = (void*) LoadPackagedLibrary(buffer, 0);
            }
            free((void*) buffer);
        }
  #else
        handle = (void*) LoadLibraryA(lib_names[i]);
  #endif
#else
        handle = dlopen(lib_names[i], RTLD_LAZY | RTLD_LOCAL);
#endif
        if (handle != NULL) {
            return handle;
        }
    }

    return NULL;
}

static void glad_close_dlopen_handle(void* handle) {
    if (handle != NULL) {
#if GLAD_PLATFORM_WIN32
        FreeLibrary((HMODULE) handle);
#else
        dlclose(handle);
#endif
    }
}

static GLADapiproc glad_dlsym_handle(void* handle, const char *name) {
    if (handle == NULL) {
        return NULL;
    }

#if GLAD_PLATFORM_WIN32
    return (GLADapiproc) GetProcAddress((HMODULE) handle, name);
#else
    return GLAD_GNUC_EXTENSION (GLADapiproc) dlsym(handle, name);
#endif
}

#endif /* GLAD_LOADER_LIBRARY_C_ */

typedef void* (GLAD_API_PTR *GLADglxprocaddrfunc)(const char*);

static GLADapiproc glad_glx_get_proc(void *userptr, const char *name) {
    return GLAD_GNUC_EXTENSION ((GLADapiproc (*)(const char *name)) userptr)(name);
}

static void* _glx_handle;

static void* glad_glx_dlopen_handle(void) {
    static const char *NAMES[] = {
#if defined __CYGWIN__
        "libGL-1.so",
#endif
        "libGL.so.1",
        "libGL.so"
    };

    if (_glx_handle == NULL) {
        _glx_handle = glad_get_dlopen_handle(NAMES, sizeof(NAMES) / sizeof(NAMES[0]));
    }

    return _glx_handle;
}

int gladLoaderLoadGLX(Display *display, int screen) {
    int version = 0;
    void *handle = NULL;
    int did_load = 0;
    GLADglxprocaddrfunc loader;

    did_load = _glx_handle == NULL;
    handle = glad_glx_dlopen_handle();
    if (handle != NULL) {
        loader = (GLADglxprocaddrfunc) glad_dlsym_handle(handle, "glXGetProcAddressARB");
        if (loader != NULL) {
            version = gladLoadGLXUserPtr(display, screen, glad_glx_get_proc, GLAD_GNUC_EXTENSION (void*) loader);
        }

        if (!version && did_load) {
            gladLoaderUnloadGLX();
        }
    }

    return version;
}


void gladLoaderUnloadGLX() {
    if (_glx_handle != NULL) {
        glad_close_dlopen_handle(_glx_handle);
        _glx_handle = NULL;
    }
}

#endif /* GLAD_GLX */

#ifdef __cplusplus
}
#endif

#endif /* GLAD_GLX_IMPLEMENTATION */

