/*
 *  Renderer info relevant to the backend.
 */

$ require "common"

$ if IRO_LINUX then
#define Window X11Window
#define Font X11Font
#define Time X11Time
#define KeyCode X11KeyCode
#define VK_USE_PLATFORM_XLIB_KHR
#include <vulkan/vulkan.h>
#undef Window
#undef Font
#undef Time
#undef KeyCode
#undef None
#undef X
$ elseif IRO_WIN32 then --if IRO_LINUX
#define VK_USE_PLATFORM_WIN32_KHR
#include <vulkan/vulkan.h>
#undef ERROR
#undef min
#undef max
#undef interface
$ else -- elseif IRO_WIN32
#error "unhandled platform"
$ end -- if IRO_LINUX

#include "iro/containers/FixedPool.h"
#include "iro/containers/StackArray.h"
#include "iro/io/Format.h"
#include "iro/io/IO.h"
#include "math/vec.h"

@@lpp.import "Renderer.lh"

namespace gfx
{

using namespace iro;

/* ----------------------------------------------------------------------------
 */
struct RendererHeapAllocation
{
  u32 memory_type;
  u32 block_index;
  VkDeviceSize offset;
  VkDeviceSize size;
  VkDeviceSize aligned_offset;
  VkDeviceSize aligned_size;
};

struct RendererHeapBlock
{
  VkDeviceSize size;
  VkDeviceMemory memory;
  u32 cursor;
  u32 mapped_count;
  void* mapped_data;
};

struct RendererHeap
{
  VkMemoryHeap heap;
  VkDeviceSize alignment;
  VkDeviceSize preferred_block_size;
  Array<RendererHeapBlock> blocks;
  Array<RendererHeapAllocation> allocations;
  Array<RendererHeapAllocation> free_chunks;
};

/* ----------------------------------------------------------------------------
 */
struct RendererTexture
{
  VkImage image;
  VkImageView view;
  VkSampler sampler;
  VkImageLayout layout;
  VkDescriptorSet descriptor_set;
  RendererHeapAllocation* allocation;
};

/* ----------------------------------------------------------------------------
 */
struct RendererFramebuffer
{
  VkFramebuffer framebuffer;
  VkRenderPass renderpass;
  RendererTexture* texture;
  u32 width;
  u32 height;
  vec4f clear_color;
};

/* ----------------------------------------------------------------------------
 */
struct RendererShader
{
  VkShaderModule module;
  VkShaderStageFlagBits stage;
};

/* ----------------------------------------------------------------------------
 */
struct RendererBuffer
{
  VkBuffer buffer;
  VkDescriptorSet descriptor_set;
  RendererHeapAllocation* allocation;
};

/* ----------------------------------------------------------------------------
 */
struct RendererPipeline
{
  VkPipeline pipeline;
  VkPipelineLayout layout;
  u64 push_constant_size;
};

/* ----------------------------------------------------------------------------
 */
constexpr u32 UNIFORM_BUFFER_DESCRIPTOR_SET_INDEX = 0;
constexpr u32 SAMPLER_DESCRIPTOR_SET_INDEX = 1;
constexpr u32 STORAGE_BUFFER_DESCRIPTOR_SET_INDEX = 2;

/* ----------------------------------------------------------------------------
 */
struct RendererInternal
{
  //// Renderer Objects ////

  static constexpr s32 MAX_TEXTURES = 512;
  FixedPool<RendererTexture, MAX_TEXTURES> texture_pool;
  u32 texture_count;

  static constexpr s32 MAX_BUFFERS = 512;
  FixedPool<RendererBuffer, MAX_BUFFERS> buffer_pool;
  u32 buffer_count;

  static constexpr s32 MAX_FRAMEBUFFERS = 4;
  FixedPool<RendererFramebuffer, MAX_FRAMEBUFFERS> framebuffer_pool;
  u32 framebuffer_count;

  static constexpr s32 MAX_SHADERS = 32;
  FixedPool<RendererShader, MAX_SHADERS> shader_pool;
  u32 shader_count;

  static constexpr s32 MAX_PIPELINES = 8;
  FixedPool<RendererPipeline, MAX_PIPELINES> pipeline_pool;
  u32 pipeline_count;

  StackArray<RendererHeap, VK_MAX_MEMORY_TYPES> heaps;

  //// Vulkan Core Objects ////

  VkAllocationCallbacks allocator;

  VkInstance instance;

$ if ECS_DEBUG then
  VkDebugUtilsMessengerEXT debug_messenger;
  PFN_vkCmdBeginDebugUtilsLabelEXT func_vkCmdBeginDebugUtilsLabelEXT;
  PFN_vkCmdEndDebugUtilsLabelEXT func_vkCmdEndDebugUtilsLabelEXT;
  PFN_vkCmdInsertDebugUtilsLabelEXT func_vkCmdInsertDebugUtilsLabelEXT;
  PFN_vkSetDebugUtilsObjectNameEXT func_vkSetDebugUtilsObjectNameEXT;
$ end -- if ECS_DEBUG

  VkSurfaceKHR surface;
  VkSurfaceFormatKHR surface_format;
  VkPresentModeKHR surface_present_mode;
  VkExtent2D surface_extent;

  VkPhysicalDevice physical_device;
  VkPhysicalDeviceProperties physical_device_properties;
  VkPhysicalDeviceMemoryProperties physical_device_memory_properties;
  VkPhysicalDeviceFeatures physical_device_features;
  VkPhysicalDeviceFeatures physical_device_enabled_features;
  u32 physical_device_graphics_and_compute_queue_family;
  u32 physical_device_present_queue_family;

  VkDevice device;
  VkQueue graphics_queue;
  VkQueue present_queue;

  VkCommandPool command_pool;
  VkCommandBuffer command_buffer;

  VkDescriptorSetLayout default_uniform_buffer_descriptor_set_layout;
  VkDescriptorSetLayout default_sampler_descriptor_set_layout;
  VkDescriptorSetLayout default_storage_buffer_descriptor_set_layout;

  VkDescriptorPool descriptor_pool;

  VkSwapchainKHR swapchain;
  u32 swapchain_min_image_count;
  u32 swapchain_image_count;

  static constexpr u32 MAX_DEFAULT_FRAMEBUFFERS = 4;
  VkRenderPass default_renderpass;
  VkImage default_framebuffer_images[MAX_DEFAULT_FRAMEBUFFERS];
  VkDeviceMemory default_framebuffer_image_memories[MAX_DEFAULT_FRAMEBUFFERS];
  VkImageView default_framebuffer_image_views[MAX_DEFAULT_FRAMEBUFFERS];
  VkFramebuffer default_framebuffers[MAX_DEFAULT_FRAMEBUFFERS];
  u32 default_framebuffer_index;

  VkSemaphore image_acquired_semaphore;
  VkSemaphore render_complete_semaphore;

  VkPipelineCache pipeline_cache;
};

/* ----------------------------------------------------------------------------
 */
static inline void debugSetObjectName(
  Renderer& renderer,
  VkObjectType type,
  void* handle,
  iro::io::Formattable auto... args)
{
$ if ECS_DEBUG then
  RendererInternal& ri = *(RendererInternal*)renderer.internal;

  if (ri.func_vkSetDebugUtilsObjectNameEXT == nullptr)
    return;
  if (handle == nullptr)
    return;

  iro::io::StaticBuffer<64> name = {};
  iro::io::formatv(&name, args...);

  VkDebugUtilsObjectNameInfoEXT name_info =
  {
    .sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT,
    .objectType = type,
    .objectHandle = (u64)handle,
    .pObjectName = (const char*)name.buffer,
  };

  ri.func_vkSetDebugUtilsObjectNameEXT(ri.device, &name_info);
$ end -- if ECS_DEBUG
}

/* ----------------------------------------------------------------------------
 */
static inline u32 determineMemoryType(
  Renderer& renderer,
  VkMemoryRequirements memory_requirements,
  VkMemoryPropertyFlags memory_property_flags)
{
  RendererInternal& ri = *(RendererInternal*)renderer.internal;
  auto& mem_props = ri.physical_device_memory_properties;
  for (u32 i = 0; i < mem_props.memoryTypeCount; i++)
  {
    if (   (memory_requirements.memoryTypeBits & (1 << i))
        && (  (  mem_props.memoryTypes[i].propertyFlags
               & memory_property_flags)
            == memory_property_flags))
    {
      return i;
    }
  }
  return 0;
}

/* ----------------------------------------------------------------------------
 */
static inline VkDeviceMemory allocationToMemory(
  Renderer& renderer,
  RendererHeapAllocation* allocation)
{
  assert(allocation != nullptr);
  RendererInternal& ri = *(RendererInternal*)renderer.internal;
  return
    ri.heaps[allocation->memory_type].blocks[allocation->block_index].memory;
}

/* ----------------------------------------------------------------------------
 */
RendererHeapAllocation* allocate(
  Renderer& renderer,
  u32 memory_type,
  VkMemoryRequirements memory_requirements);

/* ----------------------------------------------------------------------------
 */
void deallocate(Renderer& renderer, RendererHeapAllocation* allocation);

/* ----------------------------------------------------------------------------
 */
b8 beginSingleUseCommandBuffer(
  Renderer& renderer,
  VkCommandBuffer* command_buffer);

/* ----------------------------------------------------------------------------
 */
b8 endSingleUseCommandBuffer(
  Renderer& renderer,
  VkCommandBuffer command_buffer);

}
