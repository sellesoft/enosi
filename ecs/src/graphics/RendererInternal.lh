/*
 *  Renderer info relevant to the backend.
 */

$ require "common"

#include "iro/containers/FixedPool.h"
#include "iro/containers/StackArray.h"
#include "iro/memory/Bump.h"
#include "iro/io/Format.h"
#include "iro/io/IO.h"
#include "math/vec.h"

@@lpp.import "Renderer.lh"

namespace gfx
{

using namespace iro;

/* ----------------------------------------------------------------------------
 */
struct RendererInternal
{
  // Allocates this structure and all of the internal back end data using
  // 'allocator'. This is designed this way to prevent needing to import
  // any of the backend into translation units other than the one it 
  // is defined in. We also have to import platform specific headers, which
  // like to define really annoying stuff that sucks, so I'm quarantining 
  // all of that into its own file.
  //
  // NOTE that this means its IMPORTANT that you do NOT try to create this 
  // type ANY other way than through this function! I would just delete 
  // the default constructor, but I don't respect nor trust C++ enough to do 
  // that.
  static RendererInternal* allocate(mem::Allocator* allocator);

  struct InitParams
  {
    mem::Allocator* allocator;
    mem::LenientBump& temp_allocator;

    Window& window;
  };

  b8 init(const InitParams& params);

  // Debug functions.

  void debugBeginLabel(Color color, String label);
  void debugEndLabel();
  void debugInsertLabel(Color color, String label);
};

}
