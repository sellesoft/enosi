$ local cmn = require "common"

#include "math.h"

#include "iro/io/IO.h"
#include "iro/fs/File.h"
#include "iro/Platform.h"

@@lpp.import "graphics/Font.lh"

@@lpp.import "asset/AssetMgr.lh"

@defFileLogger(font, Debug)

typedef io::StaticBuffer<512> PathBuffer;

namespace gfx
{

/* ----------------------------------------------------------------------------
 */
static b8 codepointInRange(PackRange* range, u32 codepoint)
{
  return codepoint >= range->first_codepoint &&
         codepoint < range->first_codepoint + range->num_chars;
}

/* ----------------------------------------------------------------------------
 */
PackRange* Font::getRangeOfCodepoint(u32 codepoint) const
{
  if (data->num_ranges == 1)
  {
    if (codepointInRange(data->ranges, codepoint))
      return data->ranges;
    else
      return nullptr;
  }

  for (s32 rangeidx = 0; rangeidx < data->num_ranges; ++rangeidx)
  {
    PackRange* range = data->ranges + rangeidx;
    
    if (codepointInRange(data->ranges, codepoint))
      return range;
  }

  return nullptr;
}

/* ----------------------------------------------------------------------------
 */
b8 Font::getPackedChar(PackedChar* out, u32 codepoint) const
{
  PackRange* range = getRangeOfCodepoint(codepoint);
  if (!range)
    return false;
  getPackedChar(out, range, codepoint);
  return true;
}

/* ----------------------------------------------------------------------------
 */
vec2f Font::getGlyphSize(u32 codepoint) const
{
  PackedChar pc;
  if (!getPackedChar(&pc, codepoint))
    return {};

  return vec2f(pc.x1 - pc.x0, pc.y1 - pc.y0);
}

/* ----------------------------------------------------------------------------
 */
void Font::getPackedChar(
    PackedChar* out, 
    PackRange* range, 
    u32 codepoint) const
{
  *out = *(range->chardata + codepoint - range->first_codepoint);
}

/* ----------------------------------------------------------------------------
 */
s64 Font::writeDataPath(io::IO* io, String name, AssetMgr& assetmgr)
{
  return io::formatv(
    io, assetmgr.getDataDir(), '/', name, ".cmp_font");
}

/* ----------------------------------------------------------------------------
 */
Font* Font::load(
    String name, 
    AssetMgr& assetmgr,
    gfx::Renderer& renderer)
{
  using namespace fs;

  PathBuffer data_path_buf;
  writeDataPath(&data_path_buf, name, assetmgr);

  String data_path = data_path_buf.asStr();

  Asset* existing = assetmgr.findAsset(data_path);
  if (existing != nullptr)
    return (Font*)existing;

  if (!Path::exists(data_path))
  {
    ERROR("attempt to load font '", name, "' but there is no data at "
          "path '", data_path, "'\n");
    return nullptr;
  }

  auto* font = assetmgr.allocateAsset<Font>(data_path);
  if (font == nullptr)
  {
    ERROR("failed to allocate font asset\n");
    return nullptr;
  }

  // Open the compiled data from disk.
  auto compiled_data_file = File::from(data_path, OpenFlag::Read);
  if (isnil(compiled_data_file))
  {
    ERROR("failed to open compiled font data from '", data_path, "'\n");
    return nullptr;
  }

  u64 file_size = compiled_data_file.getInfo().byte_size;
  font->data = (FontData*)mem::stl_allocator.allocate(file_size);

  compiled_data_file.read({(u8*)font->data, file_size});

  FontData* data = font->data;

  // Adjust pointers to point at correct data.
  data->ranges = (PackRange*)(data + 1);

  for (s32 range_idx = 0; range_idx < data->num_ranges; ++range_idx)
  {
    PackRange& range = data->ranges[range_idx];
    range.chardata = 
      (PackedChar*)((u8*)data + (u64)range.chardata);
  }

  INFO("loading font's texture\n");

  // Load the texture.
  font->r_texture.trackNoRef(
    gfx::CompiledTexture::load(name, assetmgr, renderer));
  if (!font->r_texture.isValid())
  {
    ERROR("failed to load font texture\n");
    return nullptr;
  }

  return font;
}

/* ----------------------------------------------------------------------------
 */
b8 FontData::serialize(io::IO* out)
{
  out->write({(u8*)this, offsetof(FontData, ranges)});

  // Write dummy pointer memory to be readjusted when loaded.
  void* dummy = (void*)0xff;
  out->write(&dummy);

  u64 char_data_offset = sizeof(FontData) + num_ranges * sizeof(PackRange);
  
  if (ranges)
  {
    // Serialize the ranges array.
    for (s32 range_idx = 0; range_idx < num_ranges; ++range_idx)
    {
      PackRange& range = ranges[range_idx];

      out->write({(u8*)&range, offsetof(PackRange, chardata)});

      // Store offset to this range's char data array from the beginning 
      // of the data.
      out->write(&char_data_offset);

      char_data_offset += range.num_chars * sizeof(PackedChar);
    }

    // Serialize the char data arrays.
    for (s32 range_idx = 0; range_idx < num_ranges; ++range_idx)
    {
      PackRange& range = ranges[range_idx];

      out->write(
        {
          (u8*)range.chardata, 
          range.num_chars*sizeof(PackedChar)
        });
    }
  }

  return true;
}

}
