$ local cmn = require "common"

$ if IRO_WIN32 then

#define GLAD_GL_IMPLEMENTATION
#define GLAD_WGL_IMPLEMENTATION
#include "graphics/glad/wgl.h"

#include "iro/Platform_Win32.h"
#include "iro/Logger.h"

@lpp.import "Renderer.lh"
@lpp.import "../window/Window.lh"

@lpp.import "../window/Window_win32.lh"

namespace gfx
{

@cmn.defFileLogger(gfx.win32, Info)

// ref: https://www.khronos.org/opengl/wiki/Creating_an_OpenGL_Context_(WGL)
b8 rendererPlatformInit(Window* window)
{
  HDC   prev_hdc = wglGetCurrentDC();
  HGLRC prev_rc  = wglGetCurrentContext();

  PIXELFORMATDESCRIPTOR dummy_pfd = 
  {
    sizeof(PIXELFORMATDESCRIPTOR),
    1,
      PFD_DRAW_TO_WINDOW
    | PFD_SUPPORT_OPENGL
    | PFD_DOUBLEBUFFER,
    PFD_TYPE_RGBA,
    32, // Color depth of framebuffer.
    0, 0, 0, 0, 0, 0,
    0,
    0,
    0,
    0, 0, 0, 0,
    24, // Number of bits for depthbuffer.
    8,  // Number of bits for stencil buffer.
    0,  // Number of aux buffers in the framebuffer.
    PFD_MAIN_PLANE,
    0,
    0, 0, 0,
  };

  int dummy_format = 
    ChoosePixelFormat(win32.dummy_window_device_handle, &dummy_pfd);
  if (dummy_format == 0)
    return ERROR_WIN32("failed to choose a dummy pixel format");

  if (!SetPixelFormat(
      win32.dummy_window_device_handle, dummy_format, &dummy_pfd))
    return ERROR_WIN32("failed to set dummy pixel format");

  HGLRC h_wgl_dummy_context = 
    wglCreateContext(win32.dummy_window_device_handle);
  if (!h_wgl_dummy_context)
    return ERROR_WIN32("failed to create wgl context");

  wglMakeCurrent(win32.dummy_window_device_handle, h_wgl_dummy_context);

	int backend_version = gladLoaderLoadWGL(win32.dummy_window_device_handle);
  if (backend_version == 0)
    return ERROR("failed to load WGL\n");

  INFO("loaded WGL ",
    GLAD_VERSION_MAJOR(backend_version),
    ".", GLAD_VERSION_MINOR(backend_version), "\n");

#if ECS_DEBUG
  gladInstallWGLDebug();
#endif 

  // Delete dummy context.
  wglMakeCurrent(prev_hdc, prev_rc);
  wglDeleteContext(h_wgl_dummy_context);

  auto h_window = (HWND)window->handle;
  auto h_context = (HDC)window->context;

  // Set pixel format for device context.
  int format;
  UINT format_count = 0;
  PIXELFORMATDESCRIPTOR pfd;
  const int format_attr[] = 
  {
    WGL_DRAW_TO_WINDOW_ARB, GL_TRUE,
    WGL_SUPPORT_OPENGL_ARB, GL_TRUE,
    WGL_DOUBLE_BUFFER_ARB,  GL_TRUE,
    WGL_PIXEL_TYPE_ARB,     WGL_TYPE_RGBA_ARB,
    WGL_COLOR_BITS_ARB,     24,
    WGL_DEPTH_BITS_ARB,     24,
    WGL_STENCIL_BITS_ARB,   8,
    0,
  };

  if (!wglChoosePixelFormatARB(
        h_context, 
        format_attr, 
        0, 
        1, 
        &format, 
        &format_count))
    return ERROR_WIN32("failed to choose pixel format");

  if (format == 0)
    return ERROR_WIN32("failed to find a pixel format");

  if (!DescribePixelFormat(h_context, format, sizeof(pfd), &pfd))
    return ERROR_WIN32("failed to describe pixel format");

  if (!SetPixelFormat(h_context, format, &pfd))
    return ERROR_WIN32("failed to set pixel format");

  // Create and enable the actual render context.
  int context_attr[] = 
  {
    WGL_CONTEXT_MAJOR_VERSION_ARB, 4,
    WGL_CONTEXT_MINOR_VERSION_ARB, 6,
    WGL_CONTEXT_LAYER_PLANE_ARB, 0,
    WGL_CONTEXT_FLAGS_ARB,
      WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB
#if ENOSI_DEBUG
    | WGL_CONTEXT_DEBUG_BIT_ARB
#endif
    ,
    WGL_CONTEXT_PROFILE_MASK_ARB, WGL_CONTEXT_CORE_PROFILE_BIT_ARB,
    0,
  };

  void* opengl_context = 
    wglCreateContextAttribsARB(h_context, 0, context_attr);
  if (opengl_context == nullptr)
    return ERROR_WIN32("failed to create wgl opengl context");

  wglMakeCurrent(h_context, (HGLRC)opengl_context);

  UpdateWindow(h_window);

  return true;
}

b8 rendererPlatformSwapBuffers(Window* window)
{
  if (!SwapBuffers((HDC)window->context))
    return ERROR_WIN32("failed to swap buffers");
  return true;
}

}

$ end -- if IRO_WIN32
