$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "ui/UI.lh"
@@lpp.import "Engine.lh"
@@lpp.import "Engine.events.lh"
@@lpp.import "graphics/CompiledShader.lh"
@@lpp.import "graphics/Renderer.lh"
@@lpp.import "window/Window.lh"
@@lpp.import "window/Window.events.lh"
@@lpp.import "math/util.h"
@@lpp.import "game/client/Client.lh"

#include "iro/Logger.h"
#include "iro/containers/SmallArray.h"

$ require "Log"

using namespace iro;

namespace ui
{

@log.ger(ui, Info)

/* ----------------------------------------------------------------------------
 */
b8 UI::init(const InitParams& params)
{
  renderer = &params.renderer;

  if (!frame_allocator.init())
    return ERROR("failed to initialize frame allocator\n");

  if (!params.loader.load(&pipeline_defref, "assets/shaders/UI"_str))
    return ERROR("failed to load UI pipeline def\n");

  if (!pipeline.init(*renderer, c_PushConstantSize, true, *pipeline_defref))
    return ERROR("failed to initialize UI pipeline\n");

  if (!vertex_buffer.init(
        sizeof(gfx::Vertex) * c_MaxVertices,
        gfx::Buffer::Usage::VertexBuffer,
        gfx::Buffer::MemoryProperty::DeviceMappable,
        gfx::Buffer::MappingBehavior::Occasional))
    return ERROR("failed to initialize ui vertex buffer\n");

  if (!index_buffer.init(
        sizeof(gfx::Index) * c_MaxIndices,
        gfx::Buffer::Usage::IndexBuffer,
        gfx::Buffer::MemoryProperty::DeviceMappable,
        gfx::Buffer::MappingBehavior::Occasional))
    return ERROR("failed to initialize ui index buffer\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
void UI::beginFrame(const FrameParams& params)
{
  assert(!in_frame && 
    "attempt to begin UI frame while one is already in progress");

  in_frame = true;

  frame_input = params.input;
  viewport = params.viewport;

  // Reset draw info counts.
  vertex_count = 0;
  index_count = 0;
}

}
