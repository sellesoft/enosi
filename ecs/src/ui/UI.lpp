$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "ui/UI.lh"
@@lpp.import "Engine.lh"
@@lpp.import "Engine.events.lh"
@@lpp.import "graphics/CompiledShader.lh"
@@lpp.import "graphics/Renderer.lh"
@@lpp.import "window/Window.lh"
@@lpp.import "window/Window.events.lh"
@@lpp.import "math/util.h"
@@lpp.import "game/client/Client.lh"

#include "iro/Logger.h"
#include "iro/containers/SmallArray.h"

$ require "Log"

using namespace iro;

namespace ui
{

@log.ger(ui, Info)

/* ----------------------------------------------------------------------------
 */
static void pushConstantFromTransform(
  Rect viewport,
  gfx::Renderer& renderer,
  const mat3x2& transform)
{
  f32 push_constant[16];
  transform.toMat4(push_constant);

  f32 scale_x = 2.0f / viewport.w;
  f32 scale_y = 2.0f / viewport.h;
  push_constant[0] *= scale_x;
  push_constant[1] *= scale_x;
  push_constant[4] *= scale_y;
  push_constant[5] *= scale_y;

  push_constant[12] = push_constant[2] * scale_x;
  push_constant[13] = push_constant[6] * scale_y;
  push_constant[2] = 0.0f;
  push_constant[6] = 0.0f;

  renderer.pushConstant(push_constant, UI::PushConstantSize);
}

/* ----------------------------------------------------------------------------
 */
void UI::destroyItem(Item* item)
{
  assert(item != root);

  if (hovered == item)
    hovered = nullptr;

  if (focused == item)
    focused = nullptr;

  destroyItemChildren(item);
    
  item->cleanup();
  item_tree.remove(item->node);
  
  mem::stl_allocator.free(item);
}

/* ----------------------------------------------------------------------------
 */
void UI::destroyItemChildren(Item* item)
{
  while (ItemNode* child = item->node->first_child)
    destroyItem(child->data);
}

/* ----------------------------------------------------------------------------
 */
void UI::beginItem(Item* item)
{
  item_stack.push(item);
}

/* ----------------------------------------------------------------------------
 */
void UI::endItem()
{
  assert(item_stack.head->data != root && "attempt to end the root item!");
  item_stack.pop();
}

/* ----------------------------------------------------------------------------
 */
b8 UI::init(InitParams& params)
{
  assetmgr      = &params.assetmgr;
  renderer      = &params.renderer;
  viewport      = params.viewport;
  white_texture = params.white_texture;

  if (!item_stack.init())
    return ERROR("failed to init item stack\n");
  if (!item_tree.init())
    return ERROR("failed to init item tree\n");
  if (!drawcmds.init())
    return ERROR("failed to init drawcmd pool\n");
  if (!free_drawcmds.init())
    return ERROR("failed to init free drawcmds list\n");
  if (!free_drawcmds_vertex_sorted.init())
    return ERROR("failed to init vertex sorted free drawcmds array\n");
  if (!free_drawcmds_index_sorted.init())
    return ERROR("failed to init index sorted free drawcmds array\n");

  if (!params.loader.load(&pipeline_defref, "assets/shaders/UI"_str))
    return ERROR("failed to load ui pipeline def\n");
  
  if (!pipeline.init(*renderer, PushConstantSize, true, *pipeline_defref))
    return ERROR("failed to initialize ui pipeline\n");

  if (!vertex_buffer.init(*renderer, nullptr,
        sizeof(gfx::Vertex) * MaxVertices,
        gfx::Buffer::Usage::VertexBuffer,
        gfx::Buffer::MemoryProperty::DeviceMappable,
        gfx::Buffer::MappingBehavior::Occasional))
    return ERROR("failed to init ui vertex buffer\n");

  if (!index_buffer.init(*renderer, nullptr,
        sizeof(gfx::Index) * MaxIndices,
        gfx::Buffer::Usage::IndexBuffer,
        gfx::Buffer::MemoryProperty::DeviceMappable,
        gfx::Buffer::MappingBehavior::Occasional))
    return ERROR("failed to init ui index buffer\n");

  // NOTE(sushi) I do not like making root manually here but in order
  //             to not have to put a branch in make just to handle this
  //             case we have to.
  root = mem::stl_allocator.construct<Item>();
  root->node = &item_tree.add(root);
  root->visible_start = {0,0};
  root->visible_size = root->size;
  root->name = "root"_str;
  root->setDirty();

  @ui.layout(root, 
  | pos: 0 0
  | size: $(viewport.size()))

  item_stack.push(root);

  vertex_next = index_next = 0;

  dbg_cmd = drawcmds.add();

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 UI::update(const UpdateParams& params)
{
  TRACE("ui update\n");

  // Setup this frame's input state. Note that this input state may 
  // change throughout an update, eg. by an Item consuming char inputs (like
  // InputText).
  frame_input = params.input;

  const InputState& input = params.input;
  gfx::Renderer& renderer = *this->renderer;

  if (item_stack.head->data != root)
    return ERROR("items left on stack!\n");

  renderer.bindPipeline(pipeline);
  renderer.setViewport(viewport.pos(), viewport.size());
  renderer.setScissor(viewport.pos(), viewport.size());
  renderer.bindVertexBuffer(vertex_buffer);
  renderer.bindIndexBuffer(index_buffer);
  pushConstantFromTransform(viewport, renderer,
    mat3x2::createTransform({0.f, 0.f}, 0.f));

  TRACE("  mapping buffers\n");
  vertex_buffer.map(renderer);
  index_buffer.map(renderer);

  temp_alloc.init();

  auto base_transform =
    mat3x2::createTransform({0.f,0.f}, 0.f);

  DeferredDrawCmdList top_most_drawcmds;
  DrawCmdList debug_drawcmds;

  cursor_track[cursor_track_pos] = frame_input.getCursorPos();
  cursor_track_pos = (cursor_track_pos + 1) % cursor_track_len;

  dbg_cmd->counts_used = {};

  UpdateTreeContext ctx = 
  {
    .top_most_drawcmds = &top_most_drawcmds,
    .current_transform = &base_transform,
    .debug_cmds = &debug_drawcmds,
  };

  updateTree(root->node, ctx);

  // Draw top most drawcmds with no scissor.
  renderer.setScissor(viewport.pos(), viewport.size());
  emitDrawCmds(top_most_drawcmds);

  pushConstantFromTransform(viewport, renderer,
    mat3x2::createTransform({0.f, 0.f}, 0.f));

  for (ReportedDrawCmd& ddc : debug_drawcmds)
    emitDrawCmd(ddc.drawcmd, nullptr, {});

  if (hovered != ctx.hovered)
  {
    if (hovered != nullptr)
      hovered->flags.set(ItemFlag::LostHover);
    ctx.hovered->flags.set(ItemFlag::GainedHover);
  }
  hovered = ctx.hovered;

  if (input.wasMouseButtonPressed(MouseButton::Left))
  {
    Item* prev_focused = focused;
    focused = hovered;

    if (prev_focused != hovered)
    {
      hovered->flags.set(ItemFlag::GainedFocus);
      if (prev_focused)
        prev_focused->flags.set(ItemFlag::LostFocus);
    }
  }

  // for (s32 i = 0; i < cursor_track_len - 1; ++i)
  // {
  //   s32 idx = (cursor_track_pos + i) % cursor_track_len;
  //
  //   auto [vp, ip] = 
  //     dbg_cmd->realloc(this, dbg_cmd->counts_used + gfx::putLineCounts());
  //
  //   gfx::putLine(
  //     vp, ip,
  //     &dbg_cmd->counts_used,
  //     cursor_track[idx],
  //     cursor_track[(idx+1) % cursor_track_len],
  //     2.f,
  //     {0,0,255,255});
  // }

  if (dbg_cmd->counts_used.y != 0)
  {
    renderer.bindTexture(white_texture);
    
    renderer.draw(
      dbg_cmd->index_offset,
      dbg_cmd->counts_used.y,
      dbg_cmd->vertex_offset);
  }

  temp_alloc.deinit();

  TRACE("  unmapping buffers\n");
  vertex_buffer.flush(renderer, 0, gfx::Buffer::FLUSH_WHOLE_BUFFER);
  index_buffer.flush(renderer, 0, gfx::Buffer::FLUSH_WHOLE_BUFFER);
  vertex_buffer.unmap(renderer);
  index_buffer.unmap(renderer);

  // Clear the inputs incase something outside of update tries to use them.
  frame_input.clear();

  return true;
}

/* ----------------------------------------------------------------------------
 */
static ItemNode* findStaticSizedParent(
    UI* ui,
    ItemNode* node,
    ItemNode* child)
{
  if (node == ui->root->node)
    return node;

  Item* item = node->data;

  using namespace item_layout_typedefs;

  if (child == nullptr)
    return findStaticSizedParent(ui, node->parent, node);
  if (!item->layout.sizing.testAny<
        Sizing::AutoX, Sizing::AutoY, Sizing::Flex>())
    return node;
  else
    return findStaticSizedParent(ui, node->parent, node);
}

/* ----------------------------------------------------------------------------
 */
void UI::updateTree(ItemNode* node, UpdateTreeContext& ctx)
{
  // INFO("update ", node, " (", node->data->name, ")\n");
  // SCOPED_INDENT;

  using namespace item_layout_typedefs;

  gfx::Renderer& renderer = *this->renderer;

  Item* item = node->data;
  Item* parent = (node->parent? node->parent->data : nullptr);

  const ItemLayout& layout = item->layout;
  const ItemLayout& playout = parent->layout;

  if (layout.display.test(Display::Hidden))
    return;

  renderer.debugBeginLabel(vec4f(0.5f, 0.2f, 0.2f, 1.f),
    notnil(item->name) ? item->name : "unnamed ui item"_str);
  defer { renderer.debugEndLabel(); };

  vec2f init_scroll = item->scroll;
  item->scroll = min(vec2f(0.f,0.f), max(item->scroll, item->max_scroll));
  if (init_scroll != item->scroll)
    item->setDirty();

  // Reset frame flags.

  if (hovered == item)
    item->flags.set(ItemFlag::Hovered);

  if (focused == item)
    item->flags.set(ItemFlag::Focused);

  // If the item was marked dirty, walk up the item tree to find the 
  // first parent whose branch we can safely reevaluate minimally.
  if (item->isDirty())
  {
    item->flags.unset(ItemFlag::Dirty);
    // TODO(sushi) 'findStaticSizedParent' sucks iirc as it will sometimes
    //             walk up to a branch that it doesn't need to. I don't 
    //             recall any replicable case rn but I DO remember seeing 
    //             it suck while debugging one day soooo figure that out 
    //             thanks!
    ItemNode* sspar = findStaticSizedParent(this, node, nullptr);

    // Relayout this branch.
    evalItemBranch(sspar, nullptr);
  }

  if (ctx.current_transform != nullptr)
    item->pos_screen = 
      ctx.current_transform->getTranslation() + item->pos_local;
  else
    item->pos_screen = {};
                  

  // Update the item. This is where it draws its contents and also handles
  // any input that it needs to.
  ItemUpdateContext item_update_context = 
  {
    .ui = *this,
    .item = *item,
    .input = frame_input,
  };

  item->update(item_update_context);

  item->flags.unset(ItemFlag::Focused);
  item->flags.unset(ItemFlag::GainedFocus);
  item->flags.unset(ItemFlag::LostFocus);
  item->flags.unset(ItemFlag::Hovered);
  item->flags.unset(ItemFlag::GainedHover);
  item->flags.unset(ItemFlag::LostHover);
  item->flags.unset(ItemFlag::Evaluated);

  // Compute the scissoring of the item based on the parent's overflow.
  // TODO(sushi) parts of this could prob be cached.
  vec2f scoff;
  vec2f scsiz;

  if (parent && playout.overflow != Overflow::Visible)
  {
    vec2f cpos = item->pos_screen + layout.margin.tl();
    vec2f csiz = max(item->getMarginedArea(), item->calcVisualArea());
    vec2f cext = cpos + csiz;

    vec2f ppos =
      parent->pos_screen +
      parent->calcContentStart(playout.margin, playout.border);

    ppos = max(ppos, parent->visible_start);

    vec2f psiz =
      parent->calcContentArea(
        playout.margin,
        playout.border,
        parent->visible_size);

    vec2f pext = 
      min(ppos + psiz, parent->visible_start + parent->visible_size);

    scoff = max(vec2f(0,0), max(ppos, min(cpos, pext)));

    vec2f br = max(ppos, min(cext, pext));

    scsiz = max(vec2f(0,0), br - scoff);
    br = max(ppos, min(cext, pext));

    item->visible_start = max(vec2f(0,0), max(ppos, min(cpos, pext)));
    item->visible_size = br - item->visible_start;
  }
  else
  {
    scoff = max(vec2f(0,0), item->pos_screen);
    scsiz =
      max(
        vec2f(0,0),
        min(
          item->pos_screen + item->size,
          vec2f(viewport.size())));
    item->visible_start = item->pos_screen;
    item->visible_size = item->size;
  }

  // TODO(sushi) we can maybe pull some of these conditions into the
  //             calculations above to stop doing work much earlier.
  b8 item_in_view =
    scoff.x < viewport.w    && scoff.y < viewport.h    &&
    scsiz.x != 0.f          && scsiz.y != 0.f          &&
    scoff.x + scsiz.x > 0.f && scoff.y + scsiz.y > 0.f;

  // If the item is visible, then render its stuff and update its children
  // and stuuuufff.
  if (item_in_view)
  {
    const mat3x2& current_transform = *ctx.current_transform;

    vec2f item_margined_pos = item->pos_local   + layout.margin.tl();
    vec2f item_bordered_pos = item_margined_pos + layout.border.tl();
    vec2f item_padded_pos   = item_bordered_pos + layout.padding.tl();

    mat3x2 item_screen_transform = 
      current_transform.mul(
        mat3x2::createTransform(item->pos_local, 0.f));

    mat3x2 item_margined_transform = 
      current_transform.mul(mat3x2::createTransform(item_margined_pos, 0.f));

    mat3x2 item_bordered_transform = 
      current_transform.mul(mat3x2::createTransform(item_bordered_pos, 0.f));

    mat3x2 item_padded_transform = 
      current_transform.mul(mat3x2::createTransform(item_padded_pos, 0.f));

    ItemSpace current_space = ItemSpace::Invalid;

    auto pushTransform = [&](ItemSpace desired_space, b8 force = false)
    {
      assert(desired_space != ItemSpace::Invalid);

      if (!force && desired_space == current_space)
        return;

      switch (current_space = desired_space)
      {
      case ItemSpace::Padded:
        pushConstantFromTransform(viewport, renderer, item_padded_transform);
        break;
      case ItemSpace::Bordered:
        pushConstantFromTransform(viewport, renderer, item_bordered_transform);
        break;
      case ItemSpace::Margined:
        pushConstantFromTransform(viewport, renderer, item_margined_transform);
        break;
      }
    };

    pushTransform(ItemSpace::Bordered);
    renderer.setScissor(scoff, scsiz);

    pushTransform(ItemSpace::Margined);

    DrawCmdLists drawcmd_lists;

    // Ask the Item if it has any drawcmds.
    item->reportDrawCmds(*this, drawcmd_lists);

    for (ReportedDrawCmd& cmd : drawcmd_lists.top_most)
    {
      DeferredDrawCmd* deferred_cmd = ctx.top_most_drawcmds->push();
      deferred_cmd->drawcmd = cmd.drawcmd;
      switch (cmd.space)
      {
      case ItemSpace::Padded:
        deferred_cmd->transform = item_padded_transform;
        break;
      case ItemSpace::Bordered:
        deferred_cmd->transform = item_bordered_transform;
        break;
      case ItemSpace::Margined:
        deferred_cmd->transform = item_margined_transform;
        break;
      default:
        assert(!"unhandled ItemSpace");
        break;
      }
    }

    // Emit pre-children commands.
    for (ReportedDrawCmd& cmd : drawcmd_lists.pre_children)
    {
      pushTransform(cmd.space);
      emitDrawCmd(cmd.drawcmd, item, vec4f(scoff, scsiz));
    }

    UpdateTreeContext child_ctx = ctx.inherit(&item_screen_transform);

    // Update child branches if the Item wants us to.
    if (item->shouldPlaceChildren())
    {
      for (ItemNode* child = node->last_child; child; child = child->prev)
        updateTree(child, child_ctx);
    }

    if (child_ctx.hovered == nullptr)
    {
      vec2f cursor_pos = frame_input.getCursorPos();

      if (math::pointInRect(
            cursor_pos,
            item->visible_start,
            item->calcVisualArea()) ||
            item->onHitTest(cursor_pos - item->pos_screen))
        ctx.hovered = item;
    }
    else
      ctx.hovered = child_ctx.hovered;

    // Children likely changed scissor, so we have to set it back.
    renderer.setScissor(scoff, scsiz);

    // Emit post-children commands.
    for (ReportedDrawCmd& cmd : drawcmd_lists.post_children)
    {
      pushTransform(cmd.space);
      emitDrawCmd(cmd.drawcmd, item, vec4f(scoff, scsiz));
    }

    pushTransform(ItemSpace::Bordered);
  }

  // if (item->isHovered(this, Item::HoverKind::Child) && 
  //     item->max_scroll.y != 0.f && input.scroll != 0.f)
  // {
  //   item->scroll.y = 
  //     min(0.f, max(item->max_scroll.y, item->scroll.y + 10 * input.scroll));
  //   item->setDirty();
  // }
}

/* ----------------------------------------------------------------------------
 */
void UI::evalItemBranch(ItemNode* node, FlexContext* parent_flex)
{
  using namespace item_layout_typedefs;

  FlexContext flex = {};

  SmallArray<Item*, 16> already_evaluated;
  if (!already_evaluated.init())
  {
    ERROR("failed to initialize already evaluated array\n");
    return;
  }
  defer { already_evaluated.deinit(); };

  Item* item = node->data;
  Item* parent = (node->parent? node->parent->data : nullptr);

  if (item == eval_break)
  {
    eval_break = nullptr;
    platform::debugBreak();
  }

  item->flags.unset(ItemFlag::Dirty);

  vec2f area = item->getMarginedArea();

  ItemLayout& layout = item->layout;

  ItemLayout::SizingFlags sizing = layout.sizing;
  ItemLayout::DisplayFlags display = layout.display;

  Rect bounds = layout.bounds;

  b8 hauto = sizing.test(Sizing::AutoY);
  b8 wauto = sizing.test(Sizing::AutoX);

  if (!hauto)
  {
    if (sizing.test(Sizing::Flex) &&
        parent_flex &&
        parent_flex->is_container &&
        !parent_flex->disp_horizontal)
    {
      item->size.x = 
        bounds.h / parent_flex->ratio_sum * parent_flex->effective_size;

      if (parent_flex->n_ceils)
      {
        item->size.y = ceil(item->size.y);
        parent_flex->n_ceils -= 1;
      }
      else
      {
        item->size.y = floor(item->size.y);
      }
    }
    else if (sizing.test(Sizing::PercentY))
    {
      if (bounds.h < 0.f)
        ERROR("PercentY is set but height (", bounds.h, ") is "
              "negative\n");
      else if (parent->layout.sizing.test(Sizing::PercentY))
        item->size.y = bounds.h / 100.f * parent->getPaddedHeight();
      else if (parent->layout.bounds.h >= 0.f)
        item->size.y = bounds.h / 100.f * 
                       parent->getPaddedStyleHeight();
      else
      {
        ERROR("PercentY is set but this item's height is not explicitly "
              "sized\n");
        hauto = true;
      }
    }
    else
      item->size.y = 
        bounds.h + layout.margin.hsum() + layout.border.hsum();
  }
  else
    item->size.y = 0.f;

  if (!wauto)
  {
    if (sizing.test(Sizing::Flex) &&
        parent_flex && 
        parent_flex->is_container &&
        parent_flex->disp_horizontal)
    {
      item->size.x = 
        bounds.w / parent_flex->ratio_sum * parent_flex->effective_size;

      if (parent_flex->n_ceils)
      {
        item->size.x = ceil(item->size.x);
        parent_flex->n_ceils -= 1;
      }
      else
      {
        item->size.x = floor(item->size.x);
      }
    }
    else if (sizing.test(Sizing::PercentX))
    {
      if (bounds.w < 0.f)
        ERROR("PercentX is set but width set (", bounds.w, ") is "
              "negative\n");
      else if (parent->layout.sizing.test(Sizing::PercentX))
        item->size.x = bounds.w / 100.f * parent->getPaddedWidth();
      else if (parent->layout.bounds.w >= 0.f)
        item->size.x = bounds.w / 100.f * parent->getPaddedStyleWidth();
      else
      {
        ERROR("PercentX is set but this item's parent's width is not "
              "explicitly sized\n");
        wauto = true;
      }
    }
    else
      item->size.x = 
        bounds.w + layout.margin.hsum() + layout.border.hsum();
  }
  else
    item->size.x = 0;
  
  // Determine info needed to flex children if this is a flex container.
  if (display.test(Display::Flex))
  {
    b8 is_horizontal = layout.display.test(Display::Horizontal);

    flex.is_container = true;
    flex.effective_size = 
      is_horizontal? item->getPaddedWidth() : item->getPaddedHeight();
    flex.ratio_sum = 0.f;
    flex.disp_horizontal = is_horizontal;

    if (is_horizontal && wauto)
    {
      ERROR("display set to flex and horizontal, but sizing is set to auto "
            "width\n");
      return;
    }
    else if (!is_horizontal && hauto)
    {
      ERROR("display set to flex and vertical, but sizing is set to auto "
            "height\n");
      return;
    }

    // Perform a first pass to figure out the ratio sum.
    for (ItemNode* cnode = node->first_child; cnode; cnode = cnode->next)
    {
      Item* child = cnode->data;

      if (child->layout.sizing.test(Sizing::Flex))
      {
        flex.ratio_sum +=
          (is_horizontal? child->layout.bounds.w : child->layout.bounds.h);
      }
      else
      {
        if ((is_horizontal && child->layout.sizing.test(Sizing::AutoX)) ||
            child->layout.sizing.test(Sizing::AutoY))
        {
          // If a child has automatic sizing we can still support using it in
          // flex containers by evaluating it early. When we do this we need
          // to tell the main child eval loop later that it has already been
          // evaluated and we do so by storing the child in already_evaluated.
          evalItemBranch(cnode, &flex);
          flex.effective_size -=
            (is_horizontal? child->size.x : child->size.y);
          already_evaluated.push(child);
        }
        else if (is_horizontal)
        {
          if (child->layout.sizing.test(Sizing::PercentX))
          {
            flex.effective_size -=
              child->layout.bounds.w / 100.f * item->size.x;
          }
          else
          {
            flex.effective_size -=
              child->layout.bounds.w + child->layout.margin.hsum();
          }
        }
        else
        {
          if (child->layout.sizing.test(Sizing::PercentY))
          {
            flex.effective_size -=
              child->layout.bounds.h / 100.f * item->size.y;
          }
          else
          {
            flex.effective_size -=
              child->layout.bounds.h + child->layout.margin.vsum();
          }
        }
      }
    }

      // Calculate how many item sizes will need to be ceil'd rather than 
    // floored to properly fit inside the container.
    f32 floored_sum = 0.f;
    for (ItemNode* cnode = node->first_child; cnode; cnode = cnode->next)
    {
      Item* child = cnode->data;

      if (child->layout.sizing.test(Sizing::Flex))
      {
        floored_sum +=
          floor(
           (is_horizontal
            ? child->layout.bounds.w
            : child->layout.bounds.h)
          / flex.ratio_sum * flex.effective_size);
      }
    }
    flex.n_ceils = flex.effective_size - floored_sum;
  }

  // Allow the Item to adjust its size.
  Item::AdjustedSize adjusted_size = item->adjustItemSize(*this, wauto, hauto);

  if (adjusted_size.disable_auto_x)
    wauto = false;
  if (adjusted_size.disable_auto_y)
    hauto = false;

  // Call evaluate callback.
  item->evaluate(*this);

  // Evaluate children if the Item wants us to.
  vec2f max_extent = {};
  if (item->shouldPlaceChildren())
  {
    vec2f cursor = 
      layout.margin.tl() + 
      layout.padding.tl() +
      layout.border.tl();

    // Allow widgets to adjust where child placement should begin, eg. in the
    // case of a collapsing header. By default this doesn't move the cursor.
    cursor = item->adjustCursorStart(*this, cursor);

    // Adjust cursor by scroll.
    // TODO(sushi) apply scroll translation in the shader instead.
    cursor += item->scroll;

    // Keep stuff aligned to pixels nicely.
    cursor = floor(cursor);

    ItemNode* it = 
      (display.test(Display::Reverse)
       ? node->last_child
       : node->first_child);

    // Keep track of our index into the already_evaluated array to properly
    // skip children evaluated early in flex logic.
    u32 aeidx = 0;
    while (it)
    {
      Item* child = it->data;
      ItemLayout& clayout = child->layout;

      if (clayout.display.test(Display::Hidden))
      {
        assert(it != it->next);
        it = 
          display.test(Display::Reverse)
          ? it->prev 
          : it->next;
        continue;
      }

      if (already_evaluated.len < aeidx && already_evaluated[aeidx] == child)
      {
        aeidx += 1;
      }
      else
      {
        // Evaluate the child branch.
        evalItemBranch(child->node, &flex);
      }

$ local function placeAnchorSwitch()
      switch (clayout.anchor)
      {
      case Anchor::TopLeft:
        child->pos_local.x += clayout.bounds.x;
        child->pos_local.y += clayout.bounds.y;
        break;

      case Anchor::TopRight:
        if (!wauto)
          child->pos_local.x = 
            item->getPaddedWidth() - child->size.x - clayout.bounds.x;
        else
          ERROR("item's anchor was specified as TopRight but the item's "
                "width is set to auto\n");
        child->pos_local.y += clayout.bounds.y;
        break;

      case Anchor::BottomRight:
        if (!wauto)
          child->pos_local.x = 
            item->getPaddedWidth() - child->size.x - clayout.bounds.x;
        else
          ERROR("item's anchor was specified as BottomRight but the item's "
                "width is set to auto\n");
        if (!hauto)
          child->pos_local.y = 
            item->getPaddedHeight() - child->size.y - clayout.bounds.y;
        else
          ERROR("item's anchor was specified as BottomRight but the item's "
                "height is set to auto\n");
        break;

      case Anchor::BottomLeft:
        child->pos_local.x += clayout.bounds.x;

        if (!hauto)
          child->pos_local.y = 
            item->getPaddedHeight() - child->size.y - clayout.bounds.y;
        else
          ERROR("item's anchor was specified as BottomRight but the item's "
                "height is set to auto\n");
        break;
      }
$ end

      switch (clayout.positioning)
      {
      case Positioning::Static:
        if (display.test(Display::Horizontal))
        {
          if (!hauto)
          {
            child->pos_local.y = 
              cursor.y +
              clayout.alignment.y * 
              (item->getPaddedHeight() - child->size.y);
          }
          else
          {
            child->pos_local.y = cursor.y;
          }
          child->pos_local.x = cursor.x;
        }
        else
        {
          if (!wauto)
          {
            child->pos_local.x = 
              cursor.x + 
              clayout.alignment.x * 
              (item->getPaddedWidth() - child->size.x);
          }
          else
          {
            child->pos_local.x = cursor.x;
          }
          child->pos_local.y = cursor.y;
        }

        if (display.test(Display::Horizontal))
          cursor.x = child->pos_local.x + child->size.x;
        else
          cursor.y = child->pos_local.y + child->size.y;

        @placeAnchorSwitch
        break;

      default:
        assert(!"handle other positionings :)");
      }

      child->pos_local = floor(child->pos_local);

      if (wauto)
        item->size.x = max(item->size.x, child->pos_local.x + child->size.x);
      if (hauto)
        item->size.y = max(item->size.y, child->pos_local.y + child->size.y);

      max_extent = 
        max(max_extent, child->pos_local + child->size - item->scroll);

      assert(it != it->next);
      it = 
        display.test(Display::Reverse)
        ? it->prev
        : it->next;
    }
  }

  if (wauto)
    item->size.x += 
      layout.padding.right() + layout.margin.right() + layout.border.right();

  if (hauto)
    item->size.y += 
      layout.padding.bottom() + layout.margin.bottom() + 
      layout.border.bottom();

  item->max_scroll = 
    min(vec2f(0,0),
      item->size - max_extent - 
      layout.padding.br() -
      layout.border.br() - 
      layout.margin.br());

  item->size = max(item->size, item->getMinSize(*this));

  item->pos_local = floor(item->pos_local);

  item->flags.set(ItemFlag::Evaluated);
}

/* ----------------------------------------------------------------------------
 */
void UI::emitDrawCmd(
    DrawCmd* drawcmd, 
    Item* item, 
    vec4f current_scissor)
{
  if (drawcmd->counts_used.y == 0)
    return;

  b8 drawcmd_scissor = 
    item != nullptr && 
    drawcmd->scissor != vec4f(-1.f, -1.f, -1.f, -1.f);

  if (drawcmd_scissor)
  {
    f32 scissor_x = max(0.f, item->pos_screen.x + drawcmd->scissor.x);
    f32 scissor_y = max(0.f, item->pos_screen.y + drawcmd->scissor.y);
    f32 scissor_w = min(item->size.x, drawcmd->scissor.z);
    f32 scissor_h = min(item->size.y, drawcmd->scissor.w);

    f32 ext_x = scissor_x + scissor_w;
    f32 ext_y = scissor_y + scissor_h;

    scissor_x = max(scissor_x, current_scissor.x);
    scissor_y = max(scissor_y, current_scissor.y);
    scissor_w = 
      min(
        scissor_w, 
        max(0.f, current_scissor.x + current_scissor.z - scissor_x));
    scissor_h = 
      min(
        scissor_h,
        max(0.f, current_scissor.y + current_scissor.w - scissor_y));

    if (scissor_w == 0 || scissor_h == 0)
      return;

    renderer->setScissor(
      vec2i(scissor_x, scissor_y), vec2i(scissor_w, scissor_h));
  }

  if (notnil(drawcmd->tex))
  {
    TRACE("  drawcmd has tex ", drawcmd->tex.index, "\n");
    renderer->bindTexture(drawcmd->tex);
  }
  else
  {
    TRACE("  drawcmd has no tex\n");
    renderer->bindTexture(white_texture);
  }

  TRACE("  pushing draw \n",
      "      io: ", drawcmd->index_offset,
      "\n    ic: ", drawcmd->counts_used.y,
      "\n    vo: ", drawcmd->vertex_offset, "\n");

  renderer->draw(
    drawcmd->index_offset,
    drawcmd->counts_used.y,
    drawcmd->vertex_offset);

  if (drawcmd_scissor)
  {
    renderer->setScissor(current_scissor.xy(), current_scissor.zw());
  }
}

/* ----------------------------------------------------------------------------
 */
void UI::emitDrawCmds( DeferredDrawCmdList& drawcmds)
{
  for (DeferredDrawCmd& cmd : drawcmds)
  {
    if (cmd.drawcmd->counts_used.x != 0)
    {
      pushConstantFromTransform(viewport, *renderer, cmd.transform);
    }
    emitDrawCmd(cmd.drawcmd, nullptr, {});
  }
}

}
