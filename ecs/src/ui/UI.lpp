$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "ui/UI.lh"
@@lpp.import "graphics/CompiledShader.lh"
@@lpp.import "graphics/Renderer.lh"
@@lpp.import "graphics/Geo.lh"
@@lpp.import "math/util.h"

#include "iro/Logger.h"
#include "iro/containers/SmallArray.h"

$ require "Log"

using namespace iro;

namespace ui
{

@log.ger(ui, Info)

/* ----------------------------------------------------------------------------
 */
b8 UI::init(InitParams& params)
{
  renderer = &params.renderer;

  if (!frame_allocator.init())
    return ERROR("failed to initialize frame allocator\n");

  if (!params.loader.load(&pipeline_defref, "assets/shaders/UI"_str))
    return ERROR("failed to load UI pipeline def\n");

  if (!pipeline.init(*renderer, c_PushConstantSize, true, *pipeline_defref))
    return ERROR("failed to initialize UI pipeline\n");

  if (!vertex_buffer.init(
        *renderer,
        nullptr,
        sizeof(gfx::Vertex) * c_MaxVertices,
        gfx::Buffer::Usage::VertexBuffer,
        gfx::Buffer::MemoryProperty::DeviceMappable,
        gfx::Buffer::MappingBehavior::Occasional))
    return ERROR("failed to initialize ui vertex buffer\n");

  if (!index_buffer.init(
        *renderer,
        nullptr,
        sizeof(gfx::Index) * c_MaxIndices,
        gfx::Buffer::Usage::IndexBuffer,
        gfx::Buffer::MemoryProperty::DeviceMappable,
        gfx::Buffer::MappingBehavior::Occasional))
    return ERROR("failed to initialize ui index buffer\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
void UI::beginFrame(const FrameParams& params)
{
  assert(!in_frame && 
    "attempt to begin UI frame while one is already in progress");

  in_frame = true;

  frame_input = params.input;
  viewport = params.viewport;

  // Reset draw info counts.
  vertex_count = 0;
  index_count = 0;

  current_layer = frame_allocator.allocateType<Layer>();

  current_layer->groups = frame_allocator.allocateType<Group>();
  current_group = current_layer->groups;

  current_group->bounds = viewport;

  top_layer = current_layer;

  
}

/* ----------------------------------------------------------------------------
 */
void UI::endFrame()
{
  


  frame_allocator.deinit();
}

/* ----------------------------------------------------------------------------
 */
void UI::putQuad(Rect bounds, gfx::Texture texture, Rect uv, Color color)
{
  auto* cmd = frame_allocator.allocateType<QuadDrawCmd>();

  cmd->next = current_group->drawcmds;
  current_group->drawcmds = cmd;

  cmd->texture = texture;
  cmd->bounds = bounds;
  cmd->uv = uv;
  cmd->color = color;
}

/* ----------------------------------------------------------------------------
 */
void UI::putQuad(Rect bounds, gfx::Texture texture, Color color)
{
  putQuad(bounds, texture, Rect::from(0,0,1,1), color); 
}

/* ----------------------------------------------------------------------------
 */
void UI::putQuad(Rect bounds, Color color)
{
  putQuad(bounds, white_texture, color);
}

}
