$ local lpp = require "lpp"
$ local reflect = require "reflect.Reflector"
$ local ui = require "ui.UI"
$ local buffer = require "string.buffer"
$ local Placeable = require "ui.Placeable"
$ local List = require "list"
$ local CGen = require "cgen"
$ local util = require "util"
$ local log = require "logger" ("inspector", Verbosity.Info)
$ local ast = require "reflect.AST"
$ local Processor = require "reflect.Processor"
$ local glob = require "Glob"

#include "math/util.h"

$ local buf = buffer.new()
$ glob"**/*.lh":each(function(path)
$   local result = lpp.import(path)
$   if result then
$     buf:put(result)
$   end
$ end)

$(tostring(buf))

$ local p = Processor.new(buf:get())
$ p:run()

$$$

local formatters = 
{
  vec2i = '"(", %.x, ",", %.y, ")"',
  vec2f = '"(", %.x, ",", %.y, ")"',
  vec4i = '"(", %.x, ",", %.y, ",", %.z, ",", %.w, ")"',
  vec4f = '"(", %.x, ",", %.y, ",", %.z, ",", %.w, ")"',
  b8 = '%? "true" : "false"',
  String = "%",
  TimePoint = "LocalDate(%)"
}

$$$

#undef None

namespace ui
{

const f32 row_height = 13.f;
const f32 nest_indent = 12.f;
const f32 row_text_padding = 5.f;
const f32 spacing_between_name_and_value = 10.f;
const Color even_row_color = 0x08141eff;
const Color odd_row_color = 0x14281eff;

static Logger logger = 
  Logger::create("ui.inspector"_str, Logger::Verbosity::Info);

/* ============================================================================
 */
struct TreeMemberWorkingData
{
  u64 idx = 0;
  TextRenderer name_render = {};
  TextRenderer value_render = {};

  io::StaticBuffer<64> value_buffer = {};
};

/* ============================================================================
 */
struct TreeWorkingData
{
  typedef DLinkedPool<TreeMemberWorkingData> MemberDataList;
  typedef MemberDataList::Node MemberDataNode;

  u64 member_count = 0;
  MemberDataList member_data_list = {};

  MemberDataNode* member_data_iter = nullptr;

  b8 init(UI* ui)
  {
    member_data_list.init(&ui->temp_alloc);
    return true;
  }

  TreeMemberWorkingData* addMemberData()
  {
    auto* node = member_data_list.pushTail();
    node->data->idx = member_count;
    member_count += 1;
    return node->data;
  }

  MemberDataNode* getMemberDataIterator()
  {
    return member_data_list.headNode();
  }
};

/* ============================================================================
 */
struct MemberState
{
  vec4f name_bounds;
  DrawCmd* name = nullptr;
  DrawCmd* value = nullptr;
  DrawCmd* bg = nullptr;

  b8 open = false;

  b8 init(UI& ui)
  {
    name_bounds = {};
    name = ui.drawcmds.add();
    value = ui.drawcmds.add();
    bg = ui.drawcmds.add();
    bg->alloc(&ui, gfx::putFilledRectCounts());
    return true;
  }

  void deinit(UI& ui)
  {
    ui.drawcmds.remove(name);
    ui.drawcmds.remove(value);
    ui.drawcmds.remove(bg);
  }

  void evaluate(
      UI* ui,
      InspectorEngineTree* tree,
      TreeMemberWorkingData* wdata,
      void* ptr,
      f32 x,
      f32* y,
      String name)
  {
    evalNameAndBounds(tree, wdata, name, x, y);
  }

  void evalNameAndBounds(
      InspectorEngineTree* tree,
      TreeMemberWorkingData* wdata, 
      String name,
      f32 x, 
      f32* y)
  {
    wdata->name_render.init(
      name,
      tree->font,
      11.f,
      1.f,
      999.f,
      0,
      {255,255,255,255});
    wdata->name_render.findTextBreaks();

    name_bounds = 
    {
      x,
      *y,
      wdata->name_render.size.x,
      wdata->name_render.size.y,
    };

    *y += row_height;

    tree->max_name_width = 
      max(tree->max_name_width,
          x + name_bounds.z);
  }

  void evalValue(
      InspectorEngineTree* tree,
      TreeMemberWorkingData* wdata)
  {
    wdata->value_render.init(
      wdata->value_buffer.asStr(),
      tree->font,
      11.f,
      1.f,
      999.f,
      0,
      {255,255,255,255});
    wdata->value_render.findTextBreaks();

    tree->max_value_width = 
      max(tree->max_value_width,
          wdata->value_render.size.x);
  }

  void evalPointerValue(
      InspectorEngineTree* tree,
      TreeMemberWorkingData* wdata,
      void* ptr)
  {
    wdata->value_render.init(
      wdata->value_buffer.asStr(),
      tree->font,
      11.f,
      1.f,
      999.f,
      0,
      {255,255,255,255});
    wdata->value_render.findTextBreaks();

    tree->max_value_width = 
      max(tree->max_value_width,
          wdata->value_render.size.x);
  }

  void drawNameAndBackground(
    UI* ui,
    InspectorEngineTree* tree,
    TreeMemberWorkingData* wdata)
  {
    f32 y = name_bounds.y + 0.5f * (row_height - 11.f);

    wdata->name_render.draw(
      ui,
      tree->content_pos + vec2f(name_bounds.x+row_text_padding, y),
      name);

    // Draw background.
    {
      auto [vp,ip] = bg->getPtrs(ui);

      bg->counts_used = 
        gfx::putFilledRect(
          vp,
          ip,
          vec2i(0,0),
          tree->content_pos.yadd(name_bounds.y),
          { tree->content_size.x, row_height },
          (wdata->idx % 2?
            odd_row_color :
            even_row_color));
    }
  }

  void drawValue(
      UI* ui, 
      InspectorEngineTree* tree, 
      TreeMemberWorkingData* wdata)
  {
    auto pos = 
      tree->content_pos +
      vec2f(
        tree->max_name_width + 
        spacing_between_name_and_value + 
        row_text_padding,
        name_bounds.y + 0.5f * (row_height - 11.f));
    wdata->value_render.draw(ui, pos, value);
  }

  void reportDrawCmds(UI* ui, DrawCmdList& pre, DrawCmdList& post)
  {
    pre.push(bg);
    pre.push(name);
    pre.push(value);
  }

  void update(
      UI* ui, 
      UpdateReason reason, 
      InspectorEngineTree* tree)
  {
    if (reason == UpdateReason::MousePressed)
    {
      if (math::pointInRect(
            ui->eng->input.mouse.window,
            tree->content_pos + name_bounds.xy(),
            name_bounds.zw()))
      {
        open = !open;
        tree->dirty = true;
      }
    }
  }

  void generate(
      UI* ui, 
      InspectorEngineTree* tree, 
      TreeMemberWorkingData* wdata)
  {
    drawNameAndBackground(ui, tree, wdata);
  }
};

/* ============================================================================
 */
template<typename T>
struct RecordMemberState : public MemberState
{
  T state;

  b8 init(UI& ui)
  {
    if (!MemberState::init(ui))
      return false;

    if (!state.init(ui))
      return false;

    return true;
  }

  void deinit(UI& ui)
  {
    MemberState::deinit(ui);
    state.deinit(ui);
  }

  void evaluate(
      UI* ui,
      InspectorEngineTree* tree,
      TreeMemberWorkingData* wdata,
      void* ptr,
      f32 x,
      f32* y,
      String name)
  {
    MemberState::evaluate(ui, tree, wdata, ptr, x, y, name);

    if (open)
    {
      state.evaluate(
        ui,
        tree,
        (u8*)ptr,
        x + nest_indent,
        y);
    }
  }

  void generate(
      UI* ui, 
      InspectorEngineTree* tree, 
      TreeMemberWorkingData* wdata)
  {
    MemberState::generate(ui, tree, wdata);

    if (open)
      state.generate(ui, tree);
  }

  void reportDrawCmds(UI* ui, DrawCmdList& pre, DrawCmdList& post)
  {
    MemberState::reportDrawCmds(ui, pre, post);
    if (open)
      state.reportDrawCmds(ui, pre, post);
  }

  void update(
      UI* ui, 
      UpdateReason reason, 
      InspectorEngineTree* tree)
  {
    MemberState::update(ui, reason, tree);
    state.update(ui, reason, tree);
  }
};

/* ============================================================================
 */
struct PointerMemberState : public MemberState
{
  void evaluate(
      UI* ui,
      InspectorEngineTree* tree,
      TreeMemberWorkingData* wdata,
      void* ptr,
      f32 x,
      f32* y,
      String name)
  {
    MemberState::evaluate(ui, tree, wdata, ptr, x, y, name);

    io::format(&wdata->value_buffer, *(void**)ptr);

    evalValue(tree, wdata);
  }

  void generate(
      UI* ui, 
      InspectorEngineTree* tree, 
      TreeMemberWorkingData* wdata)
  {
    MemberState::generate(ui, tree, wdata);
    drawValue(ui, tree, wdata);
  }
};

template<typename T>
String getEnumString(T x);

/* ============================================================================
 */
template<typename T>
struct EnumMemberState : public MemberState
{
  void evaluate(
      UI* ui,
      InspectorEngineTree* tree,
      TreeMemberWorkingData* wdata,
      void* ptr,
      f32 x,
      f32* y,
      String name)
  {
    MemberState::evaluate(ui, tree, wdata, ptr, x, y, name);

    io::format(&wdata->value_buffer, getEnumString(*(T*)ptr));

    evalValue(tree, wdata);
  }

  void generate(
      UI* ui, 
      InspectorEngineTree* tree, 
      TreeMemberWorkingData* wdata)
  {
    MemberState::generate(ui, tree, wdata);
    drawValue(ui, tree, wdata);
  }
};

/* ============================================================================
 */
template<typename T>
struct BuiltinMemberState : public MemberState
{
  void evaluate(
      UI* ui,
      InspectorEngineTree* tree,
      TreeMemberWorkingData* wdata,
      void* ptr,
      f32 x,
      f32* y,
      String name)
  {
    MemberState::evaluate(ui, tree, wdata, ptr, x, y, name);

    io::format(&wdata->value_buffer, *(T*)ptr);

    evalValue(tree, wdata);
  }

  void generate(
      UI* ui, 
      InspectorEngineTree* tree, 
      TreeMemberWorkingData* wdata)
  {
    MemberState::generate(ui, tree, wdata);
    drawValue(ui, tree, wdata);
  }
};

template<typename T>
struct FormattedMemberState : public MemberState {};

$ for type,formatter in pairs(formatters) do
/* ============================================================================
 */
template<>
struct FormattedMemberState<$(type)> : public MemberState
{
  void evaluate(
      UI* ui,
      InspectorEngineTree* tree,
      TreeMemberWorkingData* wdata,
      void* ptr,
      f32 x,
      f32* y,
      String name)
  {
    MemberState::evaluate(ui, tree, wdata, ptr, x, y, name);
  
    auto& val = *($(type)*)ptr;

$ local formatted = formatter:gsub("%%", "val")
    io::formatv(&wdata->value_buffer, $(formatted));

    evalValue(tree, wdata);
  }

  void generate(
      UI* ui, 
      InspectorEngineTree* tree, 
      TreeMemberWorkingData* wdata)
  {
    MemberState::generate(ui, tree, wdata);
    drawValue(ui, tree, wdata);
  }
};

$ end


$ -- * ------------------------------------------------------------------------

$ local handleRecord = function(record)
/* ============================================================================
 *  $(record.name)
 */
struct RecordState$(record.decl_idx)
{
$   for field,i in record:eachFieldWithIndex() do
  // $(field.name): $(field.type:tostring())
$     local record = field.type:getRecordDecl()
$     local enum = field.type:getEnumDecl()
$     if formatters[field.type.name] then
  FormattedMemberState<$(field.type.name)> member$(i);
$     elseif record then
  RecordMemberState<RecordState$(record.decl_idx)> member$(i);
$     elseif enum then
  EnumMemberState<$(enum.name)> member$(i);
$     elseif field.type:is(ast.PointerType) then
  PointerMemberState member$(i);
$     else
$       local type = field.type
$       if type:is(ast.ElaboratedType) then
$          type = type.desugared
$       end
$       if type:is(ast.BuiltinType) then
  BuiltinMemberState<$(field.type.name)> member$(i);
$       else
  MemberState member$(i);
$       end
$     end
$   end

  b8 init(UI& ui)
  {
$ for field,i in record:eachFieldWithIndex() do
    member$(i).init(ui);
$ end
    return true;
  }

  void deinit(UI& ui)
  {
$ for field,i in record:eachFieldWithIndex() do
    member$(i).deinit(ui);
$ end
  }

  void evaluate(
      UI* ui,
      InspectorEngineTree* tree,
      void* ptr,
      f32 x,
      f32* y)
  {
$ for field,i in record:eachFieldWithIndex() do
$   local record = field.type:getRecordDecl()
$   if record then
    {
      TreeMemberWorkingData* member_data = tree->wdata->addMemberData();
      String name = 
        (member$(i).open? 
          "- $(field.name)"_str :
          "+ $(field.name)"_str);

      member$(i).evaluate(
        ui,
        tree,
        member_data,
        (u8*)ptr + $(field.offset),
        x,
        y,
        name);
    }
$   else
    {
      TreeMemberWorkingData* member_data = tree->wdata->addMemberData();
      member$(i).evaluate(
        ui,
        tree,
        member_data,
        (u8*)ptr + $(field.offset),
        x,
        y,
        "$(field.name)"_str);
    }
$   end
$ end
  }

  void generate(UI* ui, InspectorEngineTree* tree)
  {
$ for field,i in record:eachFieldWithIndex() do
    {
      auto* wdata = tree->wdata->member_data_iter->data;
      tree->wdata->member_data_iter = tree->wdata->member_data_iter->next;
      member$(i).generate(ui, tree, wdata);
    }   
$ end
  }

  void update(
      UI* ui, 
      UpdateReason reason, 
      InspectorEngineTree* tree)
  {
$ for field,i in record:eachFieldWithIndex() do
    member$(i).update(ui, reason, tree);
$ end
  }

  void reportDrawCmds(UI* ui, DrawCmdList& pre, DrawCmdList& post)
  {
$ for field,i in record:eachFieldWithIndex() do
    member$(i).reportDrawCmds(ui, pre, post);
$ end
  }

};
$ end

$ local handleEnum = function(enum)
template<>
String getEnumString($(enum.name) x)
{
  using Enum = $(enum.name);
  switch (x)
  {
$   for elem in enum.elems:each() do
  case Enum::$(elem): return "$(elem)"_str;
$   end
  }
}
$ end

$ -- * ------------------------------------------------------------------------

$ local handleTagDecl = function(decl)
$   if decl:is(ast.Record) then
$     handleRecord(decl)
$   elseif decl:is(ast.Enum) then
$     handleEnum(decl)
$   else
$     error("unhandled TagDecl kind")
$   end
$ end

$ -- * ------------------------------------------------------------------------

$ for decl in p.decls.list:each() do
$   if decl.decl:is(ast.TagDecl) then
$     handleTagDecl(decl.decl)
$   end
$ end

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 AddressSet::getOrCreateState(
    void* addr, 
    void** out_state, 
    mem::Allocator* allocator)
{
  Elem* elem = map.find((u64)addr);
  b8 found = elem != nullptr;
  if (!found)
  {
    elem = pool.add();
    elem->addr = addr;
    elem->state = allocator->construct<T>();
    map.insert(elem);
  }
  *out_state = elem->state;
  return found;
}

/* ----------------------------------------------------------------------------
 */
template<>
InspectorEngineTree* UI::make(String id)
{
  auto iet = mem::stl_allocator.construct<InspectorEngineTree>();
  if (!initItem(id, iet))
  {
    mem::stl_allocator.free(iet);
    return nullptr;
  }

  iet->update_triggers = 
      UpdateReason::Start 
    | UpdateReason::Fin
    | UpdateReason::MousePressed;

  return iet;
}

/* ----------------------------------------------------------------------------
 */
InspectorEngineTree* InspectorEngineTree::create(UI& ui, Engine* engine)
{
  auto tree = ui.make<InspectorEngineTree>("Inspector.EngineTree"_str);
  if (tree == nullptr)
    return nullptr;
  if (!tree->states.init())
    return nullptr;
  if (!tree->addresses.init())
    return nullptr;

  tree->focusAddress(
    ui, 
    engine, 
    $(p.decls.map["struct Engine"].decl_idx));

  tree->font = ui.fontlib.findOrLoadFont(
    "gohu"_str,
    ui.eng->assetmgr,
    ui.eng->renderer);

  tree->bg = ui.drawcmds.add();
  tree->bg->alloc(&ui, gfx::putFilledRectCounts());

  return tree;
}

$ for name,decl,i in p:eachRecordDeclWithIndex() do
/* ----------------------------------------------------------------------------
 */
// template<>
// b8 InspectorEngineTree::focusAddress(UI& ui, TODO FIX THIS* addr)
// {
//   return focusAddress(ui, addr, TODO FIX THIS);
// }
$ end

/* ----------------------------------------------------------------------------
 */
template<typename T>
void* checkState(UI& ui, InspectorEngineTree* tree, void* addr)
{
  T* state = nullptr;
  if (!tree->addresses.getOrCreateState<T>(
        addr, 
        (void**)&state, 
        &tree->states))
  {
    // Just created.
    state->init(ui);
  }
  return state;
}

/* ----------------------------------------------------------------------------
 */
b8 InspectorEngineTree::focusAddress(UI& ui, void* addr, u64 type_idx)
{
  current_type = type_idx;
  current_addr = addr;

  dirty = true;

  switch (current_type)
  {
$ for name,decl,i in p:eachRecordDeclWithIndex() do
  // $(name)
  case $(i): 
    current_state = checkState<RecordState$(i)>(ui, this, addr);
    break;
$ end
  default:
    assert(!"invalid type idx");
  }
  return true;
}

/* ----------------------------------------------------------------------------
 */
void InspectorEngineTree::evaluate(UI* ui)
{
$ local this = ui.createItemContext("InspectorEngineTree", "this")
  @@this.style:lookup(margin, border, padding)

  wdata = ui->temp_alloc.construct<TreeWorkingData>();
  wdata->init(ui);

  max_name_width = 0.f;
  max_value_width = 0.f;
  f32 y = 0.f;
  switch(current_type)
  {
$ for name,decl,i in p:eachRecordDeclWithIndex() do
  // $(name)
  case $(i):
    ((RecordState$(i)*)current_state)->evaluate(
      ui, this, current_addr, 0.f, &y);
    break;
$ end
  }
  
  size.x = 
    max_name_width + spacing_between_name_and_value + max_value_width + 
    @this.style.padding.left + @this.style.padding.right +
    @this.style.border.left + @this.style.border.right + 
    @this.style.margin.left + @this.style.margin.right + 
    2.f * row_text_padding;
  size.y = 
    y + @this.style.padding.top + @this.style.padding.bottom +
    @this.style.border.top + @this.style.border.bottom + 
    @this.style.margin.top + @this.style.margin.bottom;
}

/* ----------------------------------------------------------------------------
 */
void InspectorEngineTree::generate(UI* ui)
{
$ local this = ui.createItemContext("InspectorEngineTree", "this")
  @@this.style:lookup(margin, border, padding)

  auto [vp,ip] = bg->getPtrs(ui);

  bg->counts_used = 
    gfx::putFilledRect(
      vp,
      ip,
      vec2i(0,0),
      pos_screen + 
      @this.style.margin.top_left +
      @this.style.border.top_left,
      @this.getBorderedArea,
      odd_row_color);

  content_pos = 
    pos_screen + 
    @this.style.margin.top_left +
    @this.style.border.top_left +
    @this.style.padding.top_left;

  content_size = @this.getPaddedArea;

  wdata->member_data_iter = wdata->member_data_list.headNode();

  switch(current_type)
  {
$ for name,decl,i in p:eachRecordDeclWithIndex() do
  // $(name)
  case $(i):
    ((RecordState$(i)*)current_state)->generate(
      ui, 
      this);
    break;
$ end
  }
}

/* ----------------------------------------------------------------------------
 */
void InspectorEngineTree::update(UI* ui, UpdateReason reason)
{
  switch (reason)
  {
  case UpdateReason::MousePressed:
    {
      switch(current_type)
      {
$ for name,decl,i in p:eachRecordDeclWithIndex() do
      // $(name)
      case $(i):
        ((RecordState$(i)*)current_state)->update(
          ui, reason, this);
        break;
$ end
      }
    }
    break;
  }
}

/* ----------------------------------------------------------------------------
 */
void InspectorEngineTree::reportDrawCmds(
    UI* ui,
    DrawCmdList& pre,
    DrawCmdList& post)
{
  pre.push(bg);
  switch(current_type)
  {
$ for name,decl,i in p:eachRecordDeclWithIndex() do
  case $(i):
    ((RecordState$(i)*)current_state)->reportDrawCmds(ui, pre, post);
    break;
$ end
  }
}

/* ----------------------------------------------------------------------------
 */
template<>
Inspector* UI::make(String id)
{
  auto ins = mem::stl_allocator.construct<Inspector>();
  if (!initItem(id, ins))
  {
    mem::stl_allocator.free(ins);
    return nullptr;
  }
  return ins;
}

/* ----------------------------------------------------------------------------
 */
Inspector* Inspector::create(UI& ui, Engine* engine)
{
  auto ins = ui.begin<Inspector>("Inspector"_str);
$ local this = ui.createItemContext("Inspector", "ins")
  @this.style.set.background_color(0);
  @this.style.set.sizing(auto_x | percent_y);
  @this.style.set.size({0, 100});
  @this.style.set.border({1,1,1,1});
  @this.style.set.border_color(0x99bbbbff);

  ins->fps = ui.make<Text>("Inspector.fps"_str, ""_str);

  auto tree = ins->tree = InspectorEngineTree::create(ui, engine);

$ local tree = ui.createItemContext("InspectorEngineTree", "tree")
  @tree.style.set.background_color(even_row_color);
  @tree.style.set.padding({5,5,5,5});

  ui.end<Inspector>();

  return ins;
}

} // namespace ui

