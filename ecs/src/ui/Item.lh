/*
 *  The basis of all things in the UI system.
 */ 

$ local cmn = require "common"
$ local ui = require "ui.UI"

#include "iro/Unicode.h"
#include "iro/containers/Tree.h"
#include "iro/containers/Array.h"
#include "iro/containers/SmallArray.h"

#include "math/vec.h"
#include "math/mat.h"

@@lpp.import "ui/Style.lh"

using namespace iro;

namespace ui
{

struct Item;
struct DrawCmd;
struct UI;

typedef Tree<Item> ItemTree;
typedef ItemTree::Node ItemNode;

/* ============================================================================
 *  Some space in which an Item's DrawCmds are rendered.
 */ 
enum class ItemSpace
{
  Invalid,

  // The DrawCmd is intended to have its origin where its padded area begins.
  // This is the default space in which an Item's DrawCmds are rendered.
  Padded,

  // The DrawCmd is intended to have its origin where its bordered area begins.
  Bordered,

  // The DrawCmd is intended to have its origin where its margined area begins.
  Margined,
};

/* ============================================================================
 *  A DrawCmd along with some information about how the Item wants it drawn.
 */
struct ReportedDrawCmd
{
  DrawCmd* drawcmd;
  ItemSpace space;

  ReportedDrawCmd() : drawcmd(nullptr), space(ItemSpace::Invalid) {}

  ReportedDrawCmd(DrawCmd* drawcmd) 
    : drawcmd(drawcmd), 
      space(ItemSpace::Padded) {}

  ReportedDrawCmd(DrawCmd* drawcmd, ItemSpace space)
    : drawcmd(drawcmd),
      space(space) {}
};

typedef SmallArray<ReportedDrawCmd, 8> DrawCmdList;

/* ============================================================================
 */
struct DrawCmdLists
{
  // DrawCmds intended to be emitted before or after the Item's children.
  // These are drawn in the padded space of the Item.
  DrawCmdList pre_children;
  DrawCmdList post_children;

  // DrawCmds to be emitted once the UI system completes updating the entire
  // Item tree, eg. drawn over all Items.
  DrawCmdList top_most;
};

/* ============================================================================
 *  The reason an update callback was called on an item.
 */
enum class UpdateReason
{
  // Called before anything happens on this Item.
  Start,

  MouseHover,
  MouseHoverChild,

  MousePressed,
  MouseReleased,
  MouseDown,
  MouseScroll,

  FocusGained,
  FocusLost,

  FocusedKeyPress,

  // Last update callback ever invoked on an Item.
  Fin,
};
typedef Flags<UpdateReason> UpdateReasonFlags;
DefineFlagsOrOp(UpdateReasonFlags, UpdateReason);

/* ============================================================================
 */
@ui.widget(Item,
schema
{
  pos: vec2f = 0 0;

  positioning: enum
  {
    static,
    relative,
    absolute,
    fixed,
  } = static;

  size: vec2f = 0 0
    accessors
      width = "%.x",
      height = "%.y"
    parseValue
    {
      -- Special because we could encounter a percentage or keyword.
      local sizing = ""

      local addSizing = function(s)
        if 0 ~= #sizing then
          sizing = sizing.."|"
        end
        sizing = sizing..s
      end

      local x, xperc, xflex
      if parser:checkToken "auto" then
        addSizing "auto_x"
      elseif parser:checkToken "flex" then
        x = parser:expectPattern "%b()" :sub(2,-2)
        addSizing "flex"
      else
        x = parser:expectNumber()
        if parser:checkToken "%%" then
          addSizing "percent_x"
        end
      end

      local y, yperc
      if parser:checkToken "auto" then
        addSizing "auto_y"
      elseif parser:checkToken "flex" then
        y = parser:expectPattern "%b()" :sub(2,-2)
        addSizing "flex"
      else
        y = parser:expectNumber()
        if parser:checkToken "%%" then
          addSizing "percent_y"
        end
      end

      if #sizing ~= 0 then
        style.set.sizing(sizing)
      end

      return "{"..(x or 0)..","..(y or 0).."}"
    };

  sizing: flags
  {
    normal,
    auto_x,
    auto_y,
    percent_x,
    percent_y,
    square,
    flex,
  } = normal
    values
      auto = "auto_x | auto_y",
      percent = "percent_x | percent_y";

  margin: vec4f = 0
    accessors
      top_left     = "%.xy()",
      bottom_right = "%.zw()",
      top          = "%.y",
      left         = "%.x",
      right        = "%.z",
      bottom       = "%.w";

  padding: vec4f = 0
    accessors
      top_left     = "%.xy()",
      bottom_right = "%.zw()",
      top          = "%.y",
      left         = "%.x",
      right        = "%.z",
      bottom       = "%.w";

  display: flags
  {
    horizontal,
    flex,
    reverse,
    hidden,
  };

  anchor: enum
  {
    top_left,
    top_right,
    bottom_right,
    bottom_left,
  } = top_left;

  border: vec4f = 0
    accessors
      top_left     = "%.xy()",
      bottom_right = "%.zw()",
      top          = "%.y",
      left         = "%.x",
      right        = "%.z",
      bottom       = "%.w";

  border_color: Color = 0x45262dff;

  background_color: Color = 0x00000000;

  font:        String = "assets/fonts/gohu";
  font_height: f32    = 11;
  text_color:  Color  = 0xc5c9c5ff;

  alignment: vec2f = 0 0;

  func hasBorder 
  {
    %.border.left ||
    %.border.right ||
    %.border.top ||
    %.border.bottom
  }

  vertical_scrollbar_width:    f32 = 7;
  horizontal_scrollbar_height: f32 = 7;

  vertical_scrollbar_handle_width:    f32 = 5;
  horizontal_scrollbar_handle_height: f32 = 5;

  scrollbar_color:        Color = 0x16161dff;
  scrollbar_handle_color: Color = 0x717c7c;

  overflow: enum
  {
    scroll,
    clip,
    visible,
  } = scroll;

  func getMarginedWidth 
    { $.size.x - %.margin.left - %.margin.right }
  func getMarginedHeight 
    { $.size.y - %.margin.top - %.margin.bottom }
  func getMarginedArea 
    { { $.getMarginedWidth, $.getMarginedHeight } }

  func getMarginedStyleWidth 
    { %.size.width - %.margin.left - %.margin.right }
  func getMarginedStyleHeight 
    { %.size.height - %.margin.top - %.margin.bottom }
  func getMarginedStyleArea 
    { { $.getMarginedStyleWidth, $.getMarginedStyleHeight } }

  func getBorderedWidth
    { $.getMarginedWidth - %.border.left - %.border.right }
  func getBorderedHeight
    { $.getMarginedHeight - %.border.top - %.border.bottom } 
  func getBorderedArea
    { { $.getBorderedWidth, $.getBorderedHeight } }

  func getBorderedStyleWidth 
    { %.size.width - %.border.left - %.border.right } 
  func getBorderedStyleHeight
    { %.size.height - %.border.top - %.border.bottom }
  func getBorderedStyleArea
    { { $.getBorderedStyleWidth, $.getBorderedStyleHeight } }

  func getPaddedWidth
    { $.getBorderedWidth - %.padding.left - %.padding.right }
  func getPaddedHeight
    { $.getBorderedHeight - %.padding.top - %.padding.bottom }
  func getPaddedArea
    { { $.getPaddedWidth, $.getPaddedHeight } }

  func getPaddedStyleWidth
    { %.size.width - %.padding.left - %.padding.right }
  func getPaddedStyleHeight
    { %.size.height - %.padding.top - %.padding.bottom }
  func getPaddedStyleArea
    { { $.getPaddedStyleWidth, $.getPaddedStyleHeight } }
},
struct
{
  String name;
  StyleMap style;

  ItemNode* node;

  UpdateReasonFlags update_triggers;

  // I would like to not do this, but since these properties are a part of 
  // all Items I feel it is appropriate to force being able to use them
  // on any of them whether the widget specifies it or not. Ideally these
  // aren't cached on the Item itself as we want to keep Item small, but 
  // I don't have anywhere else to put them atm. Once we get to caching 
  // off drawcmds into a linear list that we feed to the Renderer (if 
  // possible) then these should ideally be moved off.
  struct 
  {
    // Always draws over anything the Item draws.
    DrawCmd* borders;
    DrawCmd* scrollbars;

    // Always draws below anything the Item draws.
    DrawCmd* background;

    DrawCmd* debug;
    DrawCmd* debug_text;
  } builtin;

  operator ItemNode*() { return node; }

  vec2f scroll;
  vec2f max_scroll;

  // TODO(sushi) much of the following data is not necessary to cache on the
  //             Item as it is used only during evaluation and drawing.
  //             We should move towards temporarily allocating 'working data'
  //             during the entire process of eval/draw instead to reduce 
  //             the size of this struct as much as possible.

  vec2f pos_local;
  vec2f pos_screen;

  // Size that the item visually takes up on the screen.
  vec2f size;

  vec2f visible_start;
  vec2f visible_size;

  // TODO(sushi) even this guy can probably be eliminated by just storing a 
  //             list of dirty Items on UI that we check every update.
  b8 dirty;

  b8 init(UI& ui, String name);
  void deinit();

  static Item* make(UI& ui, String name = nil);
  static Item* begin(UI& ui, String name = nil);
  
  // Called according to the update_trigger style property.
  virtual void update(UI* ui, UpdateReason reason) {}

  // Determines how this item is sized and positioned relative to other items.
  virtual void evaluate(UI* ui) {}

  // Generates draw information for rendering this item.
  virtual void generate(UI* ui);

  // Cleans up any dynamic memory this item may have allocated in its lifetime.
  virtual void cleanup() {}

  // Implemented by Items that perform custom drawing via DrawCmds. DrawCmds
  // can be emitted in various ways. See DrawCmdLists for an explanation of
  // each list.
  virtual void reportDrawCmds(UI* ui, DrawCmdLists& lists) { }

  // Allows a widget to tell evaluate if it should place children or not.
  virtual b8 shouldPlaceChildren() { return true; }

  // Allows a widget to define a minimum size regardless of style properties.
  // Eg. in the case of collapsing headers with auto_y set in sizing we need to
  // override this in order to tell the evaluator that even when it has no 
  // children or when the header is closed, it still has a minimum height of 
  // its header_height property.
  // TODO(sushi) this could really just be a postEvaluation callback, as it is
  //             called at the very end. If we wind up having a lot of 
  //             callbacks at that point; consolidate them.
  virtual vec2f getMinSize(UI* ui) { return {0.f, 0.f}; }

  // Adjusts where the cursor for placing the children of this item should
  // start relative to where the item is placed.
  virtual vec2f adjustCursorStart(UI* ui, vec2f norm) { return norm; }
  
  // Adjusts the size of this item as seen by its children. Intended to be used
  // in combination with adjustCursorStart() to tell children what they are 
  // actually drawing in in cases where a widget adjusts where children
  // are drawing. Eg. in a collapsing header, we want the children to 
  // draw below the header and to think that the size they are drawing into
  // is the size of the content rect below the header, not the entire 
  // header item's area (as that would cause an Item with, say, sizing &
  // percent_y and size.y == 100 to draw beyond the content rect).
  virtual vec2f adjustItemContentSize(UI* ui, vec2f norm) { return norm; }

  // Adjusts the size of this item just after its initial size evaluation.
  // The Item's internal 'size' variable will be set before this function is
  // invoked. The Item is free to modify it here as necessary.
  // If a widget needs to disable automatic sizing over either axis it may 
  // also do so here.
  struct AdjustedSize
  {
    b8 disable_auto_x;
    b8 disable_auto_y;
  };
  virtual AdjustedSize adjustItemSize(
      UI* ui,
      b8 is_auto_x,
      b8 is_auto_y) 
  { 
    return {}; 
  }
  
  // Calculates where the content of this Item starts. Can be overrided
  // by widgets when they need their content to start somewhere other 
  // than the default position.
  virtual vec2f calcContentStart(vec4f margin, vec4f border)
  {
    return margin.xy() + border.xy();
  }

  // Calculates the visual area that the content of this Item is placed in.
  // 'size' is the content area that would normally be computed for this Item.
  virtual vec2f calcContentArea(vec4f margin, vec4f border, vec2f size)
  {
    return size;
  }

  // Calculates the visual area that this item takes up for hit testing.
  virtual vec2f calcVisualArea()
  {
    return visible_size;
  }

  // If an Item needs to perform special hit testing, eg. it draws content
  // outside of the bounds that UI is aware of, this function should be 
  // overridden to help UI understand those areas. 
  // 'local_cursor' is the position of the mouse relative to the Item's 
  // current screen position. If this returns 'true', then the Item is 
  // considered hovered by the cursor.
  // NOTE that this is overridden by the normal hit testing logic, eg. if the
  // cursor is found to hover the normal bounds that UI checks, this will not 
  // be called, and so should not be seen as REQUIRED to implement for an Item
  // to detect if it is hovered. This is only necessary in special cases where
  // an Item draws, say, top-most UI that is outside of its normal bounds (eg.
  // a combo box) that UI will not detect normally.
  // TODO(sushi) it would be nice to have a better solution, but at the moment
  //             a path to that is not clear. This is implemented to support
  //             the new style of UI usage where the internals of Items are 
  //             more immediate mode styled, which UI was never originally 
  //             designed for. Eventually this as well as a lot of the 
  //             scattered API above (and probably, to be, below this) need
  //             to be cleaned up and made more consistent once we have a 
  //             better grasp on this new style.
  virtual b8 onHitTest(vec2f local_cursor) { return false; }
  
  b8 containsPoint(vec2f point);

  enum class HoverKind
  {
    // The topmost hovered item.
    Topmost,

    // The mouse is over this item, no matter if it is topmost.
    Area,
    
    // This item or one of its children are hovered.
    Child,
  };

  b8 isHovered(UI* ui, HoverKind kind);

  void calcVerticalScrollBar(
    UI* ui,
    vec2f* bar_pos,
    vec2f* bar_size,
    vec2f* handle_pos,
    vec2f* handle_size);

  void calcHorizontalScrollBar(
    UI* ui,
    vec2f* bar_pos,
    vec2f* bar_size,
    vec2f* handle_pos,
    vec2f* handle_size);
})

}
