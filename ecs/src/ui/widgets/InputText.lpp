$ require "common"
$ local ui = require "ui.UI"

@@lpp.import "ui/widgets/InputText.lh"

@@lpp.import "Engine.lh"

@@lpp.import "ui/UI.lh"
@@lpp.import "ui/widgets/InputTextSkin.defs.lh"

#include "iro/Logger.h"

#include "ctype.h"

namespace ui
{

@defFileLogger(inputtext, Info)

/* ----------------------------------------------------------------------------
 */
b8 InputText::init(UI& ui, String init, String preview)
{
  String text_init = 
    notnil(init)
    ? init
    : notnil(preview)
      ? preview
      : nil;

  if (notnil(preview))
    this->preview = preview.allocateCopy();

  if (!text.init(ui))
  {
    if (notnil(preview))
      mem::stl_allocator.free(this->preview.ptr);

    return false;
  }
  
  decor = ui.drawcmds.add();
  decor->alloc(&ui, 2 * gfx::putFilledRectCounts());

  return true;
}

/* ----------------------------------------------------------------------------
 */
void InputText::deinit(UI& ui)
{
  if (notnil(preview))
    mem::stl_allocator.free(preview.ptr);

  decor->remove(&ui);

  text.deinit(ui);
}

/* ----------------------------------------------------------------------------
 */
$ if false then
void InputText::draw(UI& ui, const DrawParams& params)
{
  String str = text.asStr();
  if (str.isEmpty())
    str = preview;

  auto [vp, ip] = drawcmds.text->realloc(&ui, gfx::putTextCounts(str));
  drawcmds.text->tex = params.font->texture->gfx_texture;


  drawcmds.text->scissor = params.bounds;
  drawcmds.quads->scissor = params.bounds;

  drawcmds.text->counts_used = {};
  drawcmds.quads->counts_used = {};

  f32 cursor_offset = 0.f;
  String cscan = str;
  for (;;)
  {
    if (text.cursor.pos == str.len - cscan.len || cscan.isEmpty())
    {
      if (cursor_offset < text_x_offset)
        text_x_offset = cursor_offset;
      else if (cursor_offset > text_x_offset + params.bounds.z)
        text_x_offset = cursor_offset - params.bounds.z;
      break;
    }

    gfx::PackedChar pc;
    params.font->getPackedChar(&pc, cscan.advance().codepoint);

    cursor_offset += pc.xadvance;
  }

  f32 cursor_x = -1.f;
  vec2f cursor = params.bounds.xy();
  cursor.x -= text_x_offset;

  if (text.asStr().isEmpty())
  {
    gfx::putText(
      vp, ip, 
      &drawcmds.text->counts_used,
      params.bounds.xy(),
      str,
      params.font,
      params.font_height,
      2.f,
      params.text_color,
      nullptr);
  }
  else
  {
    for (;;)
    {
      if (str.ptr - text.ptr == text.cursor.pos)
        cursor_x = cursor.x;
      if (str.isEmpty())
        break;

      utf8::Codepoint cp = str.advance();

      gfx::putGlyph(
        vp, ip,
        &drawcmds.text->counts_used,
        params.font,
        cp.codepoint,
        &cursor,
        params.text_color);
    }
  }

  if (params.is_focused)
  {
    auto [vp, ip] = drawcmds.quads->getPtrs(&ui);

    cursor_x = min(cursor_x, params.bounds.x + params.bounds.z - 1.f);

    gfx::putFilledRect(
      vp, ip,
      &drawcmds.quads->counts_used,
      {cursor_x == -1.f? cursor.x : cursor_x, params.bounds.y},
      vec2f(1.f, params.font_height),
      params.cursor_color);
  }
}
$ end

/* ----------------------------------------------------------------------------
 */
InputText::UpdateResult InputText::update(
    ItemUpdateContext& ctx,
    Rect bounds,
    TextEdit::Buffer buffer,
    const InputTextSkinDef& skin)
{
  b8 clicked = ctx.tryConsumeMouseReleaseInRect(bounds, MouseButton::Left);

  b8 text_changed = false;
  b8 buffer_too_small = false;
  b8 cursor_moved = false;

  if (!focused)
  {
    if (clicked)
      focused = true;   
  }
  else if (ctx.input.wasAnyMouseButtonReleased() && 
           !ctx.isCursorInHoverableRect(bounds))
    focused = false;

  text.setScissor(bounds.contractedX(skin.horizontal_padding));
  
  Item::drawBackground(ctx.ui, bounds, decor, skin.item);

  text_edit.setBuffer(buffer);

  if (focused)
  {
    b8 ctrl_down = 
      ctx.input.isKeyDown(Key::LCtrl) || ctx.input.isKeyDown(Key::RCtrl);
    b8 alt_down = 
      ctx.input.isKeyDown(Key::LAlt) || ctx.input.isKeyDown(Key::RAlt);

  $ local function actions(len)
    if (ctx.input.tryConsumePressedKey(Key::Right))
    {
      if (0 != text_edit.cursorMoveRight$(len or "")())
        cursor_moved = true;
    }
    if (ctx.input.tryConsumePressedKey(Key::Left))
    {
      if (0 != text_edit.cursorMoveLeft$(len or "")())
        cursor_moved = true;
    }
    if (ctx.input.tryConsumePressedKey(Key::Backspace))
    {
      if (0 != text_edit.deleteLeft$(len or "")())
        cursor_moved = true;
    }
    if (ctx.input.tryConsumePressedKey(Key::Delete))
    {
      if (0 != text_edit.deleteRight$(len or "")())
        cursor_moved = true;
    }
  $ end

    if (ctrl_down)
    {
      @actions "Word"
    }
    else if (alt_down)
    {
      @actions "WordPart"
    }
    else
    {
      @actions
    }

    String instr = ctx.tryConsumeCharInput();
    if (notnil(instr) && !iscntrl(instr.ptr[0]))
    {
      u32 insert_len = text_edit.insertString(instr);

      if (insert_len == 0)
        buffer_too_small = true;
      else
        text_changed = true;
    }
  } 

  String display = text_edit.asStr();
  if (display.isEmpty())
    display = preview;

  f32 cursor_offset = 0.f;
  if (focused)
  {
    // Compute where the cursor will be and set the x offset of the 
    // drawn text. This offset is used to scroll the text so that the cursor
    // stays visible when editing long stuff.
    String cscan = display;
    const f32 text_width = bounds.contractedX(skin.horizontal_padding).w;
    for (;;)
    {
      if (text_edit.cursor.pos == display.len - cscan.len ||
          cscan.isEmpty())
      {
        if (cursor_offset < text_x_offset)
          text_x_offset = cursor_offset;
        else if (cursor_offset > text_x_offset + text_width)
          text_x_offset = cursor_offset - text_width;
        break;
      }

      gfx::PackedChar pc;
      skin.text.font->getPackedChar(&pc, cscan.advance().codepoint);

      cursor_offset += pc.xadvance;
    }
  }

  Rect text_bounds = bounds;
  text_bounds.x -= text_x_offset;
  text_bounds.x += skin.horizontal_padding;
  text_bounds.y += 0.5f * (bounds.h - skin.text.font_height);

  text_bounds.floorPos();
  
  text.clear();
  text.draw(ctx.ui, text_edit.asStr(), text_bounds, skin.text);

  if (focused)
  {
    auto [vp, ip] = decor->getPtrs(&ctx.ui);

    gfx::putFilledRect(
      vp, ip,
      &decor->counts_used,
      vec2f(text_bounds.x + cursor_offset, text_bounds.y),
      vec2f(1.f, skin.text.font_height),
      skin.cursor_color);
  }

  UpdateResult result = UpdateResult::Idle;
  if (text_changed)
    result = UpdateResult::TextChanged;
  else if (buffer_too_small)
    result = UpdateResult::OutOfSpace;
  else if (cursor_moved)
    result = UpdateResult::CursorMoved;
  
  return result;
}

/* ----------------------------------------------------------------------------
 */
void InputText::reportDrawCmds(UI& ui, DrawCmdLists& lists)
{
  lists.pre_children.push(decor);
  lists.pre_children.push(text.dc);
}

}
