/*
 *  Collapsing header widget. Places a clickable header that hides or shows 
 *  its children.
 */

$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "ui/Item.lh"
@@lpp.import "ui/widgets/Text.lh"

namespace ui
{

$ if false then

/* ============================================================================
 */
@ui.widget(CollapsingHeader,
schema
{
  font = inherit;
  font_height = inherit;
  text_color = inherit;

  header_color: Color = 0x000000ff;
  header_height: f32 = 11;
  header_text_align: vec2f = 0 0.5;
  header_text_padding: vec4f = 0 0 0 0;

  content_background_color: Color = 0x00000000;

  make { return '"'..parser:expectString()..'"_str' }
},
struct
{
  DrawCmd* header_bg;
  DrawCmd* content_bg;

  b8 open;

  TextState header_text;

  static CollapsingHeader* make(UI& ui, String init = nil, String name = nil);
  static CollapsingHeader* begin(UI& ui, String init = nil, String name = nil);

  void  update(UI* ui, UpdateReason reason) override;
  void  evaluate(UI* ui) override;
  vec2f getMinSize(UI* ui) override;
  void  generate(UI* ui) override;
  vec2f adjustCursorStart(UI* ui, vec2f norm) override;
  b8    shouldPlaceChildren() override { return open; }
  vec2f calcContentStart(vec4f margin, vec4f border) override;
  vec2f calcContentArea(vec4f margin, vec4f border, vec2f size) override;
  AdjustedSize adjustItemSize(UI* ui, b8 ax, b8 ay) override;
  vec2f calcVisualArea() override;

  void reportDrawCmds(UI* ui, DrawCmdLists& lists) override
  { 
    if (open && content_bg)
      lists.pre_children.push(content_bg);
    if (header_bg)
      lists.post_children.push({header_bg, ItemSpace::Margined});
    if (header_text.dc)
      lists.post_children.push({header_text.dc, ItemSpace::Margined});
  }
})

$ end

}


