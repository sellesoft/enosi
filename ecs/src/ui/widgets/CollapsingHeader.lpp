$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "ui/widgets/CollapsingHeader.lh"
@@lpp.import "ui/UI.lh"
@@lpp.import "Engine.lh"

#include "math/util.h"

static Logger logger = 
  Logger::create("ui.colheader"_str, Logger::Verbosity::Info);

namespace ui
{

/* ----------------------------------------------------------------------------
 */
CollapsingHeader* CollapsingHeader::make(UI& ui, String name, String init)
{
  auto* ch = ui.allocateAndInitItem<CollapsingHeader>(name);
  if (ch == nullptr)
    return nullptr;

  if (!ch->header_text.init(&ui, init))
  {
    mem::stl_allocator.free(ch);
    return nullptr;
  }

  ch->update_triggers = UpdateReason::MouseReleased;

  return ch;
}

/* ----------------------------------------------------------------------------
 */
CollapsingHeader* CollapsingHeader::begin(UI& ui, String name, String init)
{
  auto* ch = CollapsingHeader::make(ui, name, init);
  if (ch == nullptr)
    return nullptr;
  ui.beginItem(ch);
  return ch;
}

/* ----------------------------------------------------------------------------
 */
void CollapsingHeader::evaluate(UI* ui)
{
  $ local this = ui.createItemContext("CollapsingHeader", "this")
  @@this.style:lookup(font)

  header_text.checkFont(@this.style.font, ui);
}

/* ----------------------------------------------------------------------------
 */
vec2f CollapsingHeader::getMinSize(UI* ui)
{
  $ local this = ui.createItemContext("CollapsingHeader", "this")
  @@this.style:lookup(header_height)

  return { 0.f, @this.style.header_height };
}

/* ----------------------------------------------------------------------------
 */
void CollapsingHeader::update(UI* ui, UpdateReason reason)
{
  switch (reason)
  {
  case UpdateReason::MouseReleased:
    {
      $ local this = ui.createItemContext("CollapsingHeader", "this")
      @@this.style:lookup(header_height)

      vec2f mpos = ui->eng->input.mouse.window;
      if (math::pointInRect(
            ui->eng->input.mouse.window,
            pos_screen,
            vec2f(size.x, @this.style.header_height)))
      {
        open = !open;
        dirty = true;
      }
    }
    break;
  }
}

/* ----------------------------------------------------------------------------
 */
void CollapsingHeader::generate(UI* ui)
{
  $ local Text = ui.widgets.Text.schema
  $ local this = ui.createItemContext("CollapsingHeader", "this")
  @@this.style:lookup(
    header_height, 
    header_color, 
    header_text_align,
    content_background_color,
    font_height,
    text_color,
    border,
    margin)

  vec2f cpos = 
    pos_screen + @this.style.margin.top_left + @this.style.border.top_left;

  vec2f csiz = @this.getBorderedArea;

  if (@this.style.header_color.a != 0)
  {
    if (header_bg == nullptr)
    {
      header_bg = ui->drawcmds.add();
      header_bg->alloc(ui, gfx::putFilledRectCounts());
    }

    auto [vp, ip] = header_bg->getPtrs(ui);

    vec2i sum = {};

    sum +=
      gfx::putFilledRect(
        vp,
        ip,
        sum,
        // HACK(sushi) I DO NOT KNOW WHY I HAVE TO OFFSET THIS LIKE THIS
        //             but it fixes a off by one bug where the contents of 
        //             this render for a single pixel line above the header
        //             when scrolling. In RenderDoc this does not appear
        //             but otherwise it does idk man this drove me insane
        //             for like an hour and a half.
        //             There is a similar hack in telling the evaluator
        //             where to begin children.
        cpos.yadd(-1),
        vec2f(csiz.x, @this.style.header_height),
        @this.style.header_color);

    header_bg->counts_used = sum;
  }

  if (open && @this.style.content_background_color.a != 0)
  {
    if (content_bg == nullptr)
    {
      content_bg = ui->drawcmds.add();
      content_bg->alloc(ui, gfx::putFilledRectCounts());
    }

    auto [vp, ip] = content_bg->getPtrs(ui);

    vec2i sum = {};

    sum +=
      gfx::putFilledRect(
        vp,
        ip,
        sum,
        cpos.yadd(@this.style.header_height),
        vec2f(csiz.x, csiz.y - @this.style.header_height),
        @this.style.content_background_color);

    content_bg->counts_used = sum;
  }

  header_text.cacheRenderer();
  defer { header_text.freeRenderer(); };

  header_text.initRenderer(
    @this.style.font_height,
    1.f,
    999.f,
    @Text.wrap.none,
    @this.style.text_color);

  vec2f text_size = header_text.renderer->size;

  auto text_pos = vec2f(
    cpos.x + @this.style.header_text_align.x * (csiz.x - text_size.x),
    cpos.y + 
      @this.style.header_text_align.y * 
      (@this.style.header_height - text_size.y));
  
  header_text.draw(ui,text_pos);
}

/* ----------------------------------------------------------------------------
 */
vec2f CollapsingHeader::adjustCursorStart(UI* ui, vec2f norm)
{
  // Start placing children below the header.
  $ local this = ui.createItemContext("CollapsingHeader", "this")
  @@this.style:lookup(header_height)

  return vec2f(norm.x, norm.y + @this.style.header_height);
}

/* ----------------------------------------------------------------------------
 */
Item::AdjustedSize CollapsingHeader::adjustItemSize(
    UI* ui,
    b8 is_auto_x,
    b8 is_auto_y)
{
  AdjustedSize adjusted = {};

  if (!open)
  {
    $ local this = ui.createItemContext("CollapsingHeader", "this")
    @@this.style:lookup(header_height, border, margin)

    adjusted.disable_auto_y = true;
    size.y = 
      @this.style.header_height + 
      @this.style.margin.top + @this.style.margin.bottom +
      @this.style.border.top + @this.style.border.bottom;
  }

  return adjusted;
}

/* ----------------------------------------------------------------------------
 */
vec2f CollapsingHeader::calcContentStart(vec4f margin, vec4f border)
{
  $ local this = ui.createItemContext("CollapsingHeader", "this")
  @@this.style:lookup(header_height)
  return vec2f(
    margin.x + border.x,
    margin.y + border.y + @this.style.header_height);
}

/* ----------------------------------------------------------------------------
 */
vec2f CollapsingHeader::calcContentArea(vec4f margin, vec4f border, vec2f size)
{
  $ local this = ui.createItemContext("CollapsingHeader", "this")
  @@this.style:lookup(header_height, margin, border)
  
  return vec2f(
    @this.getBorderedWidth,
    @this.getBorderedHeight - @this.style.header_height);
}

}
