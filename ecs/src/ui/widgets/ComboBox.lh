/*
 *  A box containing a list of selectable options.
 */

$ require "common"
$ local ui = require "ui.UI"

#include "iro/Common.h"

@@lpp.import "ui/Item.lh"
@@lpp.import "ui/widgets/Text.lh"
@@lpp.import "ui/widgets/ComboBoxSkin.defs.lh"

#include "math/Rect.h"

namespace ui
{

struct ComboBox
{
  typedef Slice<String> Options;

  Text text;
  DrawCmd* decor;

  b8 open;

  // This is 0 when no selection is active, and indexes the options 
  // array starting at 1!
  u32 selected;

  Rect bounds;

  b8 init(UI& ui);
  void deinit(UI& ui);

  b8 update(
    ItemUpdateContext& ctx,
    Rect bounds,
    const Options& options,
    const ComboBoxSkinDef& skin);

  void reportDrawCmds(UI& ui, DrawCmdLists& lists)
  {
    DrawCmdList* list = open? &lists.top_most : &lists.pre_children;
    list->push(decor);
    list->push(text.dc);
  }

  b8 hasSelection() const { return selected != 0; }

  String getSelection(const Options& options) const
  {
    if (hasSelection())
      return options[selected-1];
    return nil;
  }

  void setSelection(u32 i)
  {
    selected = i + 1;
  }

  void clearSelection() 
  {
    selected = 0;
  }

  b8 isSelection(u32 i) const
  {
    return i + 1 == selected;
  }
};

$ if false then

/* ============================================================================
 */
@ui.widget(ComboBox,
schema
{
  font        = inherit;
  font_height = inherit;
  text_color  = inherit;

  option_height: f32 = 15;
  box_height: f32 = 15;
},
struct
{
  typedef SmallArray<String, 8> OptionsArray;

  template<typename TContext>
  using OnOptionSelectedTyped = void (*)(TContext*, u32);
  using OnOptionSelected = OnOptionSelectedTyped<void>;

  b8 open;

  void* context;
  OnOptionSelected onOptionSelected;

  DrawCmd* options_background;

  TextState selected_option;

  struct Option
  {
    String name; // owned
    DrawCmd* drawcmd;
  };

  Array<Option> options;

  static ComboBox* make(
      UI& ui, 
      void* context,
      OnOptionSelected onOptionSelected,
      Slice<String> options,
      String id = nil);

  template<typename TContext>
  static ComboBox* make(
      UI& ui, 
      TContext* context,
      OnOptionSelectedTyped<TContext> onOptionSelected,
      Slice<String> options,
      String id = nil)
  {
    union
    {
      OnOptionSelectedTyped<TContext> x;
      OnOptionSelected y;
    } selected { onOptionSelected };

    return make(ui, context, selected.y, options, id);
  }

  String getSelectedOptionName()
  {
    return selected_option.buffer.asStr();
  }
    
  void update(UI* ui, UpdateReason reason) override;
  void evaluate(UI* ui) override;
  void generate(UI* ui) override;

  vec2f calcVisualArea() override;

  void reportDrawCmds(UI* ui, DrawCmdLists& lists) override
  {
    lists.pre_children.push(selected_option.dc);
    if (open)
    {
      lists.top_most.push(options_background);
      
      for (const Option& option : options)
        lists.top_most.push(option.drawcmd);
    }
  }
})

$ end

}
