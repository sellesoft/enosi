$ require "common"
$ local ui = require "ui.UI"

@@lpp.import "ui/widgets/ComboBox.lh"
@@lpp.import "ui/UI.lh"
@@lpp.import "Engine.lh"

#include "iro/Logger.h"

namespace ui
{

@log.ger(ui.cbox, Info)

/* ----------------------------------------------------------------------------
 */
b8 ComboBox::init(UI& ui)
{
  if (!text.init(ui))
    return false;

  decor = ui.drawcmds.add();
  decor->alloc(&ui, gfx::putFilledRectCounts());

  return true;
}

/* ----------------------------------------------------------------------------
 */
void ComboBox::deinit(UI& ui)
{
  decor->remove(&ui);
  text.deinit(ui);
}

/* ----------------------------------------------------------------------------
 */
b8 ComboBox::update(
    ItemUpdateContext& ctx,
    Rect bounds, 
    const Options& options,
    const ComboBoxSkinDef& skin)
{
  const f32 option_stride = skin.text.font_height + skin.option_spacing;

  Rect visual_bounds = bounds;
  if (ctx.isFocusedId(&fid))
    visual_bounds.h += 
      (options.len - (hasSelection()? 1 : 0)) * option_stride - 
      skin.option_spacing;

  FocusFlags focus = 
    ctx.testFocus(fid, visual_bounds, MouseButton::Left, KeyState::Released);

  b8 clicked = false;
  b8 can_select = false;
  b8 draw_options = false;

  auto text_pos = bounds.pos() + skin.padding;
  auto text_size = vec2f(bounds.w - 2 * skin.padding.x, skin.text.font_height);

  auto decor_pos = vec2f(bounds.x, bounds.y);
  auto decor_size = vec2f(bounds.w, bounds.h);

  if (focus.test(FocusFlag::LostFocus))
  {
    can_select = false;
    draw_options = false;
  }
  else if (focus.test(FocusFlag::GainedFocus))
  {
    draw_options = true;
    decor_size.y += 
      (options.len - (hasSelection()? 1 : 0)) * option_stride - 
      skin.option_spacing;
  }
  else if (focus.test(FocusFlag::Focused) && 
           ctx.input.wasMouseButtonReleased(MouseButton::Left))
  {
    draw_options = false;
    can_select = true;
    clicked = true;
  }

  if (ctx.wasEvaluated())
    draw_options = ctx.isFocusedId(fid);

  if (!can_select && !draw_options)
    return false;

  // Ensure cached selection respects changing options.
  selected = min<u64>(options.len, selected);

  // Clear any previously drawn text.
  text.clear();

  f32 y = text_pos.y;

  for (s32 i = 0; i < options.len; ++i)
  {
    if (!isSelection(i))
    {
      y += option_stride;

      auto text_bounds = 
        Rect::from(vec2f(text_pos.x, y), text_size);

      if (draw_options)
        text.draw(
          ctx.ui,
          options[i],
          text_bounds,
          skin.text);

      if (can_select && ctx.isCursorInRect(text_bounds))
      {
        INFO("select ", i, "\n");
        setSelection(i);
        break;
      }
    }
  }

  String selection = getSelection(options);
  if (notnil(selection))
  {
    text.draw(
      ctx.ui,
      selection,
      Rect::from(text_pos, text_size),
      skin.text);
  }

  {
    auto [vp, ip] = decor->getPtrs(&ctx.ui);
    decor->counts_used = {};

    gfx::putFilledRect(
      vp, ip,
      &decor->counts_used,
      decor_pos,
      decor_size,
      skin.background_color);
  }

  if (clicked)
    ctx.unfocus(fid);

  return clicked;
}

/* ----------------------------------------------------------------------------
 */
void ComboBox::reportDrawCmds(UI& ui, DrawCmdLists& lists)
{
  DrawCmdList* list = 
    ui.isFocusedId(fid)
    ? &lists.top_most 
    : &lists.pre_children;

  list->push(decor);
  list->push(text.dc);
}


$ if false then

@defFileLogger(ui.combobox, Info);

/* ----------------------------------------------------------------------------
 */
ComboBox* ComboBox::make(
    UI& ui, 
    void* context,
    OnOptionSelected onOptionSelected,
    Slice<String> options,
    String name)
{
  auto* cb = ui.allocateAndInitItem<ComboBox>(name);
  if (cb == nullptr)
    return nullptr;

  cb->open = false;
  cb->context = context;
  cb->onOptionSelected = onOptionSelected;

  cb->options_background = ui.drawcmds.add();
  cb->options_background->alloc(&ui, gfx::putFilledRectCounts());

  if (!cb->selected_option.init(&ui, options[0]))
  {
    // TODO(sushi) a standard dealloc and deinit function on UI.
    mem::stl_allocator.deconstruct(cb);
    return nullptr;
  }

  cb->update_triggers = 
      UpdateReason::MouseReleased
    | UpdateReason::FocusLost;

  cb->options = Array<Option>::create(options.len);

  for (String& option : options)
  {
    Option* opt = cb->options.push();
    opt->name = option.allocateCopy();
    opt->drawcmd = ui.drawcmds.add();
  }

  return cb;
}

/* ----------------------------------------------------------------------------
 */
void ComboBox::update(UI* ui, UpdateReason reason)
{
  $ local this = ui.createItemContext("ComboBox", "this")

  INFO("ComboBox update ", (u32)reason, "\n");

  dirty = true;

  if (reason == UpdateReason::FocusLost)
  {
    open = false;
    return;
  }

  @@this.style:lookup(box_height, option_height)

  if (open && 
      ui->testFocusableRegion(
        {0.f, 0.f}, 
        size.yadd(@this.style.option_height * options.len())))
  {
    vec2f cursor_local = ui->input->mouse.window - pos_screen;
    

    if (cursor_local.y > @this.style.box_height)
    {
      u32 yoff = cursor_local.y - @this.style.box_height;
      u32 selection = yoff / u32(@this.style.option_height);

      selection = min<u32>(selection, options.len()-1);

      onOptionSelected(context, selection);

      Option* selected = &options[selection];
      selected_option.set(selected->name);
    }
 
    open = false;
  }
  else
    open = true;
}

/* ----------------------------------------------------------------------------
 */
void ComboBox::evaluate(UI* ui)
{
  size.y = 15;

  $ local this = ui.createItemContext("ComboBox", "this")
  @@this.style:lookup(font, option_height)

  if (open)
  {
    // size.y += @this.style.option_height * options.len();
  }

  selected_option.checkFont(@this.style.font, ui);
}

/* ----------------------------------------------------------------------------
 */
void ComboBox::generate(UI* ui)
{
  $ local this = ui.createItemContext("ComboBox", "this")

  @@this.style:lookup(
    size,
    option_height,
    box_height,
    font,
    font_height,
    text_color,
    border,
    margin,
    background_color)

  selected_option.cacheRenderer();
  defer { selected_option.freeRenderer(); };

  selected_option.initRenderer(
    @this.style.font_height,
    1.f,
    999.f,
    0,
    @this.style.text_color);

  selected_option.draw(ui, {0.f, 0.f});

  if (open)
  {
    gfx::Font* font = 
      gfx::Font::load(
        @this.style.font, 
        *ui->assetmgr,
        *ui->renderer);

    vec2f cursor = {0.f, @this.style.box_height};

    options_background->realloc(
      ui, 
      gfx::putFilledRectCounts() * options.len());

    options_background->counts_used = {};
    auto [vp,ip] = options_background->getPtrs(ui);

    for (Option& option : options)
    {
      Color option_bg_color;
      if ((&option-options.arr) % 2)
        option_bg_color = @this.style.background_color;
      else
        option_bg_color = 0.5f * @this.style.background_color;

      options_background->counts_used +=
        gfx::putFilledRect(
            vp, ip,
            options_background->counts_used,
            cursor,
            {size.x, @this.style.option_height},
            option_bg_color);

      TextRenderer option_renderer;
      option_renderer.init(
        option.name, 
        font,
        @this.style.font_height,
        1.f,
        999.f,
        0,
        @this.style.text_color);

      option_renderer.draw(ui, cursor, option.drawcmd);

      option_renderer.deinit();

      cursor.y += @this.style.option_height;
    }
  }

}

/* ----------------------------------------------------------------------------
 */
vec2f ComboBox::calcVisualArea()
{
  $ local this = ui.createItemContext("ComboBox", "this")

  if (open)
  {
    @@this.style:lookup(option_height)

    return {size.x, size.y + @this.style.option_height * options.len()};
  }
  else
    return size;
}

$ end

}

