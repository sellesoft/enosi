$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "ui/widgets/Button.lh"
@@lpp.import "ui/UI.lh"
@@lpp.import "Engine.lh"

#include "iro/containers/SmallArray.h"

static Logger logger = 
  Logger::create("ui.text"_str, Logger::Verbosity::Debug);

namespace ui
{

/* ----------------------------------------------------------------------------
 */
Button* Button::make(UI& ui, void* data, Action action, String name)
{
  auto* button = ui.allocateAndInitItem<Button>(name);
  if (button == nullptr)
    return nullptr;

  button->action = action;
  button->userdata = data;

  button->update_triggers = 
      UpdateReason::MousePressed
    | UpdateReason::MouseReleased;

  return button;
}

/* ----------------------------------------------------------------------------
 */
Button* Button::begin(UI& ui, void* data, Action action, String name)
{
  Button* button = make(ui, data, action, name);
  ui.beginItem(button);
  return button;
}

/* ----------------------------------------------------------------------------
 */
void Button::update(UI* ui, UpdateReason reason)
{
  if (!action)
    return;

  $ local this = ui.createItemContext("Button", "this")

  @@this.style:lookup(triggers)

  switch (reason)
  {
  case UpdateReason::MousePressed:
    if (@this.style.triggers.test(Pressed))
    {
      action(this, userdata, ButtonActivation::Pressed);
    }
    break;

  case UpdateReason::MouseReleased:
    if (@this.style.triggers.test(Released))
    {
      action(this, userdata, ButtonActivation::Released);
    }
    break;
  }
}

}
