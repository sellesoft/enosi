$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "ui/widgets/Button.lh"
@@lpp.import "ui/widgets/ButtonSkin.defs.lh"
@@lpp.import "ui/widgets/TextSkin.defs.lh"
@@lpp.import "ui/UI.lh"

#include "iro/containers/SmallArray.h"
#include "iro/Logger.h"

static Logger logger = 
  Logger::create("ui.text"_str, Logger::Verbosity::Debug);

namespace ui
{

/* ----------------------------------------------------------------------------
 */
b8 Button::init(UI& ui)
{
  background = ui.drawcmds.add();
  background->alloc(&ui, gfx::putFilledRectCounts());

  if (!text.init(ui))
    return ERROR("failed to init button text\n");

  ui.registerFocusableId(&fid);

  return true;
}

/* ----------------------------------------------------------------------------
 */
void Button::deinit(UI& ui)
{
  background->remove(&ui);
  text.deinit(ui);
}

/* ----------------------------------------------------------------------------
 */
Button::State Button::update(
    ItemUpdateContext& ctx,
    Rect bounds, 
    String str, 
    const ButtonSkinDef& skin)
{
  ctx.takeNextLayerId(&fid);
  
  text.clear();

  State state = State::None;
  const TextItemSkinDef* state_skin = &skin.normal;

  FocusFlags focus = 
    ctx.testFocus(fid, bounds, MouseButton::Left, KeyState::Released);

  if (focus.test(FocusFlag::Hovered))
  {
    if (ctx.input.isMouseButtonDown(MouseButton::Left))
    {
      state_skin = &skin.pressed;
      state = State::Pressed;
    }
    else if (ctx.input.wasMouseButtonReleased(MouseButton::Left))
    {
      state = State::Released;
      state_skin = &skin.hovered;
    }
    else
    {
      state_skin = &skin.hovered;
      state = State::Hovered;
    }
  }

  if (state_skin->text.font.isValid() && notnil(str))
  {
    // NOTE(sushi) we dont check if the item was evaluated here because 
    //             the text is given each update, so we don't know if it
    //             will have changed. It would be nice to avoid this somehow
    //             but its probably fine.
    auto text_size = 
      gfx::measureText(
        str,
        &*state_skin->text.font,
        state_skin->text.font_height,
        state_skin->text.tab_spaces);

    auto text_pos = bounds.pos() + vec2f(
      skin.text_align.x * (bounds.w - text_size.x),
      skin.text_align.y * (bounds.h - text_size.y));

    text.draw(
      ctx.ui,
      str,
      Rect::from(text_pos, text_size),
      state_skin->text);
  }
  
  Item::drawBackground(ctx.ui, bounds, background, state_skin->item);

  return state;
}

}
