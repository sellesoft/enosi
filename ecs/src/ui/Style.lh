/*
 *  Definition of parameters for styling ui Items.
 *
 *  This can be thought of as the CSS of the ui system.
 */

$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"
$ local ctx = reflect.ctx
$ local List = require "list"
$ local buffer = require "string.buffer"
$ local ui = require "ui.UI"

#include "math/vec.h"
#include "Color.h"

#include "iro/flags.h"
#include "iro/memory/memory.h"
#include "iro/containers/pool.h"
#include "iro/containers/avl.h"

using namespace iro;

namespace ui
{

$$$

-- * --------------------------------------------------------------------------

local prop_kinds = List{}
local stylePropKind = function(typename, unionname, kindname)
  prop_kinds:push 
  { 
    typename=typename,
    unionname=unionname,
    kindname=kindname,
  }
end

-- * --------------------------------------------------------------------------

local placePropKindEnums = function()
  prop_kinds:each(function(pk)
$$$
    $(pk.kindname),
$$$
  end)
end

-- * --------------------------------------------------------------------------

local placePropKindUnionMembers = function()
  prop_kinds:each(function(pk)
$$$
    $(pk.typename) $(pk.unionname);
$$$
  end)
end

$$$

/* ============================================================================
 */
@stylePropKind(u32, enum_value, Enum)
@stylePropKind(u64, flag_value, Flags)
@stylePropKind(Color, color, Color)
@stylePropKind(vec2f, v2, Vec2f)
@stylePropKind(vec4f, v4, Vec4f)

/* ============================================================================
 */
struct StyleMap
{
  struct Elem
  {
    enum class Kind
    {
    @placePropKindEnums
    };

    Kind kind;

    union
    {
    @placePropKindUnionMembers
    } value;

    u64 hash;
    str name;
  };

  typedef AVL<Elem, [](const Elem* e) { return e->hash; }> ElemMap;
  typedef Pool<Elem> ElemPool;

  ElemMap map;
  ElemPool pool;

  b8   init();
  void deinit();

  template<typename T>
  T getAs(str name, T def = {});

  template<typename T>
  void setAs(str name, T val);
};

}
