$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"
$ local ui = require "ui.UI"
 
@@lpp.import "ui/Item.lh"
@@lpp.import "ui/DrawCmd.lh"
@@lpp.import "ui/UI.lh"
@@lpp.import "Engine.lh"

#include "math/util.h"

static Logger logger =
  Logger::create("ui.item"_str, Logger::Verbosity::Info);

namespace ui
{

/* ----------------------------------------------------------------------------
 */
void Item::generate(UI* ui) 
{
  $ local this = ui.createItemContext("Item", "this")
  @@this.style:lookup(background_color, margin)

  DrawCmd* dc = drawcmds[0];

  auto [vp, ip] = dc->getPtrs(ui);

  vec2f tl = pos_screen + @this.style.margin.top_left;
  vec2f br = pos_screen + size - @this.style.margin.bottom_right;

  vec2i sum = {0,0};

  sum += 
    putFilledRect(
      vp, 
      ip,
      sum,
      tl,
      br - tl,
      @this.style.background_color);

  dc->counts_used = sum;
}

/* ----------------------------------------------------------------------------
 */
b8 Item::containsPoint(vec2f point)
{
  $ local this = ui.createItemContext("Item", "this")
  @@this.style:lookup(margin)

  vec2f tl = pos_screen + @this.style.margin.top_left;
  vec2f br = pos_screen + size - @this.style.margin.bottom_right;

  return math::pointInRect(point, tl, br - tl);
}

/* ----------------------------------------------------------------------------
 */
b8 Item::isHovered(UI* ui, HoverKind kind)
{
  switch (kind)
  {
  case HoverKind::Topmost: 
    return ui->hovered == this;

  case HoverKind::Area:
    return containsPoint(ui->eng->input.mouse.window);

  case HoverKind::Child:
    {
      Item* i = ui->hovered;
      while (i)
      {
        if (i == this)
          return true;
        if (i == ui->root)
          return false;
        i = i->node->parent->data;
      }
    }
    break;
  }
  return false;
}

/* ----------------------------------------------------------------------------
 */
void Item::calcVerticalScrollBarSizes(
    UI* ui,
    vec2f* bar_size,
    vec2f* handle_size)
{
  $ local this = ui.createItemContext("Item", "this")
  @@this.style:lookup(vertical_scrollbar_width, horizontal_scrollbar_height)
  
  vec2f content_start = adjustCursorStart(ui, vec2f(0,0));

  if (max_scroll.y != 0.f)
  {
    bar_size->y = size.y - content_start.y;
  }

  if (max_scroll.x != 0.f)
  {
    bar_size->y -= @this.style.horizontal_scrollbar_height;
  }

  bar_size->x = @this.style.vertical_scrollbar_width;

  f32 total_height = size.y - max_scroll.y;
  handle_size->y = bar_size->y * size.y / total_height;
  
  handle_size->x = @this.style.horizontal_scrollbar_height;
}

}

