$ local cmn = require "common"
$ local ui = require "ui.UI"
 
@@lpp.import "ui/Item.lh"
@@lpp.import "ui/DrawCmd.lh"
@@lpp.import "ui/UI.lh"
@@lpp.import "Engine.lh"
@@lpp.import "ui/ItemSkin.defs.lh"

#include "iro/Logger.h"
#include "math/util.h"

static Logger logger =
  Logger::create("ui.item"_str, Logger::Verbosity::Info);

namespace ui
{

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::isPointInRect(Rect bounds, vec2f point)
{
  return math::pointInRect(
      point,
      item.pos_screen + bounds.pos(),
      vec2f(bounds.size()));
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::isCursorInRect(Rect bounds)
{
  return isPointInRect(bounds, input.getCursorPos());
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::isCursorInHoverableRect(Rect bounds)
{
  if (ui.hovered != &item)
    return false;

  return isCursorInRect(bounds);
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::didCursorEnterRectThisFrame(Rect bounds)
{
  return isPointInRect(bounds, input.getCursorPos()) &&
         !isPointInRect(bounds, input.getCursorPos() - input.getCursorDelta());
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::didCursorExitRectThisFrame(Rect bounds)
{
  return !isPointInRect(bounds, input.getCursorPos()) &&
         isPointInRect(bounds, input.getCursorPos() - input.getCursorDelta());
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::wasMouseButtonPressedInRect(
    Rect bounds, 
    MouseButton button)
{
  return input.wasMouseButtonPressed(button) && 
         isCursorInHoverableRect(bounds);
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::wasMouseButtonReleasedInRect(
    Rect bounds,
    MouseButton button)
{
  return input.wasMouseButtonReleased(button) &&
         isCursorInHoverableRect(bounds);
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::isMouseButtonDownInRect(
    Rect bounds,
    MouseButton button)
{
  return input.isMouseButtonDown(button) &&
         isCursorInHoverableRect(bounds);
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::tryConsumeMousePress(MouseButton button)
{
  return input.tryConsumePressedMouseButton(button);
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::tryConsumeMousePressInRect(
    Rect bounds,
    MouseButton button)
{
  if (isCursorInRect(bounds))
    return input.tryConsumePressedMouseButton(button);
  return false;
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::tryConsumeMouseRelease(MouseButton button)
{
  return input.tryConsumeReleasedMouseButton(button);
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::tryConsumeMouseReleaseInRect(
    Rect bounds,
    MouseButton button)
{
  if (isCursorInRect(bounds))
    return input.tryConsumeReleasedMouseButton(button);
  return false;
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::tryConsumeMouseDown(MouseButton button)
{
  return input.tryConsumeDownMouseButton(button);
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::tryConsumeMouseDownInRect(
    Rect bounds,
    MouseButton button)
{
  if (isCursorInRect(bounds))
    return input.tryConsumeDownMouseButton(button);
  return false;
}

/* ----------------------------------------------------------------------------
 */
String ItemUpdateContext::tryConsumeCharInput()
{
  if (input.hasCharInput())
    return input.consumeCharInputs();
  return nil;
}

/* ----------------------------------------------------------------------------
 */
f32 ItemUpdateContext::tryConsumeScroll()
{
  f32 scroll = input.getScroll();
  ui.frame_input.consumeScroll();
  return scroll;
}

/* ----------------------------------------------------------------------------
 */
void ItemUpdateContext::drawDebugBorder(Rect bounds, Color color)
{
  bounds.x += item.pos_screen.x;
  bounds.y += item.pos_screen.y;

  auto [vp, ip] = 
    ui.dbg_cmd->realloc(
      &ui, ui.dbg_cmd->counts_used + gfx::putBordersCounts());

  gfx::putBorders(
    vp, ip,
    &ui.dbg_cmd->counts_used,
    {1.f,1.f,1.f,1.f},
    bounds.pos(),
    bounds.size(),
    color);
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::wasEvaluated() const
{
  return item.flags.test(ItemFlag::Evaluated);
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::isFocusedId(FocusableId id)
{
  return ui.isFocusedId(id);
}

/* ----------------------------------------------------------------------------
 */
b8 ItemUpdateContext::isFocusedId(FocusableId* id)
{
  if (!id->isValid())
    ui.registerFocusableId(id);
  return isFocusedId(*id);
}

/* ----------------------------------------------------------------------------
 */
void ItemUpdateContext::unfocus(FocusableId id)
{
  ui.unfocus(id);
}

/* ----------------------------------------------------------------------------
 */
void ItemUpdateContext::pushLayer(FocusableId fid, Rect bounds)
{
  auto* layer = ui.temp_alloc.construct<Layer>();
  auto* group = ui.temp_alloc.construct<Group>();

  group->bounds = bounds;

  layer->groups = group;

  Layer* next_layer = current_layer->next;
  if (next_layer)
  {
    while (next_layer->minor)
      next_layer = next_layer->next;

    layer->prev = next_layer;

    if (next_layer->next)
    {
      next_layer->next->prev = layer;
      layer->next = next_layer->next;
    }

    next_layer->next = layer;
    next_layer->minor = true;

    if (next_layer == top_layer)
      top_layer = layer;
  }
  else
  {
    top_layer = layer;
    layer->prev = current_layer;
    current_layer->next = layer;
  }

  current_layer = layer;
  current_group = group;
}

/* ----------------------------------------------------------------------------
 */
void ItemUpdateContext::popLayer()
{
  assert(current_layer->prev != nullptr);

  Layer* prev_major = current_layer->prev;
  while(prev_major->minor)
    prev_major = prev_major->prev;

  current_layer = prev_major;
  current_group = current_layer->groups;
}

/* ----------------------------------------------------------------------------
 */
void ItemUpdateContext::takeNextLayerId(FocusableId* pid)
{
  if (!pid->isValid())
  {
    pid->val = current_layer->next_id;
    current_layer->next_id += 1;
  }
}

/* ----------------------------------------------------------------------------
 */
Rect ItemUpdateContext::getBounds()
{
  return current_group->bounds;
}

/* ----------------------------------------------------------------------------
 */
FocusFlags ItemUpdateContext::testFocus(
    FocusableId id,
    Rect bounds,
    MouseButton focus_button,
    KeyState focus_state)
{
  assert(id.isValid());

  auto* fb = 
    ui.temp_alloc.construct<FocusableBounds>();

  fb->id = id;
  fb->bounds = bounds;

  fb->next = current_group->fbounds;
  current_group->fbounds = fb;
  
  FocusFlags flags = {};
  
  auto& pfs = ui.prev_focus_state;
  auto& fs = ui.focus_state;

  if (id == fs.hovered && current_layer->fid == fs.hovered_layer)
  {
    flags.set(FocusFlag::Hovered);

    if (id != pfs.hovered)
    {
      flags.set(FocusFlag::GainedHover);
      INFO("hover gain ", id.val, "\n");
    }
  }
  else if (id == pfs.hovered)
  {
    flags.set(FocusFlag::LostHover);
    INFO("hover loss ", id.val, "\n");
  }

  if (id == fs.focused)
  {
    flags.set(FocusFlag::Focused);
    drawDebugBorder(bounds, {0,255,0,255});

    if (id != pfs.focused)
    {
      flags.set(FocusFlag::GainedFocus);
      INFO("focus gain ", id.val, "\n");
    }
  }
  else if (id == pfs.focused)
  {
    flags.set(FocusFlag::LostFocus);
    INFO("focus loss ", id.val, "\n");
  }

  return flags;
}

/* ----------------------------------------------------------------------------
 */
b8 Item::init(UI& ui, String name)
{
  this->name = name;
  node = &ui.item_tree.addLast(ui.item_stack.head->data->node, this);
  setDirty();
  return true;
}

/* ----------------------------------------------------------------------------
 */
Item* Item::make(UI& ui, String name)
{
  return ui.allocateAndInitItem<Item>(name);
}

/* ----------------------------------------------------------------------------
 */
Item* Item::begin(UI& ui, String name)
{
  auto* item = Item::make(ui, name);
  ui.beginItem(item);
  return item;
}

/* ----------------------------------------------------------------------------
 */
void Item::drawBackground(
    UI& ui, 
    Rect bounds,
    DrawCmd* dc, 
    const ItemSkinDef& skin)
{
  auto [vp, ip] = dc->realloc(&ui, gfx::putFilledRectCounts());
  dc->counts_used = {};

  if (skin.texture.isValid())
    dc->tex = skin.texture->gfx_texture;

  gfx::putFilledRect(
    vp, ip,
    &dc->counts_used,
    bounds.pos(),
    bounds.size(),
    vec2f(skin.uv.x,             skin.uv.y),
    vec2f(skin.uv.x + skin.uv.w, skin.uv.y),
    vec2f(skin.uv.x + skin.uv.w, skin.uv.y + skin.uv.h),
    vec2f(skin.uv.x,             skin.uv.y + skin.uv.h),
    skin.color);
}

/* ----------------------------------------------------------------------------
 */
b8 Item::containsPoint(vec2f point)
{
  vec2f visual_area = calcVisualArea();

  vec2f tl = pos_screen + layout.margin.tl();
  vec2f br = pos_screen + visual_area - layout.margin.br();

  return math::pointInRect(point, tl, br - tl);
}

}

