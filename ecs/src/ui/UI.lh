/*
 *  UI system!
 *
 */

$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "ui/Item.lh"
@@lpp.import "ui/DrawCmd.lh"

@@lpp.import "graphics/Buffer.lh"
@@lpp.import "graphics/CompiledTexture.lh"
@@lpp.import "graphics/Pipeline.lh"
@@lpp.import "graphics/Shader.lh"
@@lpp.import "graphics/Pipeline.defs.lh"

@@lpp.import "input/InputState.lh"

#include "iro/containers/List.h"
#include "iro/containers/Pool.h"
#include "iro/containers/LinkedPool.h"
#include "iro/containers/Tree.h"
#include "iro/memory/Bump.h"
#include "math/Rect.h"

namespace gfx
{
  struct Buffer;
  struct Renderer;
}

struct InputMgr;

namespace ui
{

/* ============================================================================
 */
struct UI
{
  enum
  {
    MaxVertices = 0xffff,
    MaxIndices = (MaxVertices / 4) * 6,
    PushConstantSize = 16 * sizeof(f32),
  };

  // Root item of anything in the item tree.
  Item* root;

  // The currently hovered item or nullptr if none.
  Item* hovered;

  // The currently focused item, eg. the last item clicked on.
  Item* focused;

  // TODO(sushi) the stack prob does not need to be a whole list!
  SList<Item> item_stack;

  typedef Tree<Item> ItemTree;

  ItemTree item_tree;

  Pool<DrawCmd> drawcmds;

  SList<DrawCmd> free_drawcmds;

  // TODO(sushi) maybe these should be lists, could also be AVL?
  Array<DrawCmd*> free_drawcmds_vertex_sorted;
  Array<DrawCmd*> free_drawcmds_index_sorted;

  gfx::Shader vertex_shader;
  gfx::Shader fragment_shader;
  gfx::Pipeline pipeline;
  gfx::PipelineDefRef pipeline_defref;

  gfx::Buffer vertex_buffer;
  gfx::Buffer index_buffer;
  u64 vertex_next;
  u64 index_next;

  vec2f scrollbar_offset;
  Item* scrolling_item;
  b8 horizontal_scroll;

  gfx::Texture white_texture;

  mem::LenientBump temp_alloc;

  DrawCmd* dbg_cmd;

  static const s32 cursor_track_len = 30;
  vec2f cursor_track[cursor_track_len];
  s32 cursor_track_pos = 0;

  // NOTE(sushi) don't like doing this, but currently moving UI to be under
  //             Client and removing it just storing whatever stores it
  //             (eg. it used to just store an Engine*) to move towards it
  //             being passed what it needs on update and init and stuff.
  //             This makes Item callbacks annoying, though, as then they
  //             all have to also be passed that stuff, which sucks. So I'm
  //             cheating for now and just storing systems it should be using
  //             instead. Eventually though this needs to be changed.
  //             Especially removing the asset mgr, I don't like UI logic
  //             managing assets (like, inside widgets) and would like to
  //             move towards these things being stored on data driven
  //             style structures, where each asset we use is known there
  //             and loaded all at one time.
  AssetMgr* assetmgr;
  gfx::Renderer* renderer;

  Rect viewport;

  struct InitParams
  {
    AssetMgr& assetmgr;
    gfx::Renderer& renderer;

    gfx::Texture white_texture;

    Rect viewport;

    AssetLoader loader;
  };

  b8   init(InitParams& params);
  void deinit();

  struct UpdateParams
  {
    InputState input;
  };

  b8 update(const UpdateParams& params);

  // Helper for widgets to allocate themselves and initialize base Item
  // stuff.
  template<typename T>
  T* allocateAndInitItem(String id)
  {
    auto* item = (T*)mem::stl_allocator.construct<T>();

    if (!item->Item::init(*this, id))
    {
      mem::stl_allocator.deconstruct(item);
      return nullptr;
    }

    return item;
  }

  void destroyItem(Item* item);
  void destroyItemChildren(Item* item);

  void beginItem(Item* item);
  void endItem();

  template<typename TItem>
  void end() { endItem(); }

  void setViewport(Rect viewport)
  {
    this->viewport = viewport;
    root->setDirty();
  }

private:
  friend ItemUpdateContext;

  // The input state of an 'update'. Inputs may be consumed from this 
  // state by either UI or Items.
  InputState frame_input;

  Item* eval_break;

  // A type storing a DrawCmd to be drawn later than when it was reported.
  // This happens in cases like top-most drawcmds.
  struct DeferredDrawCmd
  {
    mat3x2 transform;
    DrawCmd* drawcmd;
  };

  typedef SmallArray<DeferredDrawCmd, 4> DeferredDrawCmdList;

  struct UpdateTreeContext
  {
    DeferredDrawCmdList* top_most_drawcmds = nullptr;
    const mat3x2* current_transform = nullptr;
    Item* hovered = nullptr;
    DrawCmdList* debug_cmds;

    UpdateTreeContext inherit(const mat3x2* current_transform)
    {
      return
      {
        .top_most_drawcmds = top_most_drawcmds,
        .current_transform = current_transform,
        .debug_cmds = debug_cmds,
      };
    }
  };

  void updateTree(ItemNode* node, UpdateTreeContext& ctx);

  struct FlexContext
  {
    // Set when the parent of the evaluating item is a flex container.
    b8 is_container;
    // Set when the parent is displaying items in a row.
    b8 disp_horizontal;
    // Sum of flex sized child ratios.
    f32 ratio_sum;
    // Size that the parent can fit flexed items in.
    f32 effective_size;
    // How many times we much ceil a child's size rather than floor it.
    u32 n_ceils;
  };

  void evalItemBranch(ItemNode* node, FlexContext* flex);

  void emitDrawCmd(
    DrawCmd* drawcmd,
    Item* item,
    vec4f current_scissor);

  void emitDrawCmds(DeferredDrawCmdList& drawcmds);
};

}




