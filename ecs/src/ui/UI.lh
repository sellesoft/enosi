/*
 *  UI system!
 *
 */

$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"
$ local ui = require "ui.UI"

@@lpp.import "ui/Item.lh"
@@lpp.import "ui/DrawCmd.lh"
@@lpp.import "ui/FontLib.lh"

#include "iro/containers/list.h"
#include "iro/containers/pool.h"
#include "iro/containers/linked_pool.h"
#include "iro/containers/Tree.h"

namespace gfx
{
  struct Buffer;
  struct Renderer;
}

struct Window;
struct Engine;
struct WindowResized;

namespace ui
{

/* ============================================================================
 */
struct UI
{
  // Root item of anything in the item tree.
  Item* root;
  
  // The currently hovered item or nullptr if none.
  Item* hovered;

  // TODO(sushi) the stack prob does not need to be a whole list!
  SList<Item> item_stack;
  
  typedef Tree<Item> ItemTree;

  ItemTree item_tree;

  Pool<DrawCmd> drawcmds;

  SList<DrawCmd> free_drawcmds;

  // TODO(sushi) maybe these should be lists, could also be AVL?
  Array<DrawCmd*> free_drawcmds_vertex_sorted;
  Array<DrawCmd*> free_drawcmds_index_sorted;

  gfx::Buffer* buffer;
  u64 vertex_next;
  u64 index_next;

  FontLib fontlib;

  Engine* eng;

  b8 init(Engine& engine);
  void deinit();

  b8 update(Engine& engine);

  b8 initItem(str id, Item* item);

  // TODO(sushi) someway to reuse styles if I ever need it.
  template<typename TItem>
  TItem* make(str id = nil);

  // It's actually wild that this works and I'm not sure how much I like it
  // but it's nice.
  template<typename TItem, typename... TArgs>
  TItem* make(str id, TArgs... args);

  template<typename TItem>
  TItem* begin(str id = nil) 
  {
    TItem* item = make<TItem>();
    item_stack.push(item);
    return item;
  }

  template<typename TItem, typename... TArgs>
  TItem* begin(str id, TArgs... args)
  {
    TItem* item = make<TItem>(id, args...);
    item_stack.push(item);
    return item;
  }

  void endItem();

  template<typename TItem>
  void end() { endItem(); }

private:

  void updateTree(ItemNode* node, Engine& engine);

  struct FlexContext
  {
    // Set when the parent of the evaluating item is a flex container.
    b8 is_container;
    // Set when the parent is displaying items in a row.
    b8 disp_horizontal;
    // Sum of flex sized child ratios.
    f32 ratio_sum;
    // Size that the parent can fit flexed items in.
    f32 effective_size;
    // How many times we much ceil a child's size rather than floor it.
    u32 n_ceils;
  };

  void evalItemBranch(ItemNode* node, FlexContext* flex);
  void genItemBranch(ItemNode* node);

  b8 findHoveredItem(ItemTree::Node* node);

  void onWindowResized(WindowResized& x);
};

}




