/*
 *  UI system!
 */

$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "graphics/Buffer.lh"
@@lpp.import "graphics/CompiledTexture.lh"
@@lpp.import "graphics/Pipeline.lh"
@@lpp.import "graphics/Shader.lh"
@@lpp.import "graphics/Pipeline.defs.lh"

@@lpp.import "input/InputState.lh"

@@lpp.import "ui/Skin.defs.lh"

@@lpp.import "ui/TextEdit.lh"

#include "iro/containers/StackArray.h"
#include "iro/containers/EnumArray.h"
#include "iro/memory/Bump.h"
#include "iro/memory/LinkedHeap.h"
#include "math/Rect.h"
#include "math/mat.h"
#include "Color.h"

namespace gfx
{
  struct Buffer;
  struct Renderer;
}

struct InputMgr;
struct mat3x2;

namespace ui
{

struct UI;
struct TextEdit;
struct Group;

/* ============================================================================
 */
enum class FocusFlag
{
  Focused,
  Hovered,

  PrimaryDown,
  PrimaryPressed,
  PrimaryReleased,

  SecondaryDown,
  SecondaryPressed,
  SecondaryReleased,

  TertiaryDown,
  TertiaryPressed,
  TertiaryReleased,

  COUNT
};
typedef Flags<FocusFlag> FocusFlags;

/* ============================================================================
 */
struct ItemId
{
  u64 val = 0;

  bool operator == (const ItemId& rhs) const
  {
    return val == rhs.val;
  }

  DefineNilTrait(ItemId, {0}, x.val == 0);
};

/* ============================================================================
 */
struct CombinedItemId
{
  u64 val = 0;

  bool operator == (const CombinedItemId& rhs) const
  {
    return val == rhs.val;
  }

  DefineNilTrait(CombinedItemId, {0}, x.val == 0);
};

/* ============================================================================
 */
struct Item
{
  CombinedItemId id = {};
    
  // Id of the popup this was placed in.
  CombinedItemId parent_popup = {};
  Rect bounds = {};

  Item* next = nullptr;
};

/* ============================================================================
 */
struct Cmd
{
  Cmd* next;

  // The Group that was active when this Cmd was pushed.
  Group* group;

  virtual void execute(UI& ui, gfx::Renderer& renderer) = 0;
};

/* ============================================================================
 */
struct TransformCmd : Cmd
{
  mat3x2* transform;

  void execute(UI& ui, gfx::Renderer& renderer) override;
};

/* ============================================================================
 */
struct ScissorCmd : Cmd
{
  Rect bounds = {};

  void execute(UI& ui, gfx::Renderer& renderer) override;
};

/* ============================================================================
 */
struct QuadDrawCmd : Cmd
{
  gfx::Texture texture;
  Color color;
  Rect bounds;
  vec4f uv;

  void execute(UI& ui, gfx::Renderer& renderer) override;
};

/* ============================================================================
 */
struct BorderDrawCmd : Cmd
{
  Rect bounds;
  Rect offsets;
  Color color;

  void execute(UI& ui, gfx::Renderer& renderer) override;
};

/* ============================================================================
 */
struct LineDrawCmd : Cmd
{
  vec2f start;
  vec2f end;
  Color color;

  void execute(UI& ui, gfx::Renderer& renderer) override;
};

/* ============================================================================
 */
enum class GroupScissor
{
  Self,
  Parent,
  None,
};

/* ============================================================================
 */
struct Group
{
  // This Group's local bounds.
  Rect bounds = {};

  // This group's scissor in screen space.
  Rect scissor = {};

  // Extent of things drawn within this Group (widgets as well as child 
  // Groups) relative to the group's screen position.
  Rect extents = {};

  mat3x2 transform = {};

  GroupScissor scissoring = GroupScissor::Self;

  Item* items = nullptr;

  Group* parent = nullptr;
  Group* next = nullptr;
};

/* ============================================================================
 *  TODO(sushi) it would be nice to eliminate this to cut down the amount of 
 *              layers to 2, but not sure how at the moment without sacrificing
 *              the idea of Layers being actual layers.
 */ 
struct Panel
{
  Item item = {}; // NOTE(sushi) this is largely unused I believe.
  
  Group* groups = nullptr;
  Group* current_group = nullptr;

  Panel* parent = nullptr;
  Panel* next = nullptr;
};

/* ============================================================================
 */
enum class LayerFlag
{
  TopMost,

  COUNT
};
typedef Flags<LayerFlag> LayerFlags;

/* ============================================================================
 *  TODO(sushi) it may be more useful to allow users to inject commands 
 *              at either end of the command list, as trying to solve 
 *              the problem I want to solve with this can still be broken
 *              if something decides to draw to a sublayer before something
 *              else and idk immediate mode ui is weird.
 */
enum class Sublayer
{
  Bottom,
  Middle,
  Top,

  COUNT
};

/* ============================================================================
 */
struct CmdList
{
  Cmd* first = nullptr;
  Cmd* last = nullptr;

  CmdList* prev = nullptr;
};

/* ============================================================================
 */
struct Layer
{
  Panel* panels = nullptr;
  Panel* current_panel = nullptr;

  Layer* prev = nullptr;
  Layer* next = nullptr;

  // A stack of CmdLists created externally. Usually used to inject 
  // a series of commands in a specific order. If nullptr, then 
  // Cmds will be pushed to the normal CmdList of the active Sublayer.
  CmdList* cmd_list_stack = nullptr;

  CmdList cmd_list = {};

  void pushCmd(Cmd* cmd);
};

/* ============================================================================
 *  State intended to be kept persistent by users of TextFields.
 */
struct TextFieldState
{
  // X offset of this field's text. Used to follow the cursor when its moved
  // outside of the visible text.
  f32 x_offset;

  // State tracking a buffer to edit as well as the cursor that moves through
  // the buffer.
  TextEdit edit;
};

/* ============================================================================
 */
struct ScrollBarState
{
  f32 scroll_value;
};

/* ============================================================================
 */
struct PersistentState
{
  CombinedItemId id;

  void* ptr;
  u64   size;
};

/* ============================================================================
 */
struct PersistentStateMgr
{
  enum
  {
    c_MaxStates = 256,
    c_HeapSize = unit::kilobytes(4)
  };

  void* heap_ptr;
  mem::LinkedHeap heap;

  PersistentState states[c_MaxStates];
  u64 num_states;

  b8 init(mem::Allocator* allocator);
  void deinit(mem::Allocator* allocator);

  struct GetResult
  {
    PersistentState* pstate;
    b8 just_created;
  };

  GetResult registerOrGetState(CombinedItemId id, u64 size);
};

/* ============================================================================
 */
enum class PopupFlag
{
  // Close popup when an input is made elsewhere.
  Dismissable,
  
  COUNT
};
typedef Flags<PopupFlag> PopupFlags;

/* ============================================================================
 */
struct UI
{
  enum
  {
    c_MaxVertices = 0xffff,
    c_MaxIndices = (c_MaxVertices / 4) * 6,
    c_PushConstantSize = 16 * sizeof(f32),
  };
 
  struct InitParams
  {
    gfx::Renderer& renderer;
    gfx::Texture white_texture;
    Rect viewport;
    AssetLoader loader;
  };

  b8   init(InitParams& params);
  void deinit(gfx::Renderer& renderer);

  struct FrameParams
  {
    // The input state to be applied during this frame.
    InputState input;

    // The viewport drawn into this frame.
    Rect viewport;
  };

  void beginFrame(const FrameParams& params);
  void endFrame(InputState* consumed_input = nullptr);

  // NOTE(sushi) UI state is not cleared in endFrame but here, for now.
  //             I need to clean that up later but i want to be done with 
  //             renderer rework !
  void render(gfx::Renderer& renderer, Rect viewport);

  Rect getBounds() const 
  { 
    return Rect::from({0,0}, getCurrentGroup()->bounds.size());
  }

  f32 getWidth() const { return getCurrentGroup()->bounds.w; }
  f32 getHeight() const { return getCurrentGroup()->bounds.h; }

  void putQuad(Rect bounds, gfx::Texture texture, vec4f uv, Color color);
  void putQuad(Rect bounds, gfx::Texture texture, Color color);
  void putQuad(Rect bounds, Color color);

  FocusFlags putFocusableBounds(ItemId id, Rect bounds)
    { return putFocusableBounds(getCombinedId(id), bounds); }
  FocusFlags putFocusableBounds(CombinedItemId id, Rect bounds);

  // Pushes a layer and starts a new panel at the given bounds with the 
  // given id.
  void pushLayer(ItemId id, Rect bounds, LayerFlags flags);

  void pushLayer(
    ItemId id, 
    Rect bounds, 
    LayerFlags flags, 
    GroupScissor scissoring)
  {
    pushLayer(getCombinedId(id), bounds, flags, scissoring);
  }

  void pushLayer(
    CombinedItemId id, 
    Rect bounds, 
    LayerFlags flags, 
    GroupScissor scissoring);

  void popLayer();

  void beginCmdFrontInjection();
  void endCmdFrontInjection();

  // Begins a new panel.
  void beginPanel(ItemId id, Rect bounds);
  void beginPanel(ItemId id, Rect bounds, Panel* prev);

  void beginPanel(
    ItemId id, 
    Rect bounds, 
    Panel* prev, 
    GroupScissor scissoring)
  {
    beginPanel(getCombinedId(id), bounds, prev, scissoring);
  }

  void beginPanel(
    CombinedItemId id,
    Rect bounds,
    Panel* prev,
    GroupScissor scissoring);

  void endPanel();

  void beginGroup(Rect bounds, GroupScissor scissoring = GroupScissor::Self);
  void endGroup();

  void openPopup(ItemId id) { openPopup(getCombinedId(id)); }
  void openPopup(CombinedItemId id);

  void closePopup(ItemId id) { closePopup(getCombinedId(id)); }
  void closePopup(CombinedItemId id);
  void closePopup();

  b8 beginPopup(ItemId id, Rect bounds, PopupFlags flags = {})
  {
    return beginPopup(getCombinedId(id), bounds, flags);
  }

  b8 beginPopup(CombinedItemId id, Rect bounds, PopupFlags flags = {});
  void endPopup();

  b8 isPopupOpen(ItemId id) const { return isPopupOpen(getCombinedId(id)); }
  b8 isPopupOpen(CombinedItemId id) const;

  // Places a basic 'item', a decorated rect basically.
  void putItem(Rect bounds, const ItemSkin& skin);

  vec2f getLocalCursorPos() const;

  // Places undecorated text.
  // TODO(sushi) basic text functions that don't require a skin
  //             and use a default font (gohu, of course) stored on UI.
  vec2f putText(Rect bounds, String text, const TextSkin& skin);

  // Places text with a background and various other decor (eventually).
  void putTextItem(Rect bounds, String text, const TextItemSkin& skin);

  // Returns true if clicked.
  b8 putButton(
    ItemId id, 
    Rect bounds, 
    String text, 
    const ButtonSkin& skin);

  // Places a text field that edits some text specified in the state.
  b8 putTextField(
    ItemId id,
    Rect bounds, 
    TextFieldState* state,
    const TextFieldSkin& skin);

  // Variant of the above which just takes a buffer of text to edit. The 
  // state of the text field is managed internally by UI. If the field goes
  // unused for too long its state will be cleared. To avoid this, use the 
  // above function with a TextFieldState stored elsewhere.
  b8 putTextField(
    ItemId id,
    Rect bounds,
    TextEdit::Buffer buffer,
    const TextFieldSkin& skin);

  b8 beginDropDown(
    ItemId id, 
    Rect bounds,
    f32 open_height,
    String selected_text,
    const DropDownSkin& skin);
  
  void endDropDown();

  void beginScrollGroup(ItemId id, Rect bounds, const ScrollBarSkin& skin);
  void endScrollGroup(const ScrollBarSkin& skin);

  void pushGroupRenderState(Group* group);

  // Bump allocator for memory allocated throughout a UI frame.
  mem::Bump frame_allocator;

  Rect viewport = {};

  // Graphics stuff.
  gfx::Pipeline pipeline;
  gfx::PipelineDefRef pipeline_defref;

  gfx::Texture white_texture;

  gfx::Buffer vertex_buffer;
  gfx::Buffer index_buffer;

  // True when a UI frame is in progress.
  b8 in_frame = false;

  // The input state of an update. Inputs may be consumed from this 
  // state by either UI or Items.
  InputState frame_input;

  vec2i draw_counts = {};
  
  enum class InternalPopupFlag
  {
    JustOpened,

    COUNT
  };
  typedef Flags<InternalPopupFlag> InternalPopupFlags;

  // Data relevant to an opened popup.
  struct PopupData
  {
    CombinedItemId id;
    PopupFlags flags;
    InternalPopupFlags internal_flags;

    void reset()
    {
      id = nil;
      flags.clear();
      internal_flags.clear();
    }
  };

  StackArray<PopupData, 16> open_popups;

  // Stack of popups that have been begun.
  StackArray<PopupData*, 16> popup_stack;

  PopupData* getOpenPopupData(CombinedItemId id);

  struct FocusState
  {
    Item focused;
    Item hovered;
    FocusFlags flags;
    // Cursor position in local space of the focused Item captured when it is
    // pressed.
    vec2f pressed_cursor_offset;
  };

  FocusState prev_focus_state;
  FocusState focus_state;
  FocusState next_focus_state;

  b8 isFocusedItem(ItemId id) const 
    { return isFocusedItem(getCombinedId(id)); }
  b8 isFocusedItem(CombinedItemId id) const 
    { return focus_state.focused.id == id; }

  b8 isHoveredItem(ItemId id) const
    { return isHoveredItem(getCombinedId(id)); }
  b8 isHoveredItem(CombinedItemId id) const
    { return focus_state.hovered.id == id; }

  FocusFlags getFocus() const
    { return focus_state.flags; }

  void drawDebugRect(Rect rect, Color color = 0xff0000ff);
  void drawDebugBorder(Rect rect, Color color = 0xff0000ff);
  void drawDebugLine(vec2f start, vec2f end, Color color = 0xff0000ff);

  Cmd* debug_cmds = nullptr;

  // The initial Layer created on frame start.
  Layer* root_layer = nullptr;

  // The current layer being operated on this frame.
  Layer* current_layer = nullptr;

  PersistentStateMgr persistent_state_mgr;

  StackArray<CombinedItemId, 64> id_stack;
  CombinedItemId current_id = {};

  void pushId(ItemId id) { pushId(getCombinedId(id)); }
  void pushId(CombinedItemId id);
  void popId();

  template<typename T>
  b8 registerOrGetPersistentState(CombinedItemId id, T** out_state)
  {
    PersistentStateMgr::GetResult result = 
      persistent_state_mgr.registerOrGetState(id, sizeof(T));

    if (result.pstate == nullptr)
      return false;

    *out_state = (T*)result.pstate->ptr;
    return result.just_created;
  }

  template<typename T>
  T* getPersistentState(CombinedItemId id)
  {
    PersistentStateMgr::GetResult result = 
      persistent_state_mgr.registerOrGetState(id, sizeof(T));

    assert(result.pstate != nullptr && !result.just_created);

    return (T*)result.pstate->ptr;
  }

  template<typename T>
  b8 registerOrGetPersistentState(ItemId id, T** out_state)
  {
    return registerOrGetPersistentState(getCombinedId(id), out_state);
  }

  void pushConstantFromTransform(mat3x2 transform, gfx::Renderer& renderer);

  // Combines the given ids.
  CombinedItemId combineIds(ItemId a, ItemId b) const;
  CombinedItemId combineIds(CombinedItemId a, ItemId b) const;

  // Combines the given id with the id of the current panel.
  CombinedItemId getCombinedId(ItemId id) const;

  ItemId generateIdFromPointer(void* ptr) const
  {
    // TODO(sushi) prob want something more robust than this.
    return ItemId{(u64)ptr};
  }

  ItemId generateIdFromInteger(s64 i) const
  {
    return ItemId{ (u64)i };
  }

  Layer* getCurrentLayer() const { return current_layer; }
  Panel* getCurrentPanel() const { return getCurrentLayer()->current_panel; }
  Group* getCurrentGroup() const { return getCurrentPanel()->current_group; }

  void expandCurrentGroupExtents(Rect bounds)
  {
    getCurrentGroup()->extents.expandToContain(bounds);
  }
};

}

consteval ui::ItemId operator ""_fid(const char* c, size_t s)
{
  return ui::ItemId{operator ""_hashed(c,s)};
}




