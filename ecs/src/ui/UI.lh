/*
 *  UI system!
 *
 */

$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "ui/Item.lh"
@@lpp.import "ui/DrawCmd.lh"

@@lpp.import "graphics/CompiledTexture.lh"
@@lpp.import "graphics/Buffer.lh"

#include "iro/containers/List.h"
#include "iro/containers/Pool.h"
#include "iro/containers/LinkedPool.h"
#include "iro/containers/Tree.h"
#include "iro/memory/Bump.h"

namespace gfx
{
  struct Buffer;
  struct Renderer;
}

struct Window;
struct Engine;
struct WindowResized;
struct PostReload;

namespace ui
{

static constexpr u32 MAX_VERTICES = 0xffffff;
static constexpr u32 MAX_INDICES = 0xffffff;

/* ============================================================================
 */
struct UI
{
  // Root item of anything in the item tree.
  Item* root;
  
  // The currently hovered item or nullptr if none.
  Item* hovered;

  // TODO(sushi) the stack prob does not need to be a whole list!
  SList<Item> item_stack;
  
  typedef Tree<Item> ItemTree;

  ItemTree item_tree;

  Pool<DrawCmd> drawcmds;

  SList<DrawCmd> free_drawcmds;

  // TODO(sushi) maybe these should be lists, could also be AVL?
  Array<DrawCmd*> free_drawcmds_vertex_sorted;
  Array<DrawCmd*> free_drawcmds_index_sorted;

  gfx::Buffer vertex_buffer;
  gfx::Buffer index_buffer;
  u64 vertex_next;
  u64 index_next;

  Engine* eng;

  vec2f scrollbar_offset;
  Item* scrolling_item;
  b8 horizontal_scroll;

  gfx::Texture white_texture;

  mem::LenientBump temp_alloc;

  b8 init(Engine& engine);
  void deinit();

  b8 update(Engine& engine);

  // Helper for widgets to allocate themselves and initialize base Item 
  // stuff.
  template<typename T>
  T* allocateAndInitItem(String id)
  {
    auto* item = (T*)mem::stl_allocator.construct<T>();

    if (!item->init(*this, id))
    {
      mem::stl_allocator.deconstruct(item);
      return nullptr;
    }

    return item;
  }

  Item* allocateAndInitItem(u64 size, String id);

  void beginItem(Item* item);
  void endItem();

  template<typename TItem>
  void end() { endItem(); }

private:

  void updateTree(ItemNode* node, const mat3x2& current_transform);

  struct FlexContext
  {
    // Set when the parent of the evaluating item is a flex container.
    b8 is_container;
    // Set when the parent is displaying items in a row.
    b8 disp_horizontal;
    // Sum of flex sized child ratios.
    f32 ratio_sum;
    // Size that the parent can fit flexed items in.
    f32 effective_size;
    // How many times we much ceil a child's size rather than floor it.
    u32 n_ceils;
  };

  void evalItemBranch(ItemNode* node, FlexContext* flex);
  void genItemBranch(ItemNode* node);

  b8 findHoveredItem(ItemTree::Node* node);

  void onWindowResized(WindowResized& x);

  void onPostReload(PostReload& _);
};

}




