/*
 *  Tracker of input state.
 */

$ require "common"

#include "input/Keys.h"
#include "math/vec.h"

#include "iro/containers/BitArray.h"

using namespace iro;

struct Engine;

struct InputMgr
{
  typedef EnumBitArray<Key> KeyMap;
  typedef EnumBitArray<MouseButton> MouseButtonMap;
  
  KeyMap keys_old;
  KeyMap keys_new;
  KeyMap keys_real;

  MouseButtonMap mouse_old;
  MouseButtonMap mouse_new;
  MouseButtonMap mouse_real;

  struct
  {
    vec2f screen;
    vec2f window;
  } mouse;

  f32 scroll;

  u8 chars[8];
  u8 char_count;
  u8 real_char_count;

  b8   init(Engine& engine);
  void deinit();

  b8 update(Engine& engine);

  b8 isKeyDown(Key key)
  {
    return keys_new.test(key);
  }
  b8 wasKeyPressed(Key key)
  {
    return keys_new.test(key) && !keys_old.test(key);
  }
  b8 wasKeyReleased(Key key)
  {
    return !keys_new.test(key) && keys_old.test(key);
  }
  b8 isMouseButtonDown(MouseButton button) 
  {
    return mouse_new.test(button);
  }
  b8 wasMouseButtonPressed(MouseButton button)
  {
    return mouse_new.test(button) && !mouse_old.test(button);
  }
  b8 wasMouseButtonReleased(MouseButton button)
  {
    return !mouse_new.test(button) && mouse_old.test(button);
  }
  b8 anyMouseButtonPressed()
  {
    return wasMouseButtonPressed(MouseButton::Left) ||
           wasMouseButtonPressed(MouseButton::Right) ||
           wasMouseButtonPressed(MouseButton::Middle);
  }
  b8 anyMouseButtonReleased()
  {
    return wasMouseButtonReleased(MouseButton::Left) ||
           wasMouseButtonReleased(MouseButton::Right) ||
           wasMouseButtonReleased(MouseButton::Middle);
  }
  b8 anyMouseButtonDown()
  {
    return isMouseButtonDown(MouseButton::Left) ||
           isMouseButtonDown(MouseButton::Right) ||
           isMouseButtonDown(MouseButton::Middle);
  }
};  
 
