$ local cmn = require "common"

@lpp.import "Engine.lh"
@lpp.import "input/InputMgr.lh"
@lpp.import "input/Input.events.lh"

#include "iro/Logger.h"

@log.ger(inputmgr, Info)

/* ----------------------------------------------------------------------------
 */
b8 InputMgr::init(Engine& engine)
{
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 InputMgr::update(Engine& engine)
{
  keys_old = keys_new;
  mouse_old = mouse_new;
  keys_new = keys_real;
  mouse_new = mouse_real;

  char_count = real_char_count;
  real_char_count = 0;

$ if false then
$ local function forEachKey()
  for (Key key = Key::A; (u32)key < (u32)Key::COUNT; key = (Key)((u32)key + 1))
$ end

  if (anyKeyDown())
  {
    @log.info("DOWN: ");
    @forEachKey
    {
      if (isKeyDown(key))
        @log.info(getKeyStr(key), ' ');
    }
    @log.info('\n');
  }

  if (anyKeyPressed())
  {
    @log.info("PRESSED: ");
    @forEachKey
    {
      if (wasKeyPressed(key))
        @log.info(getKeyStr(key), ' ');
    }
    @log.info('\n');
  }

  if (anyKeyReleased())
  {
    @log.info("RELEASED: ");
    @forEachKey
    {
      if (wasKeyReleased(key))
        @log.info(getKeyStr(key), ' ');
    } 
    @log.info('\n');
  }

$ end

  return true;  
}

/* ----------------------------------------------------------------------------
 */
void InputMgr::consumeMouseInput()
{
  mouse_old.clear();
  mouse_new.clear();

  scroll = 0.f;
}

/* ----------------------------------------------------------------------------
 */
void InputMgr::consumeKeyInput()
{
  keys_old.clear();
  keys_new.clear();

  mem::zero(chars, sizeof(chars));

  char_count = 0;
}
