$ require "common"

@@lpp.import "game/Render.sys.lh"

@@lpp.import "Engine.lh"

@@lpp.import "ui/UI.lh"

@@lpp.import "graphics/Renderer.lh"

@@lpp.import "event/BroadcastEventBus.h"

@@lpp.import "game/GameMgr.lh"
@@lpp.import "game/Sprite.comp.lh"
@@lpp.import "game/Transform.comp.lh"

@@lpp.import "game/map/Map.defs.lh"

#include "iro/Logger.h"
#include "iro/time/Time.h"

static Logger logger =
  Logger::create("rendersys"_str, Logger::Verbosity::Info);

/* ----------------------------------------------------------------------------
 */
b8 RenderSys::init(gfx::Renderer& renderer, AssetMgr& assetmgr)
{
  //allocate quad buffers
  if (!quads_buffer.init(
        MAX_QUADS*4*sizeof(gfx::Vertex),
        MAX_QUADS*6*sizeof(gfx::Index)))
    return ERROR("failed to init the quads buffer\n");
  quads_buffer.setGfxAttributes();

  //init quad indexes
  quads_buffer.map();
  auto ip = (gfx::Index*)quads_buffer.mapped.ip;
  for (int i = 0, j = 0; i < 6*MAX_QUADS; j++, i += 6)
  {
    ip[i+0] = 4*j + 0;
    ip[i+1] = 4*j + 1;
    ip[i+2] = 4*j + 2;
    ip[i+3] = 4*j + 0;
    ip[i+4] = 4*j + 2;
    ip[i+5] = 4*j + 3;
  }
  quads_buffer.unmap();

  //load the null texture
  null_texture = 
    gfx::CompiledTexture::load(
      "assets/textures/null"_str, assetmgr, renderer)->gfx_texture;

  if (isnil(null_texture))
  {
    null_texture = 
      gfx::CompiledTexture::load(
        "assets/textures/white"_str, assetmgr, renderer)->gfx_texture;
    if (isnil(null_texture))
      return ERROR("failed to find a valid null texture\n");
  }

  //init quads batches
  batches[0].texture = null_texture;
  batch_count = 1;
  quad_count = 0;

  //allocate background buffers
  if (!background_buffer.init(
        4*sizeof(gfx::Vertex),
        6*sizeof(gfx::Index)))
    return ERROR("failed to init the background buffer\n");
  background_buffer.setGfxAttributes();

  //init background vertexes/indexes
  background_buffer.map();
  auto vp = (gfx::Vertex*)background_buffer.mapped.vp;
  vp[0] = gfx::Vertex{ vec2f(0,0), vec2f(0,1), 0xFFFFFFFF };
  vp[1] = gfx::Vertex{ vec2f(1,0), vec2f(1,1), 0xFFFFFFFF };
  vp[2] = gfx::Vertex{ vec2f(1,1), vec2f(1,0), 0xFFFFFFFF };
  vp[3] = gfx::Vertex{ vec2f(0,1), vec2f(0,0), 0xFFFFFFFF };
  ip = (gfx::Index*)background_buffer.mapped.ip;
  ip[0] = 0; ip[1] = 1; ip[2] = 2;
  ip[3] = 0; ip[4] = 2; ip[5] = 3;
  background_buffer.unmap();

  // Init external buffer.
  if (!external_buffer.init(
        MAX_EXTERNAL*4*sizeof(gfx::Vertex),
        MAX_EXTERNAL*6*sizeof(gfx::Index)))
    return ERROR("failed to init external buffer\n");
  external_buffer.setGfxAttributes();

  u8 white_pixels[16] =
  {
    0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,
  };

  white_texture =
    gfx::Texture::create(
      renderer,
      4, 4,
      gfx::ImageFormat::BW,
      gfx::ImageAddressMode::ClampToWhite,
      gfx::ImageFilter::Nearest,
      gfx::ImageKind::TwoD,
      white_pixels);

  return true;
}

/* ----------------------------------------------------------------------------
 */
void RenderSys::deinit(gfx::Renderer& renderer)
{
  quads_buffer.deinit();
  background_buffer.deinit();
  external_buffer.deinit();
}

/* ----------------------------------------------------------------------------
 */
static void drawBatches(RenderSys& sys, gfx::Renderer& renderer)
{
  assert(sys.batch_count <= RenderSys::MAX_BATCHES);
  assert(sys.quad_count <= RenderSys::MAX_QUADS);

  renderer.pushBindBuffer(sys.quads_buffer);

  u32 index_offset = 0;
  for (u32 i = 0; i < sys.batch_count; i++)
  {
    assert(notnil(sys.batches[i].texture));
    renderer.pushBindTexture(sys.batches[i].texture);
    renderer.pushDraw(index_offset, 6*sys.batches[i].quad_count, 0);
    index_offset += 6*sys.batches[i].quad_count;
  }
  assert(index_offset == 6*sys.quad_count);

  sys.quads_buffer.num_vertexes = 4*sys.quad_count;
  sys.quads_buffer.num_indexes = 6*sys.quad_count;

  sys.batches[0].quad_count = 0;
  sys.batches[0].texture = sys.null_texture;
  sys.batch_count = 1;
  sys.quad_count = 0;
}

/* ----------------------------------------------------------------------------
 */
void RenderSys::drawQuad(
  vec2f pos,
  gfx::Texture texture,
  Color color,
  gfx::Renderer& renderer)
{
  assert(quads_buffer.mapped.vp != nullptr);

  if (texture != batches[batch_count-1].texture)
  {
    if (batches[batch_count-1].quad_count > 0)
    {
      if (batch_count >= RenderSys::MAX_BATCHES)
      {
        quads_buffer.unmap();
        drawBatches(*this, renderer);
        quads_buffer.map(); // TODO(delle) investigate if this stalls
        assert(quads_buffer.mapped.vp != nullptr);
      }
      else
      {
        batch_count++;
      }
    }

    batches[batch_count-1].quad_count = 0;
    batches[batch_count-1].texture = texture;
  }

  auto vp = (gfx::Vertex*)quads_buffer.mapped.vp + 4*quad_count;
  vp[0] = gfx::Vertex{ pos + vec2f(-0.f,-0.f), vec2f(0,1), color.rgba };
  vp[1] = gfx::Vertex{ pos + vec2f( 1.f,-0.f), vec2f(1,1), color.rgba };
  vp[2] = gfx::Vertex{ pos + vec2f( 1.f, 1.f), vec2f(1,0), color.rgba };
  vp[3] = gfx::Vertex{ pos + vec2f(-0.f, 1.f), vec2f(0,0), color.rgba };

  batches[batch_count-1].quad_count++;
  quad_count++;

  if (quad_count >= RenderSys::MAX_QUADS)
  {
    quads_buffer.unmap();
    drawBatches(*this, renderer);
    quads_buffer.map(); // TODO(delle) investigate if this stalls
    assert(quads_buffer.mapped.vp != nullptr);
  }
}

/* ----------------------------------------------------------------------------
 */
b8 RenderSys::update(const UpdateParams& params)
{
  // TODO(delle) We might want to sort quads by texture before
  // building their vertexes so we can produce bigger batches.
  // Alternatively, we could use instancing.
  // Alternatively, we could build a sprite sheet so we don't need
  // to change the texture (this is probably the better option).
  TRACE("render.sys update\n");

  gfx::Renderer& renderer = params.renderer;

  renderer.pushSetViewport(params.viewport.pos, params.viewport.size);
  renderer.pushSetScissor(params.viewport.pos, params.viewport.size);

  external_counts = {};
  external_buffer.map();

  ///////////////////////////////////////////////
  // 1. Draw Background
  {
    TRACE("render.sys draw background\n");

    renderer.pushUseProgram(renderer.stars_program);

    renderer.pushBindBuffer(background_buffer);

    iro::TimePoint time_point = iro::TimePoint::monotonic();
    f64 time = TimeSpan::fromSeconds(time_point.s).toSeconds()
      + TimeSpan::fromNanoseconds(time_point.ns).toSeconds();
    renderer.pushUniformFloat("u_time"_str, time);

    renderer.pushUniformVec2("u_resolution"_str,
      vec2f(params.viewport.w, params.viewport.h));

    renderer.pushDraw(0, 6, 0);
  }

  ///////////////////////////////////////////////
  // 2. Draw Map Tiles
  // TODO(delle) only update changed tiles after init
  TRACE("render.sys draw map tiles\n");

  renderer.pushUseProgram(renderer.shader_program);
  quads_buffer.map();

  auto proj = mat3x2::identity();
  proj.set(0, 0, EyeSys::pixels_per_meter * 2.f / (f32)params.viewport.w);
  proj.set(1, 1, EyeSys::pixels_per_meter * 2.f / (f32)params.viewport.h);
  renderer.pushUniformMat3x2("proj"_str, proj);

  renderer.pushUniformMat3x2("view"_str, params.view);

  mat3x2 tm = mat3x2::createTransform({0.0f,0.0f}, 0.0f);
  renderer.pushUniformMat3x2("model"_str, tm);

  renderer.pushUniformBool("has_texture"_str, true);

  if (params.broadcast)
    params.broadcast->raise<PreMapRender>({this});

  if (params.map)
  {
    Map& map = *params.map;

    u32 layer_idx = 0;
    for (const Layer& layer : map.layers)
    {
      Color tint = Color(0xffffffff) * (1.0f - (layer_idx * 0.25f));

      for (const Tile& tile : layer.tiles)
      {
        if (tile.def == nullptr)
          continue;

        // if (tile.def->texture == nullptr)
        //   continue;

        vec2f pos = map.getTilePos(layer, tile);
        //drawQuad(pos, tile.def->texture, tint, renderer);
        drawQuad(pos, null_texture, tint, renderer);
      }

      layer_idx++;
    }
  }

  if (params.broadcast)
    params.broadcast->raise<PreSpriteRender>({this});

  ///////////////////////////////////////////////
  // 3. Draw Sprite Components
  TRACE("render.sys draw sprite components\n");

  if (params.entmgr && params.map)
  {
    Map&          map    = *params.map;
    EntityMgr&    entmgr = *params.entmgr;
    ComponentMgr& cmpmgr = entmgr.cmpmgr;

    for (Sprite& sprite : cmpmgr.iterate<Sprite>())
    {
      Entity* owner = entmgr.getEntity(sprite.owner);

      if (auto* transform = owner->tryComp<Transform>())
      {
        Layer& layer = map.layers[transform->placement_layer];

        vec2f pos = layer.def->pos + transform->pos;
        gfx::Texture texture = sprite.texture.texture;
        Color color = sprite.color;
        if (isnil(texture))
        {
          texture = null_texture;
          color = 0xff0000ff;
        }

        drawQuad(pos, texture, color, renderer);
      }
    }
  }

  if (params.broadcast)
    params.broadcast->raise<PostRender>({this});

  external_buffer.unmap();
  quads_buffer.unmap();
  if (batch_count > 0)
  {
    drawBatches(*this, renderer);
  }

  if (external_counts.x != 0)
  {
    external_buffer.num_vertexes = external_counts.x;
    external_buffer.num_indexes = external_counts.y;

    renderer.pushBindTexture(white_texture);
    renderer.pushBindBuffer(external_buffer);
    renderer.pushDraw(0, external_counts.y, 0);
  }

  return true;
}
