$ require "common"

@@lpp.import "Engine.lh"
@@lpp.import "game/GameMgr.lh"
@@lpp.import "game/map/Map.schema.lh"
@@lpp.import "game/Render.sys.lh"
@@lpp.import "game/Sprite.comp.lh"
@@lpp.import "game/Transform.comp.lh"
@@lpp.import "graphics/Renderer.lh"
@@lpp.import "ui/UI.lh"

#include "iro/Logger.h"

static Logger logger = 
  Logger::create("rendersys"_str, Logger::Verbosity::Info);

/* ----------------------------------------------------------------------------
 */
b8 RenderSys::init(gfx::Renderer& renderer)
{
  gfxbuf = renderer.createBuffer();
  if (!gfxbuf)
    return ERROR("failed to create gfx::Buffer\n");
  if (!gfxbuf->init(
        sizeof(gfx::Vertex) * 0xffffff, 
        sizeof(gfx::Index) * 0xffffff))
    return ERROR("failed to init gfx::Buffer\n");

  gfxbuf->setGfxAttributes();

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 RenderSys::update(const UpdateParams& params)
{
  gfx::Renderer& renderer = *params.renderer;

  renderer.pushBindBuffer(gfxbuf);

  auto proj = mat3x2::identity();
  vec2f viewport_size = params.viewport.max - params.viewport.min;
  proj.set(0, 0, EyeSys::pixels_per_meter * 2.f / viewport_size.x);
  proj.set(1, 1, EyeSys::pixels_per_meter * 2.f / viewport_size.y);

  renderer.pushUniformMat3x2("proj"_str, proj);
  renderer.pushUniformMat3x2("view"_str, params.view);

  gfxbuf->map();

  auto vp = (gfx::Vertex*)gfxbuf->mapped.vp;
  auto ip = (gfx::Index*)gfxbuf->mapped.ip;

  vec2i sum = {};

  mat3x2 tm = 
    mat3x2::createTransform(
      params.viewport.min,
      0.f);

  renderer.pushUniformMat3x2("model"_str, tm);

  if (params.map)
  {
    Map& map = *params.map;

    u32 layer_idx = 0;
    for (Layer& layer : map.layers)
    {
      for (const Tile& tile : layer.tiles)
      {
        if (tile.def == nullptr)
          continue;

        const MapTileDef& def = *tile.def;
        
        Color color;

        switch (def.kind)
        {
        case TileKind::Wall: color = 0x00ff00ff; break;
        case TileKind::Floor: color = 0x0000ffff; break;
        }

        color *= 1.f - layer_idx * 0.25f;

        sum += 
          gfx::putFilledRect(
            vp,
            ip,
            sum,
            layer.def->pos + def.pos,
            vec2f(1,1),
            color);
      }

      layer_idx += 1;
    }
  }

  if (params.entmgr && params.map)
  {
    Map&          map    = *params.map;
    EntityMgr&    entmgr = *params.entmgr;
    ComponentMgr& cmpmgr = entmgr.cmpmgr;

    for (Sprite& sprite : cmpmgr.iterate<Sprite>())
    {
      Entity* owner = entmgr.getEntity(sprite.owner);

      if (auto* transform = owner->tryComp<Transform>())
      {
        Layer& layer = map.layers[transform->placement_layer];

        sum +=
          gfx::putFilledRect(
            vp,
            ip,
            sum,
            layer.def->pos + transform->pos,
            vec2f(1,1),
            0xff0000ff);
      }
    }
  }

  gfxbuf->unmap();

  gfxbuf->num_indexes = gfxbuf->index_size / sizeof(gfx::Index);

  renderer.pushDraw(0, sum.y, 0);

  return true;
}
