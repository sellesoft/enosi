$ local lpp = require "lpp"
$ local reflect = require "reflect.Reflector"

@@lpp.import "game/GameMgr.lh"
@@lpp.import "game/Transform.comp.lh"
@@lpp.import "game/Sprite.comp.lh"
@@lpp.import "game/Movement.comp.lh"
@@lpp.import "resource/SourceDataParser.lh"
@@lpp.import "resource/SourceDataFile.lh"
@@lpp.import "resource/Packing.lh"

#include "iro/logger.h"

using namespace iro;

static Logger logger = 
  Logger::create("gamemgr"_str, Logger::Verbosity::Info);

b8 GameMgr::init(Engine* eng)
{
  INFO("initializing\n");
  SCOPED_INDENT;

  engine = eng;

  if (!entmgr.init())
    return ERROR("failed to initialize entity mgr\n");

  if (!cmpmgr.init())
    return ERROR("failed to initialize component mgr\n");

  if (!rendersys.init(*this))
    return ERROR("failed to initialize render sys\n");

  using namespace fs;

  auto testent = 
    entmgr.createEntityFromAsset(
      "assets/entities/Test.ent"_str,
      cmpmgr);

  mindsys.attach(testent);
  eye.attach(testent);

  auto test_map = 
    File::from("assets/maps/Test.map"_str, OpenFlag::Read);
  defer { test_map.close(); };

  SourceDataFile test_map_source_data_file;
  if (!test_map_source_data_file.init())
    return ERROR("failed to init test map source data file\n");

  SourceDataParser parser;
  if (!parser.init(&test_map_source_data_file, &test_map, "Test.map"_str))
    return ERROR("failed to init source data parser\n");
  
  if (!parser.parse())
    return ERROR("failed to parse test map source data\n");

  auto map_def = mem::stl_allocator.construct<MapDef>();

  packSourceDataIntoType(
    *test_map_source_data_file.returned_data,
    map_def);
  
  INFO(map_def->name, "\n");

  map.init(*map_def);

  return true;
}

void GameMgr::deinit()
{
  entmgr.deinit();
}

b8 GameMgr::update()
{
  if (!mindsys.update(*this))
    return false;

  if (!movesys.update(*this))
    return false;

  if (!eye.update(*this))
    return false;

  if (!rendersys.update(*this))
    return false;

  return true;
}
