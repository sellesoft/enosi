$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "game/GameMgr.lh"

@@lpp.import "Engine.lh"

@@lpp.import "asset/Packing.lh"
@@lpp.import "asset/SourceDataFile.lh"
@@lpp.import "asset/SourceDataParser.lh"

@@lpp.import "game/Sprite.comp.lh"
@@lpp.import "game/Movement.comp.lh"
@@lpp.import "game/Transform.comp.lh"

@@lpp.import "game/map/Map.defs.lh"

#include "iro/Logger.h"
#include "iro/Platform.h"

using namespace iro;

static Logger logger =
  Logger::create("gamemgr"_str, Logger::Verbosity::Info);

b8 GameMgr::init(Engine* eng)
{
  INFO("initializing\n");
  SCOPED_INDENT;

  engine = eng;

  if (!entmgr.init())
    return FATAL("failed to initialize entity mgr\n");

  if (!rendersys.init(engine->renderer, engine->assetmgr))
    return FATAL("failed to initialize render sys\n");

  using namespace fs;

  SourceDataFileHandle h_test_map =
    eng->source_data_file_reg.loadFromDisk("assets/maps/Test.map"_str);

  if (!h_test_map.isValid())
    return ERROR("failed to load test map\n");

  auto* map_def = mem::stl_allocator.construct<MapDef>();

  PackContext pack_context = 
  {
    .assetmgr  = &eng->assetmgr,
    .renderer  = &eng->renderer,
  };

  packSourceDataIntoType(
    *h_test_map.getFile()->returned_data,
    map_def,
    pack_context);

  Map::InitParams map_params =
  {
    .assetmgr = engine->assetmgr,
    .entmgr   = entmgr,
    .renderer = engine->renderer,
    .eye      = &eye,
    .mind     = &mindsys,
  };

  if(!map.init(*map_def, map_params))
    return ERROR("failed to initialize the map '", map_def->name, "'\n");

  SourceDataFileHandle h_test_map_tile_kinds =
    eng->source_data_file_reg.loadFromDisk("assets/maps/Test.map_tiles"_str);

  if (!h_test_map_tile_kinds.isValid())
    return ERROR("failed to load test map tile kinds\n");

  map_editor = ui::MapEditor::create(eng->ui, &eng->renderer);
  map_editor->selectMap(
    h_test_map,
    h_test_map_tile_kinds,
    engine->ui,
    engine->assetmgr,
    engine->renderer);

  return true;
}

void GameMgr::deinit()
{
  entmgr.deinit();
}

b8 GameMgr::update()
{
  if (!mindsys.update(*this))
    return false;

  if (!movesys.update(*this))
    return false;

  if (!eye.update(*this))
    return false;

  RenderSys::UpdateParams render_params1 =
  {
    .viewport = { .size = engine->window.size },
    .renderer = engine->renderer,
    .entmgr = &entmgr,
    .map = &map,
  };

  eye.getViewMat(&render_params1.view);
  if (!rendersys.update(render_params1))
    return false;

  map_editor->renderMap(engine->ui);

  $ local map_editor = ui.createItemContext("MapEditor", "map_editor")
  if (engine->input.wasKeyPressed(Key::M))
  {
    @@map_editor.style:lookup(display)
    if (@map_editor.style.display.test(hidden))
      @map_editor.style.set.display(0);
    else
      @map_editor.style.set.display(hidden);
  }

  return true;
}
