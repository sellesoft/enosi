$ local cmn = require "common"

@@lpp.import "Engine.lh"
@@lpp.import "game/GameMgr.lh"
@@lpp.import "game/map/Map.schema.lh"
@@lpp.import "game/Movement.comp.lh"
@@lpp.import "game/Sprite.comp.lh"
@@lpp.import "game/Transform.comp.lh"
@@lpp.import "asset/Packing.lh"
@@lpp.import "asset/SourceDataFile.lh"
@@lpp.import "asset/SourceDataParser.lh"

#include "iro/Logger.h"

using namespace iro;

static Logger logger = 
  Logger::create("gamemgr"_str, Logger::Verbosity::Info);

b8 GameMgr::init(Engine* eng)
{
  INFO("initializing\n");
  SCOPED_INDENT;

  engine = eng;

  if (!entmgr.init())
    return ERROR("failed to initialize entity mgr\n");

  if (!rendersys.init(engine->renderer))
    return ERROR("failed to initialize render sys\n");

  using namespace fs;

  // auto testent = 
  //   entmgr.createEntityFromResource("assets/entities/Test.ent"_str);

  // mindsys.attach(testent);
  // eye.attach(testent);

  auto test_map = 
    File::from("assets/maps/Test.map"_str, OpenFlag::Read);
  defer { test_map.close(); };

  SourceDataFile test_map_source_data_file;
  if (!test_map_source_data_file.init())
    return ERROR("failed to init test map source data file\n");

  SourceDataParser parser;
  if (!parser.init(&test_map_source_data_file, &test_map, "Test.map"_str))
    return ERROR("failed to init source data parser\n");
  
  if (!parser.parse())
    return ERROR("failed to parse test map source data\n");

  auto map_def = mem::stl_allocator.construct<MapDef>();

  packSourceDataIntoType(
    *test_map_source_data_file.returned_data,
    map_def);
  
  if(!map.init(*map_def, *this))
  {
    return ERROR("failed to initialize the map '", map_def->name, "'\n");
  }

  return true;
}

void GameMgr::deinit()
{
  entmgr.deinit();
}

b8 GameMgr::update()
{
  if (!mindsys.update(*this))
    return false;

  if (!movesys.update(*this))
    return false;

  if (!eye.update(*this))
    return false;

  RenderSys::UpdateParams render_params = 
  {
    .viewport = {{0.f,0.f},engine->window.size},
    .renderer = &engine->renderer,
    .entmgr = &entmgr,
    .map = &map,
  };

  eye.getViewMat(&render_params.view);

  if (!rendersys.update(render_params))
    return false;

  vec2f screen_pos = engine->input.mouse.window;
  vec2f screen_size = engine->window.size;

  // vec2f mouse_world = eye.screenToWorld(screen_pos, screen_size);
  // INFO(floor(mouse_world), "\n");

  return true;
}
