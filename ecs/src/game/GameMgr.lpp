$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "game/GameMgr.lh"

@@lpp.import "Engine.lh"

@@lpp.import "asset/Packing.lh"
@@lpp.import "asset/CompiledData.lh"
@@lpp.import "asset/SourceDataFile.lh"
@@lpp.import "asset/SourceDataParser.lh"

@@lpp.import "game/Sprite.comp.lh"
@@lpp.import "game/Movement.comp.lh"
@@lpp.import "game/Transform.comp.lh"

@@lpp.import "game/Input.sys.lh"

@@lpp.import "game/map/Map.defs.lh"

#include "iro/Logger.h"
#include "iro/Platform.h"

using namespace iro;

static Logger logger =
  Logger::create("gamemgr"_str, Logger::Verbosity::Info);

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::init(Engine* eng)
{
  INFO("initializing\n");
  SCOPED_INDENT;

  engine = eng;

  if (!entmgr.init())
    return @log.error("failed to initialize entmgr\n");

  if (!entsysmgr.init(&entmgr))
    return @log.error("failed to initialize entsysmgr\n");

  if (!rendersys.init(eng->renderer, eng->assetmgr))
    return @log.error("failed to initialize rendersys\n");

  entsysmgr.get<InputSys>().mgr = &eng->input;
  
  using namespace fs;

  CompiledData::CompileParams params = 
  {
    .name = "assets/maps/Test"_str,
    .type = "MapDef"_str,
    .assetmgr = eng->assetmgr,
    .sfile_reg = eng->source_data_file_reg,
  };

  CompiledData::compile(params);

  auto* data = CompiledData::load(
    "assets/maps/Test.map"_str, "MapDef"_str, eng->assetmgr);

  auto* mapdef = data->getRootAs<MapDef>();

  CompiledData::Refs refs;
  data->getRefs(&refs);

  Ref::LoadParams load_params = 
  {
    .renderer = eng->renderer,
    .assetmgr = eng->assetmgr,
    .sfile_reg = &eng->source_data_file_reg,
  };

  for (auto& ref : refs)
  {
    ref.ptr->load(ref.type, load_params);
  }

  MapSys::LoadParams map_params =
  {
    .assetmgr = engine->assetmgr,
    .entmgr   = entmgr,
    .renderer = engine->renderer,
  };

  if(!entsysmgr.get<MapSys>().load(*mapdef, map_params))
    return ERROR("failed to load map '", mapdef->name, "'\n");

$ if false then
  SourceDataFileHandle h_test_map = 
    eng->source_data_file_reg.loadFromDisk("assets/maps/Test.map"_str);

  SourceDataFileHandle h_test_map_tile_kinds =
    eng->source_data_file_reg.loadFromDisk("assets/maps/Test.map_tiles"_str);

  if (!h_test_map_tile_kinds.isValid())
    return ERROR("failed to load test map tile kinds\n");

  map_editor = ui::MapEditor::create(eng->ui, &eng->renderer);
  map_editor->selectMap(
    h_test_map,
    h_test_map_tile_kinds,
    engine->ui,
    engine->assetmgr,
    engine->renderer);
$ end

  return true;
}

/* ----------------------------------------------------------------------------
 */
void GameMgr::deinit()
{
}

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::update()
{
  if (!entsysmgr.update())
    return ERROR("failed to update entity systems\n");

$ if false then
  $ local map_editor = ui.createItemContext("MapEditor", "map_editor")

  map_editor->renderMap(engine->ui);

  if (engine->input.wasKeyPressed(Key::M))
  {
    @@map_editor.style:lookup(display)
    if (@map_editor.style.display.test(hidden))
      @map_editor.style.set.display(0);
    else
      @map_editor.style.set.display(hidden);
  }
$ end

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::render()
{
  // $ local map_editor = ui.createItemContext("MapEditor", "map_editor")
  // @@map_editor.style:lookup(display)
  //
  // if (@map_editor.style.display.test(hidden))
  // {
    RenderSys::UpdateParams render_params =
    {
      .viewport = { .size = engine->window.size },
      .renderer = engine->renderer,
    };

    entsysmgr.get<EyeSys>().getViewMat(&render_params.view);
    if (!rendersys.update(render_params))
      return false;
  // }

  return true;
}
