$ local cmn = require "common"
$ local ui = require "ui.UI"
$ local Comp = require "game.Component"
$ local glob = require "Glob"
$ local buffer = require "string.buffer"

#include "iro/Common.h"
#include "iro/containers/LinkedPool.h"

@@lpp.import "Entity.lh"
@@lpp.import "IndexedPool.lh"
@@lpp.import "Component.lh"
@@lpp.import "ComponentMgr.lh"

/* ============================================================================
 */
struct EntityMgr
{
  typedef IndexedPool<Entity, 4096> EntityPool;

  EntityPool ent_pool;

  ComponentMgr cmpmgr;

  b8 init();
  void deinit();

  EntityId createEntity(String name);
  EntityId createEntityFromResource(String path);

  void destroyEntity(EntityId id);

  Entity* getEntity(EntityId id) const;

  b8 addComp(Entity* ent, EntityId id, Component* cmp) const;
  b8 addComp(Entity* ent, Component* cmp) const;
  b8 addComp(EntityId id, Component* cmp) const;

  template<typename T>
  T* tryComp(EntityId id)
  {
    if (isnil(id))
      return nullptr;
    return getEntity(id)->tryComp<T>();
  }
};
