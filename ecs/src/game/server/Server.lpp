/*
 *  Definition of the Server, as well as its interface.
 */
$ require "common"

@@lpp.import "asset/CompiledData.lh"
@@lpp.import "Engine.lh"
@@lpp.import "game/server/GameSim.lh"
@@lpp.import "game/server/Server.lh"
@@lpp.import "game/server/ServerAllocator.lh"
@@lpp.import "game/shared/entity/EntityId.lh"
@@lpp.import "net/Connection.lh"
@@lpp.import "net/Message.lh"

#include "iro/Common.h"
#include "iro/containers/Array.h"
#include "iro/containers/StackArray.h"
#include "iro/Logger.h"
#include "iro/time/Time.h"

@log.ger(server, Debug)

using namespace iro;

struct MapDef;

namespace sv
{

/* ============================================================================
 */
enum struct ServerState : u8
{
  Lobby,
  Ingame,
};

/* ============================================================================
 */
struct ServerClient
{
  net::Connection connection;
  u64 last_packet_tick_index;

  static constexpr u32 MAX_NAME_LENGTH = 63;
  StackArray<u8, MAX_NAME_LENGTH + 1> name;
};

} // namespace sv

/* ============================================================================
 */
struct Server
{
  sv::ServerAllocator global_allocator; // cleared on deinit
  sv::ServerAllocator match_allocator; // cleared before each match
  sv::ServerAllocator tick_allocator; // cleared before each tick

  TimeSpan target_timespan;
  u64 tick_index;

  sv::ServerState state;
  b8 dedicated;
  sv::ServerPublicity publicity;
  StackArray<u8, 64> password;

  u16 max_clients;
  Array<sv::ServerClient> clients;

  Engine* engine;
  sv::GameSim sim;
};

namespace sv
{

/* ----------------------------------------------------------------------------
 */
Server* create(const CreateParams& params)
{
  @log.info("Creating server...\n");

  ServerAllocator global_allocator;
  if(!global_allocator.init(params.global_allocation_size))
  {
    @log.error("failed to init the global server allocator\n");
    return nullptr;
  }

  Server* server = global_allocator.construct<Server>();
  if (server == nullptr)
  {
    global_allocator.deinit();
    @log.error("failed to construct the server object\n");
    return nullptr;
  }
  server->global_allocator = global_allocator;
  auto deinit_global_allocator_if_failure = deferWithCancel
    { server->global_allocator.deinit(); };

  if(!server->match_allocator.init(params.match_allocation_size))
  {
    @log.error("failed to init the match server allocator\n");
    return nullptr;
  }
  auto deinit_match_allocator_if_failure = deferWithCancel
    { server->match_allocator.deinit(); };

  if(!server->tick_allocator.init(params.tick_allocation_size))
  {
    @log.error("failed to init the tick server allocator\n");
    return nullptr;
  }
  auto deinit_tick_allocator_if_failure = deferWithCancel
    { server->tick_allocator.deinit(); };

  server->target_timespan =
    TimeSpan::fromMilliseconds(params.target_tickrate_ms);
  server->tick_index = 0;
  server->state = ServerState::Lobby;
  server->dedicated = params.dedicated;
  server->publicity = params.publicity;
  server->password = params.password;
  server->max_clients = params.max_clients;
  if (!server->clients.init(params.max_clients, &server->global_allocator))
  {
    @log.error("failed to init the server clients array\n");
    return nullptr;
  }
  server->engine = &params.engine;

  if (server->publicity == ServerPublicity::Offline)
  {
    ServerClient* offline_client = server->clients.push();
    offline_client->connection.init(net::Address::createOffline(),
                                    &server->global_allocator);
    mem::copy(offline_client->name.arr, (void*)"offlineplayer", 13);
    offline_client->name.len = 13;
  }

  deinit_global_allocator_if_failure.cancel();
  deinit_match_allocator_if_failure.cancel();
  deinit_tick_allocator_if_failure.cancel();
  return server;
}

/* ----------------------------------------------------------------------------
 */
void destroy(Server* server)
{
  assertpointer(server);
  @log.trace("destroying server\n");

  server->tick_allocator.deinit();
  server->match_allocator.deinit();
  server->global_allocator.deinit();
}

/* ----------------------------------------------------------------------------
 */
b8 startMatch(Server* server, String map_name, b8 existing)
{
  assertpointer(server);
  @log.trace("starting server match\n");

  MapDef* map_def = nullptr;
  if (existing)
  {
    CompiledData* data = CompiledData::load(map_name, "MapSave"_str,
      server->engine->assetmgr);
    if (data == nullptr)
      return @log.error("failed to start a server match because the"
        " map save name is invalid\n");
    map_def = data->getRootAs<MapDef>();
  }
  else
  {
    CompiledData* data = CompiledData::load(map_name, "MapDef"_str,
      server->engine->assetmgr);
    if (data == nullptr)
      return @log.error("failed to start a server match because the"
        " map def name is invalid\n");
    map_def = data->getRootAs<MapDef>();
  }
  assertpointer(map_def);

  server->match_allocator.clear();
  server->state = ServerState::Ingame;

  sv::GameSim::InitParams game_sim_params = {};

  if (!server->sim.init(game_sim_params))
    return @log.error("failed to init server sim\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
void stopMatch(Server* server)
{
  assertpointer(server);
  @log.trace("stopping server match\n");

  server->sim.deinit();

  server->state = ServerState::Lobby;
}

/* ----------------------------------------------------------------------------
 */
b8 update(Server* server)
{
  assertpointer(server);
  iro::TimePoint start_timepoint = iro::TimePoint::monotonic();
  @log.trace("updating the server\n");

  server->tick_allocator.clear();

  // check for incoming packets
  if (server->publicity == ServerPublicity::Offline)
  {
    assert(server->clients.len() > 0);

    // TODO(delle) better offline connection handling
    StackArray<u8, net::MAX_FRAGMENT_SIZE> packet_data;
    server->clients[0].connection.receive(net::Source::Client, packet_data);
  }
  else
  {
    net::Address packet_address;
    StackArray<u8, net::MAX_FRAGMENT_SIZE> packet_data;
    while (net::checkForPackets(packet_address, packet_data))
    {
      // range validated in net::checkForPackets
      assertrange(packet_data.len,
        sizeof(net::FragmentHeader), net::MAX_FRAGMENT_SIZE);

      for (ServerClient& client : server->clients)
      {
        if (mem::equal(client.connection.address, packet_address))
        {
          client.connection.receive(net::Source::Client, packet_data);
          client.last_packet_tick_index = server->tick_index;
          break;
        }
      }

      // check for connection requests
      net::Message message;
      message.init(packet_data.arr, packet_data.len);
      u32 protocol = message.readU32();
      u32 sequence = message.readU32();
      u32 ack_index = message.readU32();
      u32 ack_bitfield = message.readU32();
      u16 fragment_offset = message.readU16();
      u16 data_size = message.readU16();
      u16 netevent = message.readU16();
      if (netevent == 1) // TODO(delle) non-hardcoded netevent
      {
        ServerClient* new_client = server->clients.push();
        new_client->connection.init(packet_address, &server->global_allocator);
        new_client->last_packet_tick_index = server->tick_index;
        message.readData(new_client->name.arr, ServerClient::MAX_NAME_LENGTH);
        new_client->name.len = message.readU8();

        @log.info("CONNECTED [", String::from(new_client->name.asSlice()),
          "] from [", packet_address, "]\n");
      }
    }

    // ping the server list
    // TODO(delle) server list
  }

  if (server->state == ServerState::Ingame)
  {
    // parse messages from clients
    for (ServerClient& client : server->clients)
    {
      if (client.connection.incoming_message_pending_fragments)
        continue;

      net::Message message;
      message.init(client.connection.incoming_message_data,
                   client.connection.incoming_message_size);

      // TODO(delle) implement server packet parsing
      u16 netevent = message.readU16();
      if (netevent == 2) // TODO(delle) non-hardcoded netevent
      {
        u16 string_length = message.readU16();
        if (string_length > 0 && string_length < 513)
        {
          u8 string_buffer[512];
          message.readData(string_buffer, string_length);
          iro::String string = {string_buffer, string_length};
          @log.info("Message Received: \"", string, "\"\n");
        }
      }
    }

    // simulate
    if(!server->sim.update())
      return @log.error("failed to update server sim\n");

    // send messages to clients
    u8 message_data[net::Message::MAX_SIZE];
    for (ServerClient& client : server->clients)
    {
      net::Message message;
      message.init(message_data, 0);

      // TODO(delle) implement server packet creation
      message.writeU16(2); // TODO(delle) non-hardcoded netevent
      message.writeU16(12);
      message.writeData((u8*)"hello client", 12);

      client.connection.send(net::Source::Server, message, false);
      if (client.connection.outgoing_message_pending_fragments)
      {
        client.connection.sendNextFragment();
      }
    }

    // sleep if we're under tickrate budget
    {
      TimeSpan current_timespan = TimePoint::monotonic() - start_timepoint;
      TimeSpan wait_timespan = TimeSpan::fromNanoseconds(
        server->target_timespan.ns - current_timespan.ns);
      if (wait_timespan.ns > 0)
      {
        platform::sleep(wait_timespan);
      }
      else
      {
        // TODO: trigger profiler export
      }
    }
  }
  else
  {
    // sleep if we're under tickrate budget
    // NOTE: hardcoded 200ms tickrate in the lobby
    {
      TimeSpan current_timespan = TimePoint::monotonic() - start_timepoint;
      TimeSpan wait_timespan = TimeSpan::fromNanoseconds(
        TimeSpan::fromMilliseconds(200).ns - current_timespan.ns);
      if (wait_timespan.ns > 0)
      {
        platform::sleep(wait_timespan);
      }
      else
      {
        // TODO: trigger profiler export
      }
    }
  }

  server->tick_index++;
  return true;
}

} // namespace sv
