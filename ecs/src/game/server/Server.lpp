/*
 *  Definition of the Server, as well as its interface.
 */
$ require "common"

@@lpp.import "asset/CompiledData.lh"
@@lpp.import "Engine.lh"
@@lpp.import "game/server/GameSim.lh"
@@lpp.import "game/server/Server.lh"
@@lpp.import "game/server/ServerAllocator.lh"
@@lpp.import "game/shared/entity/EntityId.lh"
@@lpp.import "net/Connection.lh"
@@lpp.import "net/Packet.lh"

#include "iro/Common.h"
#include "iro/containers/Array.h"
#include "iro/containers/StackArray.h"
#include "iro/Logger.h"

@log.ger(server, Debug)

using namespace iro;

struct MapDef;

namespace sv
{

/* ============================================================================
 */
enum struct ServerState : u8
{
  Lobby,
  Ingame,
};

/* ============================================================================
 */
struct ServerClient
{
  net::Connection connection;
  u64 last_acknowledge_monotonic;

  static constexpr u32 MAX_NAME_LENGTH = 63;
  StackArray<u8, MAX_NAME_LENGTH + 1> name;

  EntityId entity;
};

} // namespace sv

/* ============================================================================
 */
struct Server
{
  sv::ServerAllocator global_allocator; // cleared on deinit
  sv::ServerAllocator match_allocator; // cleared before each match
  sv::ServerAllocator tick_allocator; // cleared before each tick

  sv::ServerState state;
  b8 dedicated;
  sv::ServerPublicity publicity;
  StackArray<u8, 64> password;

  Array<sv::ServerClient> clients;

  Engine* engine;
  sv::GameSim sim;
};

namespace sv
{

/* ----------------------------------------------------------------------------
 */
Server* create(const CreateParams& params)
{
  @log.info("Creating server...\n");

  ServerAllocator global_allocator;
  if(!global_allocator.init(params.global_allocation_size))
  {
    @log.error("failed to init the global server allocator\n");
    return nullptr;
  }

  Server* server = global_allocator.construct<Server>();
  if (server == nullptr)
  {
    global_allocator.deinit();
    @log.error("failed to construct the server object\n");
    return nullptr;
  }
  server->global_allocator = global_allocator;
  auto deinit_global_allocator_if_failure = deferWithCancel
    { server->global_allocator.deinit(); };

  if(!server->match_allocator.init(params.match_allocation_size))
  {
    @log.error("failed to init the match server allocator\n");
    return nullptr;
  }
  auto deinit_match_allocator_if_failure = deferWithCancel
    { server->match_allocator.deinit(); };

  if(!server->tick_allocator.init(params.tick_allocation_size))
  {
    @log.error("failed to init the tick server allocator\n");
    return nullptr;
  }
  auto deinit_tick_allocator_if_failure = deferWithCancel
    { server->tick_allocator.deinit(); };

  server->state = ServerState::Lobby;
  server->dedicated = params.dedicated;
  server->publicity = params.publicity;
  server->password = params.password;
  if (!server->clients.init(8, &server->global_allocator))
  {
    @log.error("failed to init the server clients array\n");
    return nullptr;
  }
  server->engine = &params.engine;

  deinit_global_allocator_if_failure.cancel();
  deinit_match_allocator_if_failure.cancel();
  deinit_tick_allocator_if_failure.cancel();
  return server;
}

/* ----------------------------------------------------------------------------
 */
void destroy(Server* server)
{
  assertpointer(server);
  @log.trace("destroying server\n");

  server->tick_allocator.deinit();
  server->match_allocator.deinit();
  server->global_allocator.deinit();
}

/* ----------------------------------------------------------------------------
 */
b8 startMatch(Server* server, String map_name, b8 existing)
{
  assertpointer(server);
  @log.trace("starting server match\n");

  MapDef* map_def = nullptr;
  if (existing)
  {
    CompiledData* data = CompiledData::load(map_name, "MapSave"_str,
      server->engine->assetmgr);
    if (data == nullptr)
      return @log.error("failed to start a server match because the"
        " map save name is invalid\n");
    map_def = data->getRootAs<MapDef>();
  }
  else
  {
    CompiledData* data = CompiledData::load(map_name, "MapDef"_str,
      server->engine->assetmgr);
    if (data == nullptr)
      return @log.error("failed to start a server match because the"
        " map def name is invalid\n");
    map_def = data->getRootAs<MapDef>();
  }
  assertpointer(map_def);

  server->match_allocator.clear();
  server->state = ServerState::Ingame;

  sv::GameSim::InitParams game_sim_params = {};

  if (!server->sim.init(game_sim_params))
    return @log.error("failed to init server sim\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
void stopMatch(Server* server)
{
  assertpointer(server);
  @log.trace("stopping server match\n");

  server->sim.deinit();

  server->state = ServerState::Lobby;
}

/* ----------------------------------------------------------------------------
 */
b8 update(Server* server)
{
  assertpointer(server);
  @log.trace("deinitializing a server allocator\n");

  server->tick_allocator.clear();

  // ping the server list
  // TODO(delle) server list

  // check for connection requests
  // TODO(delle) connections

  // simulate the game
  if (server->state == ServerState::Ingame)
  {
    // check for client packets
    net::Packet client_packet;
    for (ServerClient& client : server->clients)
    {
      client.connection.read(net::Source::Client, client_packet);

      // TODO(delle) implement client packet parsing
    }

    if(!server->sim.update())
      return @log.error("failed to update server sim\n");
  }

  return true;
}

} // namespace sv
