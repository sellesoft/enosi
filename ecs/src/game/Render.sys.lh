/*
 *  Entity system for rendering entities containing renderable components.
 */

$ require "common"

@@lpp.import "graphics/CompiledTexture.lh"

#include "iro/Common.h"
#include "math/Rect.h"
#include "math/mat.h"

namespace gfx 
{ 
  struct Buffer; 
  struct Renderer;
}

struct AssetMgr;
struct GameMgr;
struct EntityMgr;
struct Map;

/* ============================================================================
 */
struct RenderSys
{
  static constexpr u32 MAX_QUADS = 8192;
  static constexpr u32 MAX_BATCHES = 256;
  struct QuadBatch
  {
    u32 quad_count;
    const gfx::CompiledTexture* texture;
  };
  
  b8 init(gfx::Renderer& renderer, AssetMgr& assetmgr);

  struct UpdateParams
  {
    Rect           viewport;
    mat3x2         view;
    gfx::Renderer& renderer;
    EntityMgr*     entmgr;
    Map*           map;
  };

  b8 update(const UpdateParams& params);

  gfx::CompiledTextureRef null_texture;

  gfx::Buffer* quads_buffer;

  QuadBatch batches[MAX_BATCHES];
  u32 batch_count;
  u32 quad_count;
  gfx::Buffer* background_buffer;
};
