/*
 *  Entity system for rendering entities containing renderable components.
 */

$ require "common"

@@lpp.import "graphics/CompiledTexture.lh"
@@lpp.import "graphics/Buffer.lh"

#include "iro/Common.h"
#include "math/Rect.h"
#include "math/mat.h"
#include "Color.h"

namespace gfx
{
  struct Buffer;
  struct Renderer;
}

struct AssetMgr;
struct GameMgr;
struct EntityMgr;
struct Map;
struct BroadcastEventBus;

/* ============================================================================
 */
struct RenderSys
{
  static constexpr u32 MAX_QUADS = 8192;
  static constexpr u32 MAX_BATCHES = 256;
  static constexpr u32 MAX_EXTERNAL = 8192;

  struct QuadBatch
  {
    u32 quad_count;
    gfx::Texture texture;
  };

  b8 init(gfx::Renderer& renderer, AssetMgr& assetmgr);
  void deinit(gfx::Renderer& renderer);

  struct UpdateParams
  {
    Rect           viewport;
    mat3x2         view;
    gfx::Renderer& renderer;
    EntityMgr*     entmgr;
    Map*           map;

    // Optional for emitting events at different stages of rendering.
    BroadcastEventBus* broadcast;

    b8 debug = false;
  };

  b8 update(const UpdateParams& params);

  void drawQuad(
    vec2f pos, 
    gfx::Texture texture, 
    Color color,
    gfx::Renderer& renderer);

  gfx::Texture null_texture;

  // TODO(sushi) move this somewhere central so it may be shared with UI
  //             as it defines the same thing.
  gfx::Texture white_texture;

  gfx::Buffer quads_buffer;
  gfx::Buffer background_buffer;

  QuadBatch batches[MAX_BATCHES];
  u32 batch_count;
  u32 quad_count;

  // External buffer for use by systems notified of Render events.
  gfx::Buffer external_buffer;
  vec2i external_counts = {};
};
