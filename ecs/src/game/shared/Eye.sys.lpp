$ require "common"

@@lpp.import "game/shared/Eye.sys.lh"
@@lpp.import "game/shared/Transform.comp.lh"
@@lpp.import "game/shared/map/Map.sys.lh"

#include "iro/Logger.h"

@defFileLogger(eye, Info)

/* ----------------------------------------------------------------------------
 */
b8 EyeSys::update()
{
  if (auto* transform = tryComp<Transform>(attached))
  {
    Layer* layer = &map->layers[transform->placement_layer];
    view.pos = transform->pos + vec2f(layer->pos) + vec2f(0.5f,0.5f);
    view.rotation = transform->rotation;
  }
  return true;
}

/* ----------------------------------------------------------------------------
 */
void EyeSys::getViewMat(mat3x2* view) const
{
  *view = this->view.getViewMat();
  //
  // *view = 
  //   mat3x2::createInverseTransform(
  //     pos,
  //     rotation,
  //     {zoom,zoom});
}

/* ----------------------------------------------------------------------------
 */
vec2f EyeSys::screenToWorld(vec2f sp) const
{
  return view.viewportPointToWorld(sp, viewport_size);

  // vec2f ss = viewport_size;
  // vec2f wp = sp - ss / 2.f;
  // wp.x /= pixels_per_meter;
  // wp.y /= -f32(pixels_per_meter);
  //
  // auto tm = mat3x2::createTransform(pos, rotation, {zoom,zoom});
  // return tm.transformVec(wp);
}

/* ----------------------------------------------------------------------------
 */
vec2f EyeSys::worldToScreen(vec2f wp) const
{
  return view.worldPointToViewport(wp, viewport_size);

  // vec2f ss = viewport_size;
  // auto tm = mat3x2::createInverseTransform(pos, rotation, {zoom, zoom});
  // vec2f sp = tm.transformVec(wp);
  //
  // sp.x *=  pixels_per_meter;
  // sp.y *= -f32(pixels_per_meter);
  //
  // sp += ss / 2.f;
  //
  // return sp;
}
