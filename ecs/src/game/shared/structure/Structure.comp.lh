/*
 *  Components for entities acting as structures.
 */

$ require "common"
$ local m = require "reflect.Metadata"

@@lpp.import "game/shared/component/Component.lh"

@@lpp.import "asset/StringHash.lh"

/* ============================================================================
 */
enum class ExtendableConnection
{
  // A state in which a structure is standing alone, this is also the default
  // state used when other states cannot be found.
  Island, //

  // Straight formations. If a cap is not specified, the basic 
  // vertical/horizontal state will be used instead.
  Horizontal, //
  HorizontalLeftCap,  
  HorizontalRightCap, 
  Vertical, //      
  VerticalBottomCap,  
  VerticalTopCap,     

  // Corners.
  BottomLeft, //        
  BottomRight,        
  TopLeft,            
  TopRight,           

  // State used when the structure is bordered on 3 sides.
  ThreeWayTopCap,
  ThreeWayBottomCap,
  ThreeWayLeftCap,
  ThreeWayRightCap,

  // State used when the structure is bordered on all cardinal sides,
  // eg. north, south, east, and west.
  FourWay, //

  // State used when the structure is bordered on all sides (including 
  // diagonals).
  Surrounded, //
};

/* ============================================================================
 *  Used on Entities whose appearance changes when Entities of the same kind
 *  are adjacent to them.
 *
 *  It is expected that the sprite states used by the entity include the 
 *  enumerated values above.
 * 
 *  These are processed after the Entity has been created and then removed.
 *
 *  The StringHash identifies what kind of extendable structure this is, 
 *  such that only ExtendableStructures of the same kind will connect.
 *
 *  NOTE(sushi) this is mostly an experimental way to handle things like 
 *              tables being properly connected automatically and will 
 *              likely change or be removed.
 */
struct ExtendableStructure : Component 
{ 
  @m.data_field
  StringHash kind;
};
