$ local cmn = require "common"
$ local metadata = require "reflect.Metadata"

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/containers/Array.h"
#include "iro/containers/Slice.h"
#include "iro/containers/EnumArray.h"
#include "math/vec.h"

@@lpp.import "asset/AssetRef.lh"
@@lpp.import "asset/ArrayDef.lh"
@@lpp.import "graphics/Ref.defs.lh"
@@lpp.import "game/shared/entity/Entity.defs.lh"

using namespace iro;

namespace gfx
{
  struct CompiledTexture;
}

/* ============================================================================
 */
enum class TileKind
{
  Empty,
  Wall,
  Floor,
  
  @metadata.hidden
  COUNT,
};

/* ============================================================================
 */
enum class TileKindConfig
{
  TopLeftCorner,
  TopRightCorner,
  BottomLeftCorner,
  BottomRightCorner,
  Horizontal,
  HorizontalLeftCap,
  HorizontalRightCap,
  Vertical,
  VerticalTopCap,
  VerticalBottomCap,
  FourWayIntersection,
  ThreeWayIntersection,

  Default,

  COUNT,
};

/* ============================================================================
 */
struct TileKindDef
{
  TileKind kind;
  EnumArray<TileKindConfig, gfx::TextureRef> textures;
};

@metadata.source_types(tile_kind)
struct TileKindRef : TypedSourceAssetRef<TileKindDef> {};
  
/* ============================================================================
 */
struct MapTileDef
{
  TileKindRef kind;
  ArrayDef<EntityDefRef> entities;

  TileKindDef& getKind() { return *kind; }
};

/* ============================================================================
 */
struct MapLayerDef
{
  vec2i size;
  vec2i pos;
  ArrayDef<MapTileDef> tiles;
};

/* ============================================================================
 */
@metadata.def
struct MapDef
{
  String name;
  vec2i size;
  ArrayDef<MapLayerDef> layers;
};

@metadata.source_types(map)
struct MapDefRef : TypedSourceAssetRef<MapDef> {};
