$ local cmn = require "common"

@@lpp.import "graphics/Texture.lh"

#include "iro/Common.h"
#include "iro/containers/Array.h"
#include "iro/Unicode.h"

using namespace iro;

struct GameMgr;
struct MapTileDef;
struct MapLayerDef;
struct MapDef;
struct AssetMgr;
struct EntityMgr;
struct EyeSys;
struct MindSys;

/* ============================================================================
 */
struct Tile
{
  const MapTileDef* def = nullptr;

  b8 init(
    const MapTileDef& def, 
    u32 layer_idx, 
    AssetMgr& assetmgr,
    EntityMgr& entmgr,
    gfx::Renderer& renderer);

  void deinit();
};

/* ============================================================================
 */
struct Layer
{
  const MapLayerDef* def = nullptr; 

  Array<Tile> tiles;

  b8 init(
    const MapLayerDef& def, 
    u32 layer_idx, 
    AssetMgr& assetmgr,
    EntityMgr& entmgr,
    gfx::Renderer& renderer);

  void deinit();
};

/* ============================================================================
 */
struct Map
{
  const MapDef* def = nullptr;

  Array<Layer> layers;

  struct InitParams
  {
    AssetMgr&      assetmgr;
    EntityMgr&     entmgr;
    gfx::Renderer& renderer;

    // Optional for attaching to a player character.
    // TODO(sushi) I feel like this would be better handled outside of 
    //             map init.
    EyeSys*  eye;
    MindSys* mind;
  };

  b8 init(const MapDef& def, InitParams& params);
  void deinit();

  // Outputs a Tile as well as the Layer it belongs to at the given pos.
  // Returns false if no tile was at the given pos.
  b8 getTileAndLayerAtPos(Layer** out_layer, Tile** out_tile, vec2f pos);
};
