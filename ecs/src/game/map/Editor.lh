/*
 *  UI for editing maps.
 */

$ require "common"

$ local ui = require "ui.UI"

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/Flags.h"

@@lpp.import "ui/UI.lh"
@@lpp.import "ui/widgets/Text.lh"
@@lpp.import "ui/widgets/Button.lh"
@@lpp.import "ui/widgets/ComboBox.lh"

@@lpp.import "asset/PackedData.lh"
@@lpp.import "asset/SourceDataEditor.lh"
@@lpp.import "asset/SourceDataFileHandle.lh"

@@lpp.import "graphics/Texture.lh"
@@lpp.import "graphics/Framebuffer.lh"

@@lpp.import "game/Render.sys.lh"
@@lpp.import "game/Render.events.lh"
@@lpp.import "game/Eye.sys.lh"

@@lpp.import "game/map/Map.lh"
@@lpp.import "game/map/Map.defs.lh"

@@lpp.import "game/entity/EntityMgr.lh"

struct AssetMgr;
struct BroadcastEventBus;
struct SourceData;

namespace gfx
{
struct Renderer;
}

namespace ui
{

struct MapEditor;
struct TileKindDisplay;
struct SDEditInterface;

/* ============================================================================
 */
struct SDEditInterface : SourceDataEditor::Interface
{
  MapEditor* editor;

  void onEdit(SourceData* data) override;
};

/* ============================================================================
 */
@ui.widget(MapEditor,
schema
{
  font = inherit;
  font_height = inherit;
  text_color = inherit;
},
struct
{
  SourceDataFileHandle h_selected_map = {};
  SourceDataFileHandle h_selected_map_tile_kinds = {};

  gfx::Framebuffer framebuffer;

  gfx::Renderer* renderer;

  DrawCmd* map_render;

  Item* left_panel;

  EyeSys    eye;
  RenderSys rendersys;
  EntityMgr entmgr;
  Map       map;

  Text* world_pos;

  SourceDataEditor* sdedit;
  SDEditInterface sdinterface;

  Text* selected_sdata_info;

  PackedData packed_map_def;

  enum class ControlState
  {
    None,
    Dragging,
    DraggingBorder,
  };

  ControlState control_state;

  vec2f drag_start_eye;
  vec2f drag_start_viewport;

  enum class Tool
  {
    None,
    Add,
    Remove,
  };

  Tool tool = Tool::None;

  ComboBox* tool_selection;
  ComboBox* add_tile_type;

  Item* add_options;

  TileKindDisplay* tile_kind_display;

  enum class Border
  {
    Left,
    Right,
    Top,
    Bottom,
  };
  typedef Flags<Border> BorderFlags;

  BorderFlags border_flags;
  u32 resizing_layer;

  void calcNewDraggedLayerBorder(vec2f mw, vec2f* pos, vec2f* ext);

  vec2f cursor_world;

  // TODO(sushi) remove once we are on Vulkan and can hopefully map 
  //             buffers while UI is updating. That doesn't work rn for 
  //             whatever reason so we have to call renderMap in 
  //             GameMgr::update
  b8 need_render = false;

  static MapEditor* create(UI& ui, gfx::Renderer* renderer);
  void destroy();

  SourceData* getLayerSourceData(u32 idx);
  void        setLayerSourceData(u32 idx, SourceData* data);

  SourceData* getTileSourceData(
    SourceData* tiles, 
    vec2i layer_size, 
    vec2i pos);

  // TODO(sushi) just take in the map name and load all the necessary stuff
  //             internally.
  void selectMap(
    SourceDataFileHandle& h_map, 
    SourceDataFileHandle& h_map_tile_kinds,
    UI& ui,
    AssetMgr& assetmgr,
    gfx::Renderer& renderer);

  void renderMap(UI& ui);

  void onPreMapRender(PreMapRender& event);
  void onPreSpriteRender(PreSpriteRender& event);
  void onPostRender(PostRender& event);

  void evaluate(UI* ui) override;
  void generate(UI* ui) override;
  void update(UI* ui, UpdateReason reason) override;
  void reportDrawCmds(UI* ui, DrawCmdLists& lists) override;
})

}

