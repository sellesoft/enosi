$ require "common"
$ local ui = require "ui.UI"

@@lpp.import "Editor.lh"

@@lpp.import "Engine.lh"
@@lpp.import "game/map/Map.lh"
@@lpp.import "game/map/Map.schema.lh"
@@lpp.import "asset/Packing.lh"

#include "iro/Platform.h"
#include "math/util.h"

namespace ui
{

@defFileLogger(map.editor, Info)

/* ----------------------------------------------------------------------------
 */
template<>
MapEditor* UI::make(String id)
{
  auto* editor = mem::stl_allocator.construct<MapEditor>();
  if (!initItem(id, editor))
  {
    mem::stl_allocator.free(editor);
    return nullptr;
  }
  return editor;
}

/* ----------------------------------------------------------------------------
 */
MapEditor* MapEditor::create(UI& ui, gfx::Renderer* renderer)
{
  auto* editor = ui.begin<MapEditor>("game.map.editor"_str);
  if (editor == nullptr)
    return nullptr;

$ local this = ui.createItemContext("MapEditor", "editor")

  @this.style.set.size({600,400});
  @this.style.set.border({2,2,2,2});
  @this.style.set.display(hidden);

  editor->renderer = renderer;
  editor->update_triggers.set(UpdateReason::MouseHover);

  editor->texture = 
    gfx::Texture::create(
      600,
      400,
      gfx::ImageFormat::RGBA,
      gfx::ImageAddressMode::ClampToBlack,
      gfx::ImageFilter::Nearest,
      gfx::ImageKind::TwoD,
      nullptr);

  editor->framebuffer = gfx::Framebuffer::create(editor->texture);

  editor->map_render = ui.drawcmds.add();
  editor->map_render->alloc(&ui, gfx::putFilledRectCounts());
  editor->map_render->tex = editor->texture;

  if (!editor->entmgr.init())
  {
    ERROR("failed to init entmgr\n");
    return nullptr;
  }

  if (!editor->rendersys.init(*renderer, ui.eng->assetmgr))
  {
    ERROR("failed to init rendersys\n");
    return nullptr;
  }

  editor->world_pos = ui.make<Text>("map.editor.world_pos"_str, ""_str);

  ui.end<MapEditor>();

  return editor;
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::destroy()
{
  if (h_selected_map.isValid())
    h_selected_map.release();
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::selectMap(SourceDataFileHandle& h_map)
{
  h_selected_map = h_map;
}

/* ----------------------------------------------------------------------------
 *  TODO(sushi) map rendering needs to be moved back into here so that it 
 *              doesnt render before we adjust position.
 */
void MapEditor::update(UI* ui, UpdateReason reason)
{
  InputMgr& input = ui->eng->input;

  vec2f mvp = input.mouse.screen - pos_screen;
  vec2f mw = eye.screenToWorld(mvp, size);

  switch (control_state)
  {
  case ControlState::None:
    if (input.wasMouseButtonPressed(MouseButton::Left))
    {
      drag_start_viewport = mvp;
      drag_start_eye = eye.pos;
      control_state = ControlState::Dragging;
    }
    break;

  case ControlState::Dragging:
    {
      eye.pos = 
        drag_start_eye + eye.screenToWorld(drag_start_viewport, size) - mw;
      if (input.wasMouseButtonReleased(MouseButton::Left))
        control_state = ControlState::None;
    }
    break;
  }

  if (input.scroll != 0.f)
  {
    if (input.isKeyDown(Key::LShift))
    {
      eye.rotation += input.scroll * math::degreesToRadians(10);
    }
    else
    {
      // TODO(sushi) figure out why adjusting the eye pos on zoom to zoom 
      //             towards the mouse is not working.
      // vec2f old_mw = eye.screenToWorld(mvp, size);
      eye.zoom -= eye.zoom / 10.f * input.scroll;
      // vec2f new_mw = eye.screenToWorld(mvp, size);
      // eye.pos += old_mw - new_mw;
    }
  }

  io::StaticBuffer<512> text;
  io::formatv(&text, eye.pos, " ", eye.rotation, " ", eye.zoom);

  world_pos->set(text.asStr());
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::renderMap(AssetMgr& assetmgr)
{
  if (!h_selected_map.isValid())
    return;

  entmgr.destroyAllEntities();

  // TODO(sushi) don't do all of this every frame
  renderer->pushBindFramebuffer(framebuffer);

  MapDef mapdef = {};
  packSourceDataIntoType(
    *h_selected_map.getFile()->returned_data,
    &mapdef,
    assetmgr,
    *renderer);

  Map::InitParams map_params = 
  {
    .assetmgr = assetmgr,
    .entmgr   = entmgr,
    .renderer = *renderer,
  };

  Map map;
  map.init(mapdef, map_params);

  RenderSys::UpdateParams params = 
  {
    .viewport = 
    {
      { s32(pos_screen.x), s32(pos_screen.y) },
      { s32(size.x), s32(size.y) },
    },
    .renderer = *renderer,
    .map = &map,
  };

  eye.getViewMat(&params.view);

  rendersys.update(params);

  renderer->pushBindFramebuffer({0});
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::reportDrawCmds(UI* ui, DrawCmdList& pre, DrawCmdList& post)
{
  pre.push(map_render);
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::generate(UI* ui)
{
  auto [vp, ip] = map_render->getPtrs(ui);

  map_render->counts_used = {};

  map_render->counts_used += 
    gfx::putFilledRect(
        vp,
        ip,
        map_render->counts_used,
        pos_screen,
        size,
        {0.f, 1.f},
        {1.f, 1.f},
        {1.f, 0.f},
        {0.f, 0.f},
        {255,255,255,255});
}

}
