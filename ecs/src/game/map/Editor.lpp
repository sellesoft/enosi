$ local cmn = require "common"
$ local ui = require "ui.UI"
$ local Processor = require "reflect.Processor"
$ local ast = require "reflect.AST"

$$$
-- Import specific files we want to have reflected info of.

local imported = cmn.buffer.new()

imported:put(
  lpp.import "Editor.lh",
  lpp.import "game/map/Map.defs.lh")

local p = Processor.new(tostring(imported))
p:run()
$$$
@imported:get

$ local decls =
$ {
$   editor = p.decls.map["struct ui::MapEditor"],
$   tile_kind = p.decls.map["enum TileKind"],
$ }

@@lpp.import "Engine.lh"
@@lpp.import "game/map/Map.lh"
@@lpp.import "asset/Packing.lh"
@@lpp.import "ui/widgets/Separator.lh"

#include "iro/Platform.h"
#include "math/util.h"

namespace ui
{

@defFileLogger(map.editor, Info)

const f32 layer_border_thickness = 0.25f;

/* ============================================================================
 *  Helper for displaying textures.
 */
struct TextureDisplay : public Item
{
  TileKind displayed_kind = TileKind::COUNT;

  EnumArray<TileKind, Array<DrawCmd*>> kind_drawcmds;
  const EnumArray<TileKind, Array<gfx::CompiledTexture*>>* kind_textures;

  const f32 texture_size = 64.f;
  const f32 texture_padding = 4.f;
  const f32 texture_stride = texture_size + texture_padding;

  u32 selected_texture = 0;

  DrawCmd* selected_border;

  /* --------------------------------------------------------------------------
   */
  static TextureDisplay* create(UI& ui, String id)
  {
    auto* td = ui.allocateAndInitItem<TextureDisplay>(id);
    if (td == nullptr)
      return nullptr;

    for (auto& arr : td->kind_drawcmds)
      arr.init();

    td->update_triggers = UpdateReason::MouseReleased;

    td->selected_border = ui.drawcmds.add();
    td->selected_border->alloc(&ui, gfx::putBordersCounts());

    return td;
  }

  /* --------------------------------------------------------------------------
   */
  String getSelectedTextureName() const
  {
    return 
      fs::Path::removeFirstDir(
        fs::Path::removeExtension(
          (*kind_textures)[displayed_kind][selected_texture]->name));
  }

  /* --------------------------------------------------------------------------
   */
  void setFromTileKindDefs(UI& ui, const MapTileKindDefs& defs)
  {
    // Clear any previous draw commands.
    for (auto& arr : kind_drawcmds)
    {
      for (DrawCmd* cmd : arr)
        cmd->remove(&ui);
      arr.clear();
    }

    for (auto& arr : defs.tile_kinds)
    {
      if (arr.isEmpty())
        continue;

      TileKind kind = (TileKind)(&arr - defs.tile_kinds.arr);

      auto& display_arr = kind_drawcmds[kind];

      for (auto tex : arr)
      {
        DrawCmd* cmd = ui.drawcmds.add();

        cmd->alloc(&ui, gfx::putFilledRectCounts());
        cmd->tex = tex->gfx_texture;

        display_arr.push(cmd);
      }
    }

    kind_textures = &defs.tile_kinds;
  }

  /* --------------------------------------------------------------------------
   */
  void evaluate(UI* ui) override
  {
    if (displayed_kind == TileKind::COUNT)
    {
      size = {0.f,0.f};
      return;
    }

    auto& displayed_arr = kind_drawcmds[displayed_kind];

    u32 num_textures = displayed_arr.len();
    u32 rows = ceil((num_textures * texture_stride) / size.x);
    u32 per_row = num_textures / rows;

    size.y = rows * texture_stride - texture_padding;
  }

  /* --------------------------------------------------------------------------
   */
  void generate(UI* ui) override
  {
    if (displayed_kind == TileKind::COUNT)
      return;

    auto& displayed_arr = kind_drawcmds[displayed_kind];

    u32 num_textures = displayed_arr.len();
    u32 rows = ceil((num_textures * texture_stride) / size.x);
    u32 per_row = num_textures / rows;

    u32 row_width = (per_row * texture_stride - texture_padding);

    f32 cursor_start_x = 0.5f * (size.x - row_width);
    vec2f cursor = {cursor_start_x, 0.f};

    for (auto drawcmd : displayed_arr)
    {
      auto [vp,ip] = drawcmd->getPtrs(ui);

      drawcmd->counts_used = {};

      drawcmd->counts_used +=
        gfx::putFilledRect(
          vp, ip,
          drawcmd->counts_used,
          cursor,
          {texture_size, texture_size},
          {0.f, 0.f},
          {1.f, 0.f},
          {1.f, 1.f},
          {0.f, 1.f},
          {255,255,255,255});

      cursor.x += texture_stride;

      if (cursor.x + texture_stride > size.x)
      {
        cursor.x = cursor_start_x;
        cursor.y += texture_stride;
      }
    }

    u32 selected_row = selected_texture / per_row;
    u32 selected_col = selected_texture % per_row;

    vec2f border_pos = texture_stride * vec2f(selected_col, selected_row);
    border_pos.x += cursor_start_x;

    auto [vp, ip] = selected_border->getPtrs(ui);
    selected_border->counts_used = {};
    selected_border->counts_used +=
      gfx::putBorders(
        vp, ip,
        selected_border->counts_used,
        {2,2,2,2},
        border_pos,
        vec2f(texture_size, texture_size),
        {255,255,255,255});
  }

  /* --------------------------------------------------------------------------
   */
  void reportDrawCmds(UI* ui, DrawCmdLists& lists) override
  {
    if (displayed_kind == TileKind::COUNT)
      return;

    for (auto drawcmd : kind_drawcmds[displayed_kind])
      lists.pre_children.push(drawcmd);

    lists.pre_children.push(selected_border);
  }

  /* --------------------------------------------------------------------------
   */
  void update(UI* ui, UpdateReason reason) override
  {
    if (displayed_kind == TileKind::COUNT)
      return;
  
    auto& displayed_arr = kind_drawcmds[displayed_kind];

    u32 num_textures = displayed_arr.len();
    u32 rows = ceil((num_textures * texture_stride) / size.x);
    u32 per_row = num_textures / rows;

    u32 row_width = (per_row * texture_stride - texture_padding);

    f32 texture_start_x = 0.5f * (size.x - row_width);

    f32 texture_extent_x = 
      texture_start_x + texture_stride * per_row - texture_padding;

    vec2f cursor_local = ui->eng->input.mouse.window - pos_screen;

    if (cursor_local.x < texture_start_x || cursor_local.x > texture_extent_x)
      return;

    vec2f cursor_grid_local = cursor_local.xadd(-texture_start_x);

    u32 hovered_col = cursor_grid_local.x / texture_stride;
    u32 hovered_row = cursor_grid_local.y / texture_stride;

    vec2f cursor_texture_local = 
      cursor_grid_local - texture_stride * vec2f(hovered_col, hovered_row);

    if (cursor_texture_local.x > texture_size || 
        cursor_texture_local.y > texture_size)
      return;

    selected_texture = hovered_col + hovered_row * per_row;

    dirty = true;
  }
};

/* ----------------------------------------------------------------------------
 */
void SDEditInterface::onEdit(SourceData* data) 
{
  editor->dirty = true;
}

/* ----------------------------------------------------------------------------
 */
MapEditor* MapEditor::create(UI& ui, gfx::Renderer* renderer)
{
  auto* editor = ui.allocateAndInitItem<MapEditor>("game.map.editor"_str);
  if (editor == nullptr)
    return nullptr;

  ui.beginItem(editor);

  @ui.style(editor, MapEditor, 
  | size: 100% 100%
  | display: hidden
  | background_color: 0x000000ff)

  editor->renderer = renderer;
  editor->update_triggers.set(UpdateReason::MouseHover);

  DrawCmd* map_render = ui.drawcmds.add();
  map_render->tex.init(
    *renderer,
    600,
    400,
    gfx::ImageFormat::RGBA,
    (gfx::ImageUsage)(  gfx::ImageUsage::Sampled
                      | gfx::ImageUsage::FramebufferColor),
    gfx::ImageAddressMode::ClampToBlack,
    gfx::ImageFilter::Nearest,
    nullptr,
    "map_editor"_str);
  map_render->alloc(&ui, gfx::putFilledRectCounts());

  editor->map_render = map_render;

  editor->framebuffer.init(
    *renderer,
    600,
    400,
    map_render->tex,
    {0,0,0,255},
    "map_editor"_str);

  if (!editor->entmgr.init())
  {
    ERROR("failed to init entmgr\n");
    return nullptr;
  }

  //TODO(delle) Look into updating the renderer to support multiple
  // viewports so we dont have to make an entire new render system for
  // this. Might also be cool in gameplay to have a "security camera"
  // view that we could use to render the map from a different perspective.
  if (!editor->rendersys.init(*renderer, ui.eng->assetmgr))
  {
    ERROR("failed to init rendersys\n");
    return nullptr;
  }

  Engine& eng = *ui.eng;

  eng.subscribeToBroadcast<PreMapRender>(
    editor, &MapEditor::onPreMapRender);

  eng.subscribeToBroadcast<PreSpriteRender>(
    editor, &MapEditor::onPreSpriteRender);

  eng.subscribeToBroadcast<PostRender>(
    editor, &MapEditor::onPostRender);

  editor->left_panel = Item::begin(ui, "left_panel"_str);
  {
    // editor->world_pos = Text::make(ui, "world_pos"_str);

    @ui.style(editor->left_panel, Item,
    | size: 300 100%
    | border: 2
    | padding: 3
    | background_color: 0x111111ff)

    $ local ToolEnum = decls.editor.members.map.Tool.type.decl

    String options[] = 
    {
$   for elem in ToolEnum.elems:each() do
      "$(elem.name)"_str,
$   end
    };

    editor->tool_selection = 
      ComboBox::make<MapEditor>(
        ui,
        editor,
        [](MapEditor* editor, u32 selected)
        {
          Tool selected_tool = (Tool)selected;

          if (editor->tool == Tool::Add)
          {
            @ui.style(editor->add_options, Item, display: hidden)
          }

          if (selected_tool == Tool::Add)
          {
            @ui.style(editor->add_options, Item, display: 0)
          }

          editor->tool = (Tool)selected;
        },
        Slice<String>::from(options),
        "tool_selection"_str);

    @ui.style(editor->tool_selection, ComboBox, 
    | size: 100% auto
    | background_color: 0x570000ff)

    auto* separator = Separator::make(ui);
    
    @ui.style(separator, Separator, 
    | size: 100% 1
    | margin: 0 5 0 5)

    editor->add_options = Item::begin(ui, "add_options"_str);
    {
      @ui.style(editor->add_options, Item,
      | size: 100% auto
      | display: hidden)

      String add_type_options[] = 
      {
$     for elem in decls.tile_kind.elems:each() do
        "$(elem.name)"_str,
$     end
      };
      
      editor->add_tile_type = 
        ComboBox::make<MapEditor>(
          ui,
          editor,
          [](MapEditor* editor,u32 selected) 
          {
            editor->texture_display->displayed_kind = (TileKind)selected;
          },
          Slice<String>::from(add_type_options),
          "tile_kind"_str);

      @ui.style(editor->add_tile_type, ComboBox, 
      | size: 100% auto
      | background_color: 0x570000ff)

      editor->texture_display = 
        TextureDisplay::create(ui, "texture_display"_str);

      @ui.style(editor->texture_display, Item, 
      | size: 100% auto
      | margin: 0 5 0 5)
    }
    ui.endItem();

    auto* sdedit_box = ui::Item::begin(ui, "sdedit_box"_str);
    @ui.style(sdedit_box, Item, 
    | size: 100% 300
    | border: 2)

    editor->selected_sdata_info = Text::make(ui, "selected_sdata_info"_str);
    @ui.style(editor->selected_sdata_info, Text, display: hidden);

    editor->sdedit = SourceDataEditor::create(ui, &editor->sdinterface);
    editor->sdinterface.editor = editor;

    ui.endItem();
  }
  ui.endItem();

  ui.endItem();

  // Initial render.
  // editor->renderMap(ui);

  editor->need_render = true;

  return editor;
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::destroy()
{
  if (h_selected_map.isValid())
    h_selected_map.release();
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::selectMap(
    SourceDataFileHandle& h_map,
    SourceDataFileHandle& h_map_tile_kinds,
    UI& ui,
    AssetMgr& assetmgr,
    gfx::Renderer& renderer)
{
  h_selected_map = h_map;
  h_selected_map_tile_kinds = h_map_tile_kinds;

  SourceDataFile* sfile = h_selected_map.getFile();
  SourceData* returned_data = sfile->returned_data;

  PackContext pack_context = 
  {
    .assetmgr  = &assetmgr,
    .renderer  = &renderer,
  };

  packSourceDataIntoType(
    *h_selected_map_tile_kinds.getFile()->returned_data,
    &maptiledefs,
    pack_context);

  texture_display->setFromTileKindDefs(ui, maptiledefs);

  sdedit->setSourceData(ui, returned_data, sfile, "MapDef"_hashed);
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::generate(UI* ui)
{
  // Draw rendered map quad.
  {
    auto [vp, ip] = map_render->getPtrs(ui);

    map_render->counts_used = {};

    map_render->counts_used +=
      gfx::putFilledRect(
        vp,
        ip,
        map_render->counts_used,
        pos_screen,
        size,
        {0.f, 0.f},
        {1.f, 0.f},
        {1.f, 1.f},
        {0.f, 1.f},
        {255,255,255,255});
  }
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::evaluate(UI* ui)
{
  // Rerender the map in case our size changed.
  // TODO(sushi) it would be nice if UI Item provided a callback for
  //             an Item's size changing so we could detect this a little
  //             better. Look into that when we get around to reworking UI
  //             Items to be transform based.

  map_render->tex.deinit(*renderer);
  b8 tex_init = map_render->tex.init(
    *renderer,
    size.x,
    size.y,
    gfx::ImageFormat::RGBA,
    (gfx::ImageUsage)(  gfx::ImageUsage::Sampled
                      | gfx::ImageUsage::FramebufferColor),
    gfx::ImageAddressMode::ClampToBlack,
    gfx::ImageFilter::Nearest,
    nullptr,
    "map_editor"_str);

  if (!tex_init)
    return;

  framebuffer.deinit(*renderer);
  framebuffer.init(
    *renderer,
    size.x,
    size.y,
    map_render->tex,
    {0,0,0,255},
    "map_editor"_str);

  need_render = true;
}

/* ----------------------------------------------------------------------------
 *  TODO(sushi) map rendering needs to be moved back into here so that it
 *              doesnt render before we adjust position.
 */
void MapEditor::update(UI* ui, UpdateReason reason)
{
  InputMgr& input = ui->eng->input;

  vec2f mvp = input.mouse.window - pos_screen;
  vec2f mw = eye.screenToWorld(mvp, size);

  cursor_world = mw;

  SourceDataFile* sdfile = h_selected_map.getFile();

  if (input.isKeyDown(Key::LCtrl) && input.wasKeyReleased(Key::S))
    ui->eng->source_data_file_reg.saveToDisk(h_selected_map);

  switch (control_state)
  {
  case ControlState::None:
    if (input.wasMouseButtonPressed(MouseButton::Left))
    {
      if (tool == Tool::None)
      {
        for (Layer& layer : map.layers)
        {
          vec2f border_pos;
          border_pos.x = layer.def->pos.x - layer_border_thickness;
          border_pos.y = layer.def->pos.y - layer_border_thickness;

          vec2f border_ext;
          border_ext.x = 
            layer.def->pos.x + layer.def->size.x + layer_border_thickness;
          border_ext.y = 
            layer.def->pos.y + layer.def->size.y + layer_border_thickness;

          border_flags.clear();

          if (math::pointInRect(mw, border_pos, border_ext-border_pos))
          {
            if (mw.x < border_pos.x + layer_border_thickness)
              border_flags.set(Border::Left);
            else if (mw.x > border_ext.x - layer_border_thickness)
              border_flags.set(Border::Right);

            if (mw.y < border_pos.y + layer_border_thickness)
              border_flags.set(Border::Top);
            else if (mw.y > border_ext.y - layer_border_thickness)
              border_flags.set(Border::Bottom);
          }

          if (!border_flags.isNone())
          {
            control_state = ControlState::DraggingBorder;
            resizing_layer = &layer - map.layers.arr;
            break;
          }
        }

        if (control_state == ControlState::None)
        {
          if (input.isKeyDown(Key::LCtrl))
          {
            Tile* tile;
            Layer* layer;
            if (map.getTileAndLayerAtPos(&layer, &tile, mw))
            {
              u32 layer_idx = layer - map.layers.arr;
              u32 tile_idx = tile - layer->tiles.arr;

              SourceData* map_data = sdfile->returned_data;
              SourceData* layers_data = 
                map_data->findChildByName("layers"_str);
              SourceData* layer_data = layers_data->children[layer_idx];
              SourceData* tiles_data = 
                layer_data->findChildByName("tiles"_str);
              SourceData* tile_data = tiles_data->children[tile_idx];
              sdedit->setSourceData(
                *ui, 
                tile_data, 
                h_selected_map.getFile(),
                "MapTileDef"_hashed);

              @ui.style(selected_sdata_info, Text, display: 0);

              io::SmallBuffer<255> buffer;
              vec2f tile_pos = map.getTilePos(*layer, *tile);
              io::formatv(&buffer, "editing tile at ", tile_pos);
              selected_sdata_info->set(buffer.asStr());
            }
          }

          drag_start_viewport = mvp;
          drag_start_eye = eye.pos;
          control_state = ControlState::Dragging;
        }
      }
      else
      {
        Tile* tile;
        Layer* layer;
        if (map.getTileAndLayerAtPos(&layer, &tile, mw))
        {
          u32 layer_idx = layer - map.layers.arr;
          u32 tile_idx = tile - layer->tiles.arr;

          SourceData* map_data = sdfile->returned_data;
          SourceData* layers_data = map_data->findChildByName("layers"_str);
          SourceData* layer_data = layers_data->children[layer_idx];
          SourceData* tiles_data = layer_data->findChildByName("tiles"_str);
          SourceData* tile_data = tiles_data->children[tile_idx];
          tile_data->dump();

          switch (tool)
          {
          case Tool::Add:
            {
              auto* kind = sdfile->allocateSourceData();
              auto* texture = sdfile->allocateSourceData();

              kind->name = "kind"_str;
              kind->val.str = 
                add_tile_type->getSelectedOptionName()
                  .allocateCopy(&sdfile->string_cache);

              texture->name = "texture"_str;
              texture->val.str = texture_display->getSelectedTextureName();

              tile_data->children.push(kind);
              tile_data->children.push(texture);
            }
            break;

          case Tool::Remove:
            {
              tile_data->children.clear();
            }
            break;
          }
        }

        need_render = true;
      }
    }
    break;

  case ControlState::Dragging:
    {
      vec2f new_pos =
        drag_start_eye + eye.screenToWorld(drag_start_viewport, size) - mw;

      if (eye.pos != new_pos)
      {
        eye.pos = new_pos;
        need_render = true;
      }

      if (input.wasMouseButtonReleased(MouseButton::Left))
        control_state = ControlState::None;
    }
    break;

  case ControlState::DraggingBorder:
    {
      need_render = true;
      if (input.wasMouseButtonReleased(MouseButton::Left))
      {
        control_state = ControlState::None;

        Layer& layer = map.layers[resizing_layer];

        vec2f old_pos = layer.def->pos;
        vec2f old_ext = layer.def->pos + layer.def->size;

        vec2f new_pos = old_pos;
        vec2f new_ext = old_ext;

        calcNewDraggedLayerBorder(mw, &new_pos, &new_ext);

        SourceData* old_layer = getLayerSourceData(resizing_layer);
        SourceData* old_tiles = old_layer->findChildByName("tiles"_str);

        SourceData* new_layer = sdfile->allocateSourceData();

        new_layer->children.init();

        new_layer->addVec2(*sdfile, "pos"_str, new_pos);
        new_layer->addVec2(*sdfile, "size"_str, new_ext-new_pos);

        SourceData* new_tiles = new_layer->addObject(*sdfile, "tiles"_str);

        for (s32 y = new_pos.y; y < new_ext.y; ++y)
        {
          for (s32 x = new_pos.x; x < new_ext.x; ++x)
          {
            if (x >= old_pos.x && x < old_ext.x &&
                y >= old_pos.y && y < old_ext.y)
            {
              new_tiles->children.push(
                getTileSourceData(
                  old_tiles,
                  layer.def->size,
                  vec2i(x-old_pos.x, y-old_pos.y)));
            }
            else
            {
              new_tiles->addObject(*sdfile, nil);
            }
          }
        }

        setLayerSourceData(resizing_layer, new_layer);

        // new_layer->dump();

        sdedit->notifyExternalChange();
      }
    }
    break;
  }

  if (input.scroll != 0.f)
  {
    if (input.isKeyDown(Key::LShift))
    {
      eye.rotation += input.scroll * math::degreesToRadians(10);
    }
    else
    {
      // TODO(sushi) figure out why adjusting the eye pos on zoom to zoom
      //             towards the mouse is not working.
      // vec2f old_mw = eye.screenToWorld(mvp, size);
      eye.zoom -= eye.zoom / 10.f * input.scroll;
      // vec2f new_mw = eye.screenToWorld(mvp, size);
      // eye.pos += old_mw - new_mw;
    }

    need_render = true;
  }

  if (need_render)
  {
    // renderMap(*ui);
  }

$ if false then
  io::StaticBuffer<512> text;
  io::formatv(&text,
    eye.pos,      " ",
    eye.rotation, " ",
    eye.zoom,     " ",
    mw,           " ",
    mvp,          " ",
    eye.worldToScreen(mw, size));

  world_pos->set(text.asStr());
$ end
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::calcNewDraggedLayerBorder(vec2f mw, vec2f* pos, vec2f* ext)
{
  vec2f layer_pos = *pos;
  vec2f layer_ext = *ext;

  if (border_flags.test(Border::Top))
    layer_pos.y = min(mw.y, layer_ext.y);
  else if (border_flags.test(Border::Bottom))
    layer_ext.y = max(mw.y, layer_pos.y);

  if (border_flags.test(Border::Left))
    layer_pos.x = min(mw.x, layer_ext.x);
  else if (border_flags.test(Border::Right))
    layer_ext.x = max(mw.x, layer_pos.x);

  layer_pos = round(layer_pos);
  layer_ext = round(layer_ext);

  *pos = layer_pos;
  *ext = layer_ext;
}

/* ----------------------------------------------------------------------------
 */
SourceData* MapEditor::getLayerSourceData(u32 idx)
{
  SourceData* map_data = h_selected_map.getFile()->returned_data;
  SourceData* layers_data = map_data->findChildByName("layers"_str);
  return layers_data->children[idx];
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::setLayerSourceData(u32 idx, SourceData* data)
{
  SourceData* map_data = h_selected_map.getFile()->returned_data;
  SourceData* layers_data = map_data->findChildByName("layers"_str);
  SourceData* old = layers_data->children[idx];
  layers_data->children[idx] = data;
}

/* ----------------------------------------------------------------------------
 */
SourceData* MapEditor::getTileSourceData(
    SourceData* tiles, 
    vec2i size,
    vec2i pos)
{
  return tiles->children[pos.x + size.x * pos.y];
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::renderMap(UI& ui)
{
  if (!need_render || size.x <= 0 || size.y <= 0)
    return;

  need_render = false;

  AssetMgr& assetmgr = ui.eng->assetmgr;
  BroadcastEventBus& broadcast = ui.eng->eventbus.broadcast;

  if (!h_selected_map.isValid())
    return;

  entmgr.destroyAllEntities();
  if (notnil(map.layers))
  {
    map.deinit();
    destroyPackedData(&mapdef);
  }

  renderer->bindFramebuffer(framebuffer);

  PackContext pack_context = 
  {
    .assetmgr = &assetmgr,
    .renderer = renderer,
  };

  packSourceDataIntoType(
    *h_selected_map.getFile()->returned_data,
    &mapdef,
    pack_context);

  Map::InitParams map_params =
  {
    .assetmgr = assetmgr,
    .entmgr   = entmgr,
    .renderer = *renderer,
  };

  map.init(mapdef, map_params);

  RenderSys::UpdateParams params =
  {
    .viewport =
    {
      { s32(pos_screen.x), s32(pos_screen.y) },
      { s32(size.x), s32(size.y) },
    },
    .renderer = *renderer,
    .entmgr = &entmgr,
    .map = &map,
    .debug = true,
    .broadcast = &broadcast,
  };

  eye.getViewMat(&params.view);

  rendersys.update(params);

  renderer->bindFramebuffer({0});
  renderer->setViewport({0,0}, {ui.eng->window.size.x,ui.eng->window.size.y});
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::onPreMapRender(PreMapRender& event)
{

}

/* ----------------------------------------------------------------------------
 */
void MapEditor::onPreSpriteRender(PreSpriteRender& event)
{
  auto* vp = (gfx::Vertex*)rendersys.external_vertex_buffer.mapped_data;
  auto* ip = (gfx::Index*)rendersys.external_index_buffer.mapped_data;

  // Draw grid lines.
  {
    // TODO(sushi) dynamically size lines relative to zoom and
    //             their separation.
    vec2f bl_world = floor(eye.screenToWorld({0.f, size.y}, size));
    vec2f tr_world = ceil(eye.screenToWorld({size.x, 0.f}, size));

    const f32 grid_line_width = 0.025f;
    const Color grid_line_color = 0xfb364066;

    for (f32 y = bl_world.y; y <= tr_world.y; y += 1.f)
    {
      rendersys.external_counts +=
        gfx::putLine(
          vp, ip,
          rendersys.external_counts,
          {tr_world.x, y},
          {bl_world.x, y},
          grid_line_width,
          grid_line_color);
    }

    for (f32 x = bl_world.x; x <= tr_world.x; x += 1.f)
    {
      rendersys.external_counts +=
        gfx::putLine(
          vp, ip,
          rendersys.external_counts,
          {x, tr_world.y},
          {x, bl_world.y},
          grid_line_width,
          grid_line_color);
    }
  }

  // Draw layer outlines.
  {
    for (const Layer& layer : map.layers)
    {
      u32 layer_idx = &layer - map.layers.arr;

      vec2f layer_pos = layer.def->pos;
      vec2f layer_ext = layer.def->pos + layer.def->size;

      if (control_state == ControlState::DraggingBorder &&
          layer_idx == resizing_layer)
      {
        calcNewDraggedLayerBorder(cursor_world, &layer_pos, &layer_ext);
      }

      rendersys.external_counts +=
        gfx::putBorders(
          vp, ip,
          rendersys.external_counts,
          layer_border_thickness * vec4f(1,1,1,1),
          layer_pos,
          layer_ext - layer_pos,
          0xdf99f0);
    }
  }
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::onPostRender(PostRender& event)
{
}

/* ----------------------------------------------------------------------------
 */
void MapEditor::reportDrawCmds(UI* ui, DrawCmdLists& lists)
{
  lists.pre_children.push(map_render);
}

}
