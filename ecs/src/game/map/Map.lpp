$ local cmn = require "common"

@@lpp.import "game/map/Map.lh"

@@lpp.import "Engine.lh"

@@lpp.import "asset/AssetMgr.lh"
@@lpp.import "asset/SourceData.lh"

@@lpp.import "game/GameMgr.lh"

@@lpp.import "game/Spawner.comp.lh"
@@lpp.import "game/Transform.comp.lh"

@@lpp.import "game/map/Map.defs.lh"

@@lpp.import "game/entity/Entity.defs.lh"
@@lpp.import "game/entity/EntityLoader.lh"

#include "iro/Logger.h"
#include "math/util.h"

@cmn.defFileLogger(game.map, Info)

/* ----------------------------------------------------------------------------
 */
b8 Tile::init(
    const MapTileDef& def, 
    u32               layer_idx, 
    vec2f             pos,
    AssetMgr&         assetmgr,
    EntityMgr&        entmgr,
    gfx::Renderer&    renderer)
{
  TRACE("initializing tile at (",layer_idx,")\n");

  this->def = &def;
  
  for (const EntityDef& entdef : def.entities)
  {
    auto entid = loadEntity(entdef, entmgr, assetmgr, renderer);
    if (auto* ent = entmgr.getEntity(entid))
    {
      auto* transform = ent->tryComp<Transform>();
      transform->pos = pos;
      transform->placement_layer = layer_idx;
    }
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
void Tile::deinit()
{

}

/* ----------------------------------------------------------------------------
 */
b8 Layer::init(
    const MapLayerDef& def, 
    u32                layer_idx, 
    AssetMgr&          assetmgr,
    EntityMgr&         entmgr,
    gfx::Renderer&     renderer)
{
  TRACE("initializing layer at (",def.pos.x,",",def.pos.y,",",layer_idx,")\n");
  assert(isnil(tiles));

  this->def = &def;

  if (!tiles.init())
    return ERROR("failed to initialize block array\n");

  tiles.resize(def.size.x * def.size.y);

  if (tiles.len() != def.tiles.len())
    return ERROR("missing tiles in def of layer ", layer_idx, ". Expected ", 
                 tiles.len(), " tiles but was only provided ", def.tiles.len(),
                 "\n");

  for (u32 tile_idx = 0; tile_idx < tiles.len(); ++tile_idx)
  {
    Tile* tile = tiles.arr + tile_idx;
    MapTileDef* tile_def = def.tiles.arr + tile_idx;

    if (!tile->init(
          *tile_def,
          layer_idx,
          getTilePos(*tile),
          assetmgr,
          entmgr,
          renderer))
      return false;
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
void Layer::deinit()
{
  for (Tile& tile : tiles)
    tile.deinit();

  tiles.destroy();
}

/* ----------------------------------------------------------------------------
 */
vec2f Layer::getTilePos(const Tile& tile) const
{
  u32 tile_idx = getTileIndex(tile);
  return { f32(tile_idx % def->size.x), f32(tile_idx / def->size.x) };
}

/* ----------------------------------------------------------------------------
 */
b8 Map::init(const MapDef& def, InitParams& params)
{
  // INFO("initializing map '",def.name,"'\n");
  assert(isnil(layers));

  this->def = &def;

  AssetMgr&      assetmgr = params.assetmgr;
  EntityMgr&     entmgr   = params.entmgr;
  ComponentMgr&  cmpmgr   = entmgr.cmpmgr;
  gfx::Renderer& renderer = params.renderer;

  if (!layers.init())
    return ERROR("failed to initialize layer array\n");

  layers.resize(def.layers.len());
  
  for (u32 i = 0; i < def.layers.len(); ++i)
  {
    MapLayerDef* layer_def = def.layers.arr + i;
    Layer* layer = layers.arr + i;
    
    if (!layer->init(*layer_def, i, assetmgr, entmgr, renderer))
      return false;
  }

  // Iterate over PlayerSpawners 
  if (params.mind && params.eye)
  {
    MindSys& mind = *params.mind;
    EyeSys&  eye  = *params.eye;

    for (PlayerSpawner& spawner : cmpmgr.iterate<PlayerSpawner>())
    {
      auto player_entid = 
        entmgr.createEntityFromSourceData(
          "assets/entities/Test.ent"_str,
          assetmgr,
          renderer);

      mind.attach(player_entid);
      eye.attach(player_entid);

      auto player_ent = entmgr.getEntity(player_entid);
      auto* player_transform = player_ent->tryComp<Transform>();

      auto spawner_ent = entmgr.getEntity(spawner.owner);
      auto* spawner_transform = spawner_ent->tryComp<Transform>();

      player_transform->pos = spawner_transform->pos;
      player_transform->placement_layer = spawner_transform->placement_layer;
    }
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
void Map::deinit()
{
  for (Layer& layer : layers)
    layer.deinit();

  layers.destroy();
}

/* ----------------------------------------------------------------------------
 */
b8 Map::getTileAndLayerAtPos(
    Layer** out_layer, 
    Tile**  out_tile,  
    vec2f   pos)
{
  for (s32 layer_idx = layers.len()-1; layer_idx >= 0; --layer_idx)
  {
    Layer* layer = &layers[layer_idx];
    vec2f layer_pos = layer->def->pos;
    vec2f layer_size = layer->def->size;
    if (math::pointInRect<f32>(pos, layer_pos, layer_size))
    {
      for (s32 tile_idx = layer->tiles.len()-1; tile_idx >= 0; --tile_idx)
      {
        Tile* tile = &layer->tiles[tile_idx];
        vec2f tile_pos = layer->getTilePos(*tile);

        if (math::pointInRect<f32>(
              pos, 
              layer_pos + tile_pos, 
              {1,1}))
        {
          if (out_layer)
            *out_layer = layer;
          if (out_tile)
            *out_tile = tile;
          return true;
        }
      }
    }
  }
  return false;
}

/* ----------------------------------------------------------------------------
 */
vec2f Map::getTilePos(const Layer& layer, const Tile& tile) const
{
  return layer.def->pos + layer.getTilePos(tile);
}
