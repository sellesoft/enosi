$ local cmn = require "common"
$ local Comp = require "game.component.Component"
$ local glob = require "Glob"
$ local List = require "List"

@@lpp.import "game/entity/EntityLoader.lh"

@@lpp.import "asset/SourceDataFile.lh"
@@lpp.import "asset/Packing.lh"

@@lpp.import "graphics/Renderer.lh"

@@lpp.import "game/entity/EntityMgr.lh"

@@lpp.import "game/component/Component.lh"

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/Logger.h"

@cmn.defFileLogger(ent.loader, Info);

$ local buf = cmn.buffer.new()
$ glob "src/game/**/*.comp.lh" :each(function(path)
$   local result = lpp.import(path:sub(#"src/"+1))
$   if result then
$     buf:put(result)
$   end
$ end)
@buf:get

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 loadComponentType(
    const SourceData& data, 
    EntityId       ent,
    EntityMgr&     entmgr,
    ComponentMgr&  cmpmgr,
    AssetMgr&      assetmgr,
    gfx::Renderer& renderer);

$ for comp in Comp.components.list:each() do
/* ----------------------------------------------------------------------------
 */
template<>
b8 loadComponentType<$(comp.name)>(
    const SourceData& data, 
    EntityId       ent,
    EntityMgr&     entmgr,
    ComponentMgr&  cmpmgr,
    AssetMgr&      assetmgr,
    gfx::Renderer& renderer)
{
  using TComp = $(comp.name);

  TComp* comp = cmpmgr.allocateComponent<TComp>();

  if (comp == nullptr)
    return ERROR("failed to allocate $(comp.name) component\n");

  if (!packSourceDataIntoType(data, comp, assetmgr, renderer))
    return false;

  entmgr.addComp(ent, comp);

  return true;
}
$ end

/* ----------------------------------------------------------------------------
 */
b8 loadComponent(
    const SourceData& data, 
    EntityId       ent,
    EntityMgr&     entmgr,
    ComponentMgr&  cmpmgr,
    AssetMgr&      assetmgr,
    gfx::Renderer& renderer)
{
  switch (data.type.hash())
  {
$ for comp in Comp.components.list:each() do
  case "$(comp.name)"_hashed:
    return 
      loadComponentType<$(comp.name)>(
        data, 
        ent, 
        entmgr, 
        cmpmgr, 
        assetmgr,
        renderer);
$ end
  default: 
    return ERROR("no component named ", data.type, "\n");
  }
}

/* ----------------------------------------------------------------------------
 */
EntityId loadEntity(
    const SourceData& data, 
    EntityMgr& entmgr,
    AssetMgr& assetmgr,
    gfx::Renderer& renderer)
{
  ComponentMgr& cmpmgr = entmgr.cmpmgr;

$ local function failIf(cond, ...)
$   local args = cmn.buffer.new()
$   local first = true
$   for arg in List{...}:each() do
$     if first then
$       first = false
$     else
$       args:put ","
$     end
$     args:put(arg)
$   end
  if ($(cond))
  {
    ERROR($(args));
    return nil;
  }
$ end

  @failIf(!data.hasObjectData(), "expected object data to define entity\n");

  const SourceData* name = data.findChildByName("name"_str);

  @failIf(name == nullptr, "all entities must be assigned a name\n");
  @failIf(!name->hasStringValue(), "expected a value for name of entity\n");

  EntityId entid = entmgr.createEntity(name->val.str);

  @failIf(isnil(entid), "failed to create entity\n");

  const SourceData* component_data = data.findChildByName("components"_str);
  
  @failIf(component_data == nullptr, 
    "all entities must have a 'components' array");

  @failIf(!component_data->hasObjectData(),
    "expected an array for 'components' field");

  for (const SourceData* component : component_data->children)
  {
    @failIf(!component->hasObjectData(), 
      "expected object data for component\n");

    @failIf(!loadComponent(
        *component, 
        entid, 
        entmgr, 
        cmpmgr, 
        assetmgr,
        renderer), 
      "failed to load component\n");
  }

  auto* ent = entmgr.getEntity(entid);

  if (nullptr == ent->tryComp<Transform>())
  {
    // All entities must have a transform.
    entmgr.addComp(ent, cmpmgr.allocateComponent<Transform>());
  }

  return entid;

}

/* ----------------------------------------------------------------------------
 */
EntityId loadEntity(
    const SourceDataFile& sfile, 
    EntityMgr& entmgr,
    AssetMgr& assetmgr,
    gfx::Renderer& renderer)
{
  ComponentMgr& cmpmgr = entmgr.cmpmgr;

  return loadEntity(*sfile.returned_data, entmgr, assetmgr, renderer);

}
