$ local cmn = require "common"
$ local buffer = require "string.buffer"
$ local glob = require "Glob"
$ local Comp = require "game.component.Component"

#include "iro/Logger.h"
#include "iro/containers/LinkedPool.h"

using namespace iro;

@cmn.defFileLogger(compmgr, Info)

@@lpp.import "ComponentMgr.lh"

$ local buf = buffer.new()
$ glob "src/game/**/*.comp.lh" :each(function(path)
$   local result = lpp.import(path:sub(#"src/"+1))
$   if result then
$     buf:put(result)
$   end
$ end)
$(buf:get())

$ Comp.sort()

/* ============================================================================
 */
struct CompPools
{

$ for comp in Comp.components.list:each() do
  DLinkedPool<$(comp.name)> $(comp.name)_pool;
$ end

  b8 init()
  {
$ for comp in Comp.components.list:each() do
    if (!$(comp.name)_pool.init())
      return ERROR("failed to init $(comp.name) component pool\n");
$ end
    return true;
  }

  void deinit()
  {
$ for comp in Comp.components.list:each() do
    for (Component& comp : $(comp.name)_pool)
    {
      comp.kind = 0;
      comp.owner = nil;
    }
    $(comp.name)_pool.deinit();
$ end
  }

  template<typename T>
  T* allocateComponent();
};

$ for comp,i in Comp.components.list:eachWithIndex() do

/* ----------------------------------------------------------------------------
 */
template<>
$(comp.name)* ComponentMgr::allocateComponent<$(comp.name)>()
{
  auto* node = pools->$(comp.name)_pool.pushHead();
  auto* cmp = node->data;
  cmp->node = node;
  cmp->init();
  return cmp;
}


/* ----------------------------------------------------------------------------
 */
template<>
ComponentIter<$(comp.name)> ComponentMgr::iterate<$(comp.name)>()
{
  return ComponentIter<$(comp.name)>{pools->$(comp.name)_pool.headNode()};
}

$ end

/* ----------------------------------------------------------------------------
 */
void ComponentMgr::deallocateComponent(Component* cmp)
{
  switch (cmp->kind)
  {
$ for comp,i in Comp.components.list:eachWithIndex() do
  case $(i):
    pools->$(comp.name)_pool.remove(
      (DLinkedPool<$(comp.name)>::Node*)cmp->node);
    break;
$ end
  }
}

/* ----------------------------------------------------------------------------
 */
b8 ComponentMgr::init()
{
  pools = mem::stl_allocator.construct<CompPools>();

  if (!pools->init())
    return false;

  return true;
}

/* ----------------------------------------------------------------------------
 */
void ComponentMgr::deinit()
{
  pools->deinit();
  mem::stl_allocator.deconstruct(pools);
}

