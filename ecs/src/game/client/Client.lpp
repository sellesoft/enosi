/*
 *  Definition of the Client, as well as its interface.
 *  
 *  TODO(sushi) move the client-specific stuff from Engine into here, such 
 *              as the Renderer, since the server should never use it.
 */

$ require "common"
$ local ui = require "ui.UI"

@@lpp.import "game/client/Client.lh"

@@lpp.import "game/client/GameSim.lh"

@@lpp.import "Engine.lh"

@@lpp.import "ui/UI.lh"
@@lpp.import "graphics/Renderer.lh"
@@lpp.import "input/InputMgr.lh"
@@lpp.import "graphics/Ref.defs.lh"
@@lpp.import "game/client/TestSkin.defs.lh"

@log.ger(client, Debug)

/* ----------------------------------------------------------------------------
 */
b8 Client::init(Engine* engine)
{
  this->engine = engine;

$ local function init(act, name)
  {
    auto start = TimePoint::monotonic();
    if (!$(act))
      return FATAL("failed to initialize $(name)\n");
    INFO("finished initializing ", color::cyan("$(name)"), " in ",
         WithUnits(TimePoint::monotonic() - start), "\n");
  }
$ end

  @init(input.init(), InputMgr);

  @init(Window::initializeBackend(), Window backend);
  @init(window.init("ecs"_str, input), Window);

  gfx::Renderer::InitParams renderer_params = 
  {
    .assetmgr  = engine->assetmgr,
    .window    = window,
    .allocator = mem::stl_allocator,
  };
  @init(renderer.init(renderer_params), Renderer);

  // TODO(sushi) this is dumb, get rid of it by just making the texture
  //             manually through gfx::Texture.
  gfx::CompiledTexture::CompileParams white_texture_params =
  {
    .name         = "assets/textures/white"_str,
    .width        = 2,
    .height       = 2,
    .format       = gfx::ImageFormat::BW,
    .usage        = gfx::ImageUsage::Sampled,
    .filter       = gfx::ImageFilter::Nearest,
    .address_mode = gfx::ImageAddressMode::ClampToWhite,
    .allocator    = &mem::stl_allocator,
    .assetmgr     = &engine->assetmgr,
  };

  u8 pixels[16] =
  {
    0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,
  };

  gfx::CompiledTexture::compileFromMemory(pixels, white_texture_params);

  auto* white_texture_compiled =
    gfx::CompiledTexture::load(
      "assets/textures/white"_str, engine->assetmgr, renderer);
  if (white_texture_compiled == nullptr)
    return ERROR("failed to load white texture\n");
  white_texture = white_texture_compiled->gfx_texture;

  AssetLoader asset_loader = 
  {
    .renderer = renderer,
    .assetmgr = engine->assetmgr,
    .sfilereg = engine->source_data_file_reg,
  };

  // ui::UI::InitParams ui_params = 
  // {
  //   .assetmgr = engine->assetmgr,
  //   .renderer = renderer,
  //
  //   .white_texture = white_texture,
  //
  //   .viewport = Rect::from({0,0}, window.size),
  //
  //   .loader   = asset_loader,
  // };
  // \@init(ui.init(ui_params), UI);

  ui::UI::InitParams ui_params = 
  {
    .assetmgr = engine->assetmgr,
    .renderer = renderer,
    
    .white_texture = white_texture,

    .loader = asset_loader,
  };
  @init(ui.init(ui_params), UI);

  cl::GameSim::InitParams sim_params = 
  {
    .loader   = asset_loader,
    .viewport = Rect::from({0,0}, window.size),
    .renderer = renderer,
    .assetmgr = engine->assetmgr,
    .sfilereg = engine->source_data_file_reg,
  };
  @init(sim.init(sim_params), cl::GameSim);

  // \@init(editor.init(this), Editor);

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Client::update()
{
  // Prepares input state for this frame.
  if (!input.update())
    return ERROR("failed to update input\n");

  // Handles OS window events and notifies the inputmgr about any input 
  // events.
  if (!window.update(input))
    return ERROR("failed to update window\n");

  gfx::Renderer::UpdateParams renderer_params = 
  {
    .window = window,
  };

  if (!renderer.update(renderer_params))
    return ERROR("failed to update renderer\n");

  InputState sim_input = {};
  input.cloneInputState(&sim_input);
  
  cl::GameSim::UpdateParams sim_params = 
  {
    .input = sim_input,
  };

  if (!sim.update(sim_params))
    return ERROR("failed to update game sim\n");

  if (!sim.render(renderer))
    return ERROR("failed to render game sim\n");

  InputState ui_input = {};
  input.cloneInputState(&ui_input);

  ui::UI::FrameParams ui_params = 
  {
    .input = ui_input,
    .viewport = Rect::from(vec2f(0,0), window.size),
  };

  ui.beginFrame(ui_params);
  {
    // ui.pushLayer("test_above"_fid, Rect::from(10, 10, 100, 100), {});
    // {
      ui.putQuad(Rect::from(0,0,10,10), 0xff0000ff);
    // }
    // ui.popLayer();

    ui.putQuad(Rect::from(10, 10, 30, 30), 0x00ff00ff);

  }
  ui.endFrame();

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Client::compileRequiredAssets(AssetMgr& assetmgr)
{
  TRACE("compiling white and null textures\n");
  {
    mem::LenientBump texture_compile_allocator;
    if (!texture_compile_allocator.init())
      return ERROR("failed to initialize texture compile allocator\n");
    defer { texture_compile_allocator.deinit(); };
  
    gfx::CompiledTexture::CompileParams null_texture_params =
    {
      .name         = "assets/textures/null"_str,
      .format       = gfx::ImageFormat::RGBA,
      .usage        = gfx::ImageUsage::Sampled,
      .filter       = gfx::ImageFilter::Nearest,
      .address_mode = gfx::ImageAddressMode::ClampToWhite,
      .allocator    = &texture_compile_allocator,
      .assetmgr     = &assetmgr,
    };

    gfx::CompiledTexture::compilePNG(null_texture_params);

    auto* null_texture_compiled =
      gfx::CompiledTexture::load(
        "assets/textures/null"_str, assetmgr, renderer);
    if (null_texture_compiled == nullptr)
      return ERROR("failed to load null texture\n");
  }

  TRACE("compiling shaders\n");
  {
    Ref::LoadParams load_params = 
    {
      .renderer = renderer,
      .assetmgr = engine->assetmgr,
      .sfile_reg = &engine->source_data_file_reg,
    };

    auto compile = [&](String name)
    {
      gfx::ShaderRef ref;
      ref.name = name;
      if (!ref.load(load_params))
        return ERROR("failed to load shader ", name, "\n");
      return true;
    };

    if (!compile("assets/shaders/Fullscreen.vert"_str))
      return false;

    if (!compile("assets/shaders/Scene.frag"_str))
      return false;

    if (!compile("assets/shaders/Scene.vert"_str))
      return false;

    if (!compile("assets/shaders/Stars.frag"_str))
      return false;

    gfx::CompiledShader::CompileParams scene_vertex_shader_params =
    {
      .name      = "assets/shaders/scene.vertex"_str,
      .kind      = gfx::ShaderKind::Vertex,
      .allocator = &mem::stl_allocator,
      .assetmgr  = &assetmgr,
    };
    gfx::CompiledShader::compileGLSL(scene_vertex_shader_params);

    gfx::CompiledShader::CompileParams scene_fragment_shader_params =
    {
      .name      = "assets/shaders/scene.fragment"_str,
      .kind      = gfx::ShaderKind::Fragment,
      .allocator = &mem::stl_allocator,
      .assetmgr  = &assetmgr,
    };
    gfx::CompiledShader::compileGLSL(scene_fragment_shader_params);

    gfx::CompiledShader::CompileParams fullscreen_vertex_shader_params =
    {
      .name      = "assets/shaders/fullscreen.vertex"_str,
      .kind      = gfx::ShaderKind::Vertex,
      .allocator = &mem::stl_allocator,
      .assetmgr  = &assetmgr,
    };
    gfx::CompiledShader::compileGLSL(fullscreen_vertex_shader_params);

    gfx::CompiledShader::CompileParams stars_fragment_shader_params =
    {
      .name      = "assets/shaders/stars.fragment"_str,
      .kind      = gfx::ShaderKind::Fragment,
      .allocator = &mem::stl_allocator,
      .assetmgr  = &assetmgr,
    };
    gfx::CompiledShader::compileGLSL(stars_fragment_shader_params);

    gfx::CompiledShader::CompileParams ui_vertex_shader_params =
    {
      .name      = "assets/shaders/ui.vertex"_str,
      .kind      = gfx::ShaderKind::Vertex,
      .allocator = &mem::stl_allocator,
      .assetmgr  = &assetmgr,
    };
    gfx::CompiledShader::compileGLSL(ui_vertex_shader_params);

    gfx::CompiledShader::CompileParams ui_fragment_shader_params =
    {
      .name      = "assets/shaders/ui.fragment"_str,
      .kind      = gfx::ShaderKind::Fragment,
      .allocator = &mem::stl_allocator,
      .assetmgr  = &assetmgr,
    };
    gfx::CompiledShader::compileGLSL(ui_fragment_shader_params);
  }

  TRACE("compiling gohu font\n");
  {
    CodepointRange ascii =
    {
      .first_codepoint = 32,
      .num_codepoints = 94,
    };

    gfx::Font::CompileParams params =
    {
      .name       = "assets/fonts/gohu"_str,
      .ranges     = CodepointRanges::from(&ascii, 1),
      .allocator  = &mem::stl_allocator,
      .assetmgr   = &assetmgr,
    };

    gfx::Font::compileBDF(params);
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Client::wantHotReload()
{
  if (input.real_state.wasKeyPressed(Key::R))
    return true;
  return false;
}
