/*
 *  The client side of the GameSim. This provides the highest level interface
 *  for running the game as viewed by a client. 
 *
 *  In contrast to the server's GameSim, the client may be in different states,
 *  which are managed by the GameMgr.
 */

$ require "common"

@@lpp.import "game/shared/GameSim.lh"
@@lpp.import "game/client/GameMgr.lh"

#include "math/Rect.h"

namespace gfx { struct View; }

namespace cl
{

/* ============================================================================
 */
struct GameSim : SharedGameSim
{
  GameMgr gamemgr;

  struct InitParams : SharedGameSim::InitParams
  {
    Rect viewport;

    gfx::Renderer& renderer;
    AssetMgr& assetmgr;
    SourceDataFileReg& sfilereg;

    gfx::Texture white_texture;

    AssetLoader loader;
  };

  // Where on the screen the game is expected to render.
  Rect viewport;

  b8 init(InitParams& params);
  void deinit();

  struct UpdateParams : SharedGameSim::UpdateParams
  {
    InputState& input;
  };

  b8 update(UpdateParams& params);

  b8 render(gfx::Renderer& renderer);
  b8 render(gfx::Renderer& renderer, const gfx::View& view);

  void setViewport(Rect viewport) 
  {
    this->viewport = viewport;
    gamemgr.setViewport(viewport);
  }

  b8 loadMap(
      String name, 
      AssetMgr& assetmgr, 
      SourceDataFileReg& sfilereg,
      gfx::Renderer& renderer)
  {
    return 
      gamemgr.loadMap(
        name,
        assetmgr,
        sfilereg,
        renderer);
  }
};

}
