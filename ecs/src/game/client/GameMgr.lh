/*
 *  Manager of the highest level *client* game state, handling states such as 
 *  the main menu, options, being in a game session, the transitions 
 *  between each state, and the UI that is displayed in them.
 */

$ local cmn = require "common"

@@lpp.import "game/shared/entity/EntityMgr.lh"
@@lpp.import "game/shared/component/Component.lh"

@@lpp.import "game/client/entity/EntitySysMgr.lh"
@@lpp.import "game/client/graphics/GameRenderer.lh"

struct InputState;

namespace cl
{

struct GameSim;

/* ============================================================================
 */
struct GameMgr
{
  GameSim* sim;

  EntitySysMgr entsysmgr;
  GameRenderer game_renderer;

  struct InitParams
  {
    GameSim* sim;

    gfx::Renderer& renderer;
    AssetMgr& assetmgr;

    gfx::Texture white_texture;

    AssetLoader loader;
  };

  b8 init(InitParams& params);
  void deinit();

  struct UpdateParams
  { 
    InputState& input;
  };

  b8 update(UpdateParams& params);
  b8 render(gfx::Renderer& renderer);

  /* --------------------------------------------------------------------------
   *  Loads the client into some map.
   */
  b8 loadMap(
    String name,
    AssetMgr& assetmgr,
    SourceDataFileReg& sfilereg,
    gfx::Renderer& renderer);

  void setViewport(Rect viewport);
};

}
