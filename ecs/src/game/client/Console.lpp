$ require "common"

@@lpp.import "Engine.lh"
@@lpp.import "game/client/Console.lh"
@@lpp.import "game/shared/Console.events.lh"
@@lpp.import "ui/UI.lh"

#include "iro/Common.h"
#include "iro/Logger.h"

@log.ger(cl.console, Info)

namespace cl
{

/* ----------------------------------------------------------------------------
 */
b8 Console::init(Engine& eng, AssetLoader& loader, b8 stdin_enabled)
{
  SharedConsole::init(eng, stdin_enabled);

  this->state = State::Hidden;

  mem::zero(this->input_buffer.arr, SharedConsole::INPUT_BUFFER_SIZE);
  this->input_buffer.len = 0;

  if (!loader.load(&skin, "assets/skins/Console.skin"_str))
    return ERROR("failed to load console skin\n");

  text_field_state.edit.setBuffer({
    .ptr = this->input_buffer.arr,
    .len = &this->input_buffer.len,
    .space = SharedConsole::INPUT_BUFFER_SIZE,
  });

  return true;
}

/* ----------------------------------------------------------------------------
 */
void Console::updateInput(InputMgr& input)
{
  SharedConsole::update();

  if (this->state == State::Hidden)
  {
    if (input.real_state.tryConsumePressedKey(Key::Backquote))
      this->state = State::Visible;
  }
  else
  {
    if (input.real_state.tryConsumePressedKey(Key::Backquote))
      this->state = State::Hidden;
  }
}

/* ----------------------------------------------------------------------------
 */
void Console::updateUI(Window& window, InputMgr& input, ui::UI& ui)
{
  if (this->state == State::Hidden)
    return;

  ui::UI::FrameParams ui_params = 
  {
    .input = input.real_state,
    .viewport = Rect::from(vec2f(0,0), vec2f(window.size.x, 20.f)),
  };

  ui.beginFrame(ui_params);
  ui.beginPanel("console.panel"_fid, ui.getBounds());

  if (ui.putTextField(
    "console.input"_fid,
    ui.getBounds(),
    &this->text_field_state,
    this->skin->text_field))
  {
    if (   this->input_buffer.len > 0
        && input.real_state.tryConsumePressedKey(Key::Enter))
    {
      RunCommandEvent event =
      {
        String::from(this->input_buffer.arr, this->input_buffer.len)
      };
      SharedConsole::runCommand(event);
    }
  }

  ui.endPanel();
  ui.endFrame(&input.real_state);
}

}