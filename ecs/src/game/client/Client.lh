/*
 *  Functions for creating a Client, which contains the client-side systems
 *  and memory needed when the game is running as a client.
 *
 *  It's probably more appropriate for this to be an engine level interface
 *  as well, that simply hooks into the game (as I would like this project
 *  to try and keep the Engine agnostic of the Game running in it for
 *  possible reuse in future projects), but for now I'm going to keep it
 *  under game/ to simplify implementing it, as it avoids needing to design
 *  the Client and Server to be modular in what they run.
 */

$ require "common"

@@lpp.import "game/client/GameSim.lh"

@@lpp.import "ui/UI.lh"
@@lpp.import "window/Window.lh"
@@lpp.import "input/InputMgr.lh"
@@lpp.import "graphics/Renderer.lh"
@@lpp.import "game/client/editor/Editor.lh"
@@lpp.import "ui/widgets/TextSkin.defs.lh"
@@lpp.import "net/Address.lh"
@@lpp.import "net/Connection.lh"
@@lpp.import "net/EventBus.lh"

#include "iro/time/Time.h"

/* ============================================================================
 */
struct Client
{
  cl::GameSim sim;
  Engine* engine;

  net::Connection connection;
  TimePoint last_challenge_time;
  net::EventBus net_event_bus;

  // Client only systems.
  gfx::Renderer renderer;
  ui::UI ui;
  InputMgr input;
  Window window;

  cl::Editor editor;

  gfx::Texture white_texture;

  ui::TextSkinRef test_skin;

  b8 init(Engine* engine);

  b8 update();

  b8 compileRequiredAssets(AssetMgr& assetmgr);

  b8 wantHotReload();

  b8 connectToServer(net::Address address);
};
