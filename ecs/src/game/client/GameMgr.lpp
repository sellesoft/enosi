$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "game/client/GameMgr.lh"

@@lpp.import "Engine.lh"

@@lpp.import "asset/Packing.lh"
@@lpp.import "asset/CompiledData.lh"
@@lpp.import "asset/SourceDataFile.lh"
@@lpp.import "asset/SourceDataParser.lh"

@@lpp.import "game/client/GameSim.lh"
@@lpp.import "game/client/graphics/Sprite.comp.lh"

@@lpp.import "game/shared/Eye.sys.lh"
@@lpp.import "game/shared/Input.sys.lh"
@@lpp.import "game/shared/Movement.comp.lh"
@@lpp.import "game/shared/Transform.comp.lh"

@@lpp.import "game/shared/map/Map.defs.lh"

@@lpp.import "window/Window.events.lh"

#include "iro/Logger.h"
#include "iro/Platform.h"

using namespace iro;

namespace cl
{

static Logger logger =
  Logger::create("gamemgr"_str, Logger::Verbosity::Info);

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::init(const InitParams& params)
{
  sim = params.gamesim;

  if (!entsysmgr.init({sim->entmgr}))
    return @log.error("failed to initialize entsysmgr\n");

  entsysmgr.get<InputSys>().mgr = &sim->engine->input;

  if (!rendersys.init(sim->engine->renderer, sim->engine->assetmgr))
    return @log.error("failed to initialize rendersys\n");

$ if false then

  entsysmgr.get<InputSys>().mgr = &eng->input;
  entsysmgr.get<EyeSys>().viewport_size = eng->window.size;
  
  using namespace fs;

  CompiledData::CompileParams params = 
  {
    .name = "assets/maps/Test"_str,
    .type = "MapDef"_str,
    .assetmgr = eng->assetmgr,
    .sfile_reg = eng->source_data_file_reg,
  };

  CompiledData::compile(params);

  auto* data = CompiledData::load(
    "assets/maps/Test.map"_str, "MapDef"_str, eng->assetmgr);

  auto* mapdef = data->getRootAs<MapDef>();

  CompiledData::Refs refs;
  data->getRefs(&refs);

  Ref::LoadParams load_params = 
  {
    .renderer = eng->renderer,
    .assetmgr = eng->assetmgr,
    .sfile_reg = &eng->source_data_file_reg,
  };

  for (auto& ref : refs)
  {
    ref.ptr->load(ref.type, load_params);
  }

  MapSys::LoadParams map_params =
  {
    .assetmgr = engine->assetmgr,
    .entmgr   = entmgr,
    .renderer = engine->renderer,
  };

  if(!entsysmgr.get<MapSys>().load(*mapdef, map_params))
    return ERROR("failed to load map '", mapdef->name, "'\n");

$ end

  return true;
}

/* ----------------------------------------------------------------------------
 */
void GameMgr::deinit()
{
}

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::update()
{
  if (!entsysmgr.update())
    return ERROR("failed to update entity systems\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::render()
{
  RenderSys::UpdateParams render_params =
  {
    .viewport = sim->viewport,
    .renderer = sim->engine->renderer,
  };

  entsysmgr.get<EyeSys>().getViewMat(&render_params.view);
  if (!rendersys.update(render_params))
    return false;

  return true;
}

}
