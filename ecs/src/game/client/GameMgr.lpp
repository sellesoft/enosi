$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "game/client/GameMgr.lh"

@@lpp.import "Engine.lh"

@@lpp.import "asset/Packing.lh"
@@lpp.import "asset/CompiledData.lh"
@@lpp.import "asset/SourceDataFile.lh"
@@lpp.import "asset/SourceDataParser.lh"

@@lpp.import "game/client/GameSim.lh"
@@lpp.import "game/client/graphics/Sprite.comp.lh"

@@lpp.import "game/shared/Eye.sys.lh"
@@lpp.import "game/client/input/Input.sys.lh"
@@lpp.import "game/shared/Movement.comp.lh"
@@lpp.import "game/shared/Transform.comp.lh"

@@lpp.import "game/shared/map/Map.sys.lh"
@@lpp.import "game/shared/map/Map.defs.lh"

@@lpp.import "window/Window.events.lh"

#include "iro/Logger.h"
#include "iro/Platform.h"

using namespace iro;

namespace cl
{

static Logger logger =
  Logger::create("gamemgr"_str, Logger::Verbosity::Info);

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::init(InitParams& params)
{
  sim = params.sim;

  if (!entsysmgr.init({sim->entmgr}))
    return @log.error("failed to initialize entsysmgr\n");

  GameRenderer::InitParams render_params = 
  {
    .renderer = params.renderer,
    .assetmgr = params.assetmgr,
    .white_texture = params.white_texture,
    .loader = params.loader,
  };
  if (!game_renderer.init(render_params))
    return @log.error("failed to initialize rendersys\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
void GameMgr::deinit()
{
}

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::update(UpdateParams& params)
{
  entsysmgr.get<cl::InputSys>().frame_input = params.input;

  if (!entsysmgr.update())
    return ERROR("failed to update entity systems\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::render(gfx::Renderer& renderer)
{
  return render(renderer, entsysmgr.get<EyeSys>().view);
}

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::render(gfx::Renderer& renderer, const gfx::View& view)
{
  GameRenderer::UpdateParams render_params =
  {
    .viewport = sim->viewport,
    .renderer = renderer,
    .map = &entsysmgr.get<MapSys>(),
    .entmgr = &sim->entmgr,
    .view = view.getViewMat(),
  };

  if (!game_renderer.update(render_params))
    return false;

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 GameMgr::loadMap(
    String name,
    AssetMgr& assetmgr,
    SourceDataFileReg& sfilereg,
    gfx::Renderer& renderer)
{
  INFO("setting map to ", name, "\n");

  CompiledData::CompileParams params = 
  {
    .name = "assets/maps/Test"_str,
    .type = "MapDef"_str,
    .assetmgr = assetmgr,
    .sfile_reg = sfilereg,
  };

  CompiledData::compile(params);

  auto* data = CompiledData::load(
    "assets/maps/Test.map"_str, "MapDef"_str, assetmgr);

  auto* mapdef = data->getRootAs<MapDef>();

  CompiledData::Refs refs;

  data->getRefs(&refs);

  RefLoadParams load_params = 
  {
    .renderer = renderer,
    .assetmgr = assetmgr,
    .sfile_reg = &sfilereg,
  };

  for (auto& ref : refs)
  {
    RefLoadParams ref_params = load_params;
    ref_params.type = ref.type;
    if (!loadRef(ref.ptr, ref_params))
      return false;
  }

  MapSys::LoadParams map_params =
  {
    .assetmgr = assetmgr,
    .entmgr   = sim->entmgr,
  };

  if(!entsysmgr.get<MapSys>().load(*mapdef, map_params))
    return ERROR("failed to load map '", mapdef->name, "'\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
void GameMgr::setViewport(Rect viewport)
{
  entsysmgr.get<EyeSys>().viewport_size = viewport.size();
}

}
