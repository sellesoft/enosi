/*
 *  System for rendering Sprite components (and maybe some other stuff).
 *
 *  Note that this is not an EntitySys, as it doesn't (shouldn't) deal with
 *  events or updating components, it's job is to simply communicate with 
 *  gfx::Renderer to render the game.
 *
 *  TODO(sushi) better name for this, as its not an entity system and so
 *              it adhering to the entity system naming convention could
 *              be confusing.
 */

$ require "common"

#include "iro/Common.h"
#include "math/Rect.h"
#include "math/mat.h"
#include "Color.h"

@@lpp.import "graphics/CompiledTexture.lh"
@@lpp.import "graphics/Buffer.lh"
@@lpp.import "graphics/Pipeline.lh"
@@lpp.import "graphics/Pipeline.defs.lh"

namespace gfx
{
  struct Renderer;
}

struct AssetMgr;
struct GameMgr;
struct EntityMgr;
struct MapSys;
struct BroadcastEventBus;

namespace cl
{

/* ============================================================================
 */
struct RenderSys
{
  static constexpr u32 MAX_QUADS = 8192;
  static constexpr u32 MAX_BATCHES = 256;
  static constexpr u32 MAX_EXTERNAL = 8192;

  struct QuadBatch
  {
    u32 quad_count = 0;
    gfx::Texture texture;
  };

  //NOTE: every field is padded to 16 bytes due to std140
  struct Scene
  {
    f32 proj[16];
    f32 view[16];
    f32 resolution_and_time[4];
  };

  struct InitParams
  {
    gfx::Renderer& renderer;
    AssetMgr& assetmgr;
    gfx::Texture& white_texture;

    AssetLoader loader;
  };

  b8 init(InitParams& params);

  void deinit(gfx::Renderer& renderer);

  struct UpdateParams
  {
    Rect           viewport;
    mat3x2         view;
    gfx::Renderer& renderer;
    EntityMgr*     entmgr;
    MapSys*        map;

    b8 debug = false;
  };

  b8 update(const UpdateParams& params);

  void drawQuad(
    gfx::Renderer& renderer,
    vec2f pos,
    gfx::Texture texture,
    Color color);

  gfx::TextureRef null_texture;
  gfx::Texture white_texture;

  Scene scene;
  gfx::Buffer scene_uniform_buffer;

  gfx::Buffer background_vertex_buffer;
  gfx::Buffer background_index_buffer;

  gfx::Buffer quads_vertex_buffer;
  gfx::Buffer quads_index_buffer;

  QuadBatch batches[MAX_BATCHES];
  u32 batch_count = 0;
  u32 quad_count = 0;

  gfx::Buffer external_vertex_buffer;
  gfx::Buffer external_index_buffer;
  vec2i external_counts = {};

  gfx::Pipeline quad_pipeline;
  gfx::PipelineDefRef quad_pipeline_defref;

  gfx::Pipeline stars_pipeline;
  gfx::PipelineDefRef stars_pipeline_defref;
};

}
