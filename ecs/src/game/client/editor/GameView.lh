/*
 *  State and UI related to viewing the game in the Editor.
 */

$ require "common"

@@lpp.import "graphics/View.lh"
@@lpp.import "graphics/RenderTarget.lh"

struct Tile;
struct Layer;
struct AssetLoader;
struct EditorSkinDef;

namespace ui
{
struct UI;
}

namespace cl
{

struct Editor;
struct GameSim;

/* ============================================================================
 */
struct Editor_GameView
{
  // True when the cursor is directly over the game view.
  b8 hovered;

  // The position of the cursor local to the game view. 
  // This is not valid when hovered == false.
  vec2f cursor_pos;

  // The position of the cursor in the world while the view is hovered.
  // This is not valid when hovered == false.
  vec2f cursor_world_pos;

  // The last tile and layer clicked, if any.
  Tile* selected_tile;
  Layer* selected_layer;

  // The currently hovered tile and layer.
  Tile* hovered_tile;
  Layer* hovered_layer;

  enum class ControlState
  {
    None,
    DragOrSelect,
    Dragging,
  };

  ControlState control_state = ControlState::None;
  vec2f drag_start_viewport = {};
  vec2f drag_start_world = {};

  // The graphics view over the game, eg. the position, rotation and scale
  // we are viewing it with.
  gfx::View view;

  vec2f view_size;

  // The RenderTarget we will ask the game to render to in order to display
  // it in a UI quad.
  gfx::RenderTarget render_target;

  b8 init(Editor* editor, gfx::Renderer& renderer);
  void deinit(Editor* editor, gfx::Renderer& renderer);

  b8 update(
    Editor* editor, 
    ui::UI& ui,
    cl::GameSim& sim, 
    const EditorSkinDef& skin);

  void render(gfx::Renderer& renderer, cl::GameSim& sim);
};

}
