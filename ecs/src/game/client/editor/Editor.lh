/*
 *  System for UI that's used to edit assets and control game state.
 *
 *  The Editor organizes various widgets used for editing and provides
 *  helpers for interacting with assets and game state.
 */

$ require "common"

$ local ui = require "ui.UI"

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/Flags.h"
#include "iro/time/Time.h"
#include "iro/io/IO.h"

@@lpp.import "ui/UI.lh"
@@lpp.import "game/client/editor/Skin.defs.lh"
@@lpp.import "graphics/View.lh"

struct Client;

namespace cl
{

struct GameSim;

struct Editor
{
  Client* client = nullptr;

  EditorSkinDefRef skin;

  gfx::View view;

  TimePoint start_time;

  b8 paused = false;

  // TODO(sushi) have a view document or something that we put this in.
  enum class ControlState
  {
    None,
    Dragging,
  };

  ControlState control_state = ControlState::None;
  vec2f drag_start_viewport = {};
  vec2f drag_start_world = {};

  enum class Tool
  {
    None,
    Map,
  };

  Tool active_tool = Tool::None;

  b8   init(Client* client, AssetLoader& loader);
  void deinit();

  f32 getTimer() const 
  { 
    return (TimePoint::monotonic() - start_time).toSeconds(); 
  }

  b8 update(ui::UI& ui, cl::GameSim& sim);

  InputState putUI(ui::UI& ui, const EditorSkinDef& skin);

  struct MapTool
  {
    io::StaticBuffer<128> selected_tile_kind;
  };

  MapTool tool_map;
  void putMapTool(ui::UI& ui, const EditorSkinDef& skin);
};

}
