$ local cmn = require "common"
$ local Processor = require "reflect.Processor"
$ local ast = require "reflect.AST"

$$$
local imported = cmn.buffer.new()

imported:put(
  lpp.import "game/client/editor/Editor.lh",
  lpp.import "game/shared/map/Map.defs.lh")

local p = Processor.new(tostring(imported))
p:run()
$$$
@imported:get

$$$
local Editor = p:lookupDecl "struct cl::Editor"
local Tools = Editor:getMember "Tool"
local TileKindDef = p:lookupDecl "struct TileKindDef"
$$$

@@lpp.import "game/client/Client.lh"
@@lpp.import "game/client/editor/MenuBar.lh"
@@lpp.import "game/shared/Eye.sys.lh"
@@lpp.import "game/shared/map/Map.sys.lh"

@@lpp.import "asset/SourceDataFileReg.lh"

#include "math/util.h"
#include "iro/fs/Glob.h"

@log.ger(editor, Info)

namespace cl
{

/* ----------------------------------------------------------------------------
 */
b8 Editor::init(Client* client, AssetLoader& loader)
{
  this->client = client;

  if (!loader.load(&skinref, "assets/skins/Editor.skin"_str))
    return ERROR("failed to load editor skin\n");

  if (!entity_list.init(this, loader))
    return ERROR("failed to load editor entity list widget\n");

  start_time = TimePoint::monotonic();

  return true;
}

/* ----------------------------------------------------------------------------
 */
void Editor::deinit()
{
  view.deinit(this);
  entity_list.deinit(this);
}

/* ----------------------------------------------------------------------------
 */
b8 Editor::update(ui::UI& ui, cl::GameSim& sim)
{
  const EditorSkinDef& skin = *skinref;

  const f32 content_padding = 5.f;

  const u32 tool_count = $(Tools.elems:len());
  const f32 tool_option_height = 16.f;
  const f32 tool_select_height = tool_count * tool_option_height;

  const f32 tool_select_tool_panel_spacing = 10.f;
  const f32 tool_y = tool_option_height + tool_select_tool_panel_spacing;

  // TODO(sushi) separate rendering for Editor and UI into explicit functions.
  if (!client->renderer.beginRenderPassOverSwapchainImage(
        vec2i(0,0),
        vec2u(client->window.size),
        0x000000ff))
    return ERROR("failed to begin render pass for editor\n");

  InputState ui_input = {};
  client->input.cloneInputState(&ui_input);

  ui::UI::FrameParams ui_params = 
  {
    .input = ui_input,
    .viewport = Rect::from(vec2f(0,0), vec2f(client->window.size)),
  };

  ui.beginFrame(ui_params);

  Rect left_panel_bounds = {0.f, 0.f, 250.f, ui.getHeight()};
  Rect game_view_bounds = 
  { 
    left_panel_bounds.extent().x, 
    0.f,  
    ui.getWidth() - left_panel_bounds.w,
    ui.getHeight(),
  };

  // Draw the game view.
  ui.beginGroup(game_view_bounds);
  view.update(this, ui, sim, skin);
  ui.endGroup();

  ui.beginPanel("editor.left_panel"_fid, left_panel_bounds);

  ui.putQuad(ui.getBounds(), skin.bg_color);

  // Begin a padded group.
  ui.beginGroup(ui.getBounds().contracted(content_padding));

  Rect bounds = ui.getBounds();

  if (!entity_list.update(this, ui, sim, skin))
    return ERROR("failed to update entity list\n");

  static const String tool_names[] = 
  {
$ for elem in Tools.elems:each() do
    "$(elem.name)"_str,
$ end
  };

  if (ui.beginDropDown(
        "editor.tool_select"_fid,
        {0.f, 0.f, bounds.w, 16.f},
        tool_select_height,
        tool_names[(u32)active_tool],
        skin.dropdown))
  {
    f32 y = 0.f;
    for (s32 i = 0; i < tool_count; ++i)
    {
      if (i == (u32)active_tool)
        continue;

      if (ui.putButton(
            ui.generateIdFromInteger(i),
            {0.f, y, ui.getWidth(), tool_option_height},
            tool_names[i],
            skin.dropdown_option))
      {
        active_tool = (Tool)i;
        ui.closePopup();
        break;
      }

      y += tool_option_height;
    }
    
    ui.endDropDown();
  }

  if (active_tool != Tool::None)
  {
    ui.beginGroup({ 0.f, tool_y, bounds.w, bounds.h - tool_y });

    ui.putQuad(ui.getBounds(), skin.tool_panel_bg_color);

    switch(active_tool)
    {
    case Tool::Map: putMapTool(ui, skin); break;
    }

    ui.endGroup();
  }

  ui.endGroup();
  ui.endPanel();

  client->renderer.setViewport({0,0}, vec2f(client->window.size));
  ui.endFrame();

  client->renderer.endRenderPass();

  return true;
}

/* ----------------------------------------------------------------------------
 */
void Editor::putMapTool(ui::UI& ui, const EditorSkinDef& skin)
{
  TileKindRef tile_kind_ref;

  Rect bounds = ui.getBounds();

  const f32 tile_kind_select_height = 16.f;
  const f32 tile_kind_select_option_height = 32.f;
  const f32 tile_kind_preview_time = 2.f;

  if (ui.beginDropDown(
        "tile_kind_select"_fid,
        {0.f, 0.f, bounds.w, tile_kind_select_height},
        999.f,
        tool_map.selected_tile_kind.asStr(),
        skin.dropdown))
  {
    AssetLoader loader = client->getAssetLoader();

    // Begin a group so contents are clipped nicely (drop down doesn't do this
    // and I don't remember exactly why, but its nice that it doesn't I guess).
    ui.beginGroup(ui.getBounds());

    f32 y = 0.f;
    
    auto glob = fs::Globber::create("assets/**/*.tile_kind"_str);
    glob.run([&](fs::Path& path)
    {
      loader.load(&tile_kind_ref, path.asStr());

      const TileKindDef& tile_kind = *tile_kind_ref;

      const f32 texture_size = tile_kind_select_option_height;

      ui.putQuad(
        {0.f, y, texture_size, texture_size}, 
        tile_kind.texture->texture, 0xffffffff);

      Rect button_bounds = 
      {
        texture_size,
        y,
        ui.getWidth() - texture_size,
        tile_kind_select_option_height,
      };

      String name = path.asStr().subToLast('.');

      b8 clicked = 
        ui.putButton(
          ui.generateIdFromInteger(path.asStr().hash()),
          button_bounds,
          name,
          skin.dropdown_option);

      if (clicked)
      {
        tool_map.selected_tile_kind.clear();
        io::formatv(&tool_map.selected_tile_kind, name);
        ui.closePopup();
        return false;
      }

      y += tile_kind_select_option_height;

      return true;
    });
    glob.destroy();

    ui.endGroup();
    ui.endDropDown();
  }
}

}
