/*
 *  Manager of Component allocation and such.
 */

struct Component;

template<typename T>
u64 getComponentKind();

/* ============================================================================
 */
template<typename T>
struct ComponentIterState
{
  typedef DLinkedPool<T>::Node Node;

  Node* node;

  Node* operator++()
  {
    node = node->next;
    return node;
  }

  b8 operator !=(const ComponentIterState<T>& rhs)
  {
    return node != rhs.node;
  }

  T* operator->()
  {
    return node->data;
  }

  T& operator *()
  {
    return *node->data;
  }
};

/* ============================================================================
 */
template<typename T>
struct ComponentIter
{
  typedef DLinkedPool<T>::Node Node;
  Node* start;

  ComponentIterState<T> begin() { return ComponentIterState<T>{start}; }
  ComponentIterState<T> end() { return ComponentIterState<T>{nullptr}; }
};

/* ============================================================================
 */
struct ComponentMgr
{
  // Defined in ComponentMgr.lpp as we generate pools from Components defined
  // around the project and we don't want to pollute this header with those 
  // types.
  struct CompPools* pools;

  b8 init();
  void deinit();

  template<typename T>
  T* allocateComponent();

  void deallocateComponent(Component* cmp);

  template<typename T>
  ComponentIter<T> iterate();
};
