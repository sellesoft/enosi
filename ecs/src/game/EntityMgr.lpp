$ local cmn = require "common"

@@lpp.import "game/EntityMgr.lh"
@@lpp.import "game/EntityLoader.lh"
@@lpp.import "asset/SourceDataFile.lh"
@@lpp.import "asset/SourceDataParser.lh"

#include "iro/fs/File.h"

static Logger logger = 
  Logger::create("entmgr"_str, Logger::Verbosity::Info);

/* ----------------------------------------------------------------------------
 */
b8 EntityMgr::init()
{
  INFO("initializing\n");
  SCOPED_INDENT;

  if (!ent_pool.init())
    return ERROR("failed to init entity pool\n");

  if (!cmpmgr.init())
    return ERROR("failed to init component mgr\n");

  INFO("done!\n");
  return true;
}

/* ----------------------------------------------------------------------------
 */
void EntityMgr::deinit()
{
  for (u32 i = 0; i < c_max_entities; ++i)
  {
    EntityPool::Slot* slot = &ent_pool.pool[i];
    if (slot->isUsed())
    {
      slot->elem.deinit();
    }
  }

  ent_pool.deinit();
  cmpmgr.deinit();
  // TODO(sushi) actual clean up 
}

/* ----------------------------------------------------------------------------
 */
EntityId EntityMgr::createEntity(String name)
{
  Entity* ent = ent_pool.add();
  ent->init(name);

  EntityId id = {};
  ent_pool.formId(ent, &id.value, &id.salt);

  DEBUG("created entity ", name, " (", id.value, ":", id.salt, ")\n");

  return id;
}

/* ----------------------------------------------------------------------------
 */
EntityId EntityMgr::createEntityFromResource(String path)
{
  using namespace fs;

  auto file = File::from(path, OpenFlag::Read);

  if (isnil(file))
  {
    ERROR("failed to open entity asset file at ", path, "\n");
    return nil;
  }

  defer { file.close(); };

  SourceDataFile sfile;
  if (!sfile.init())
  {
    ERROR("failed to init source data file\n");
    return nil;
  }

  SourceDataParser parser;
  if (!parser.init(&sfile, &file, path))
  {
    ERROR("failed to init source data parser\n");
    return nil;
  }

  if (!parser.parse())
    return nil;

  return loadEntity(sfile, *this);
}

/* ----------------------------------------------------------------------------
 */
void EntityMgr::destroyEntity(EntityId id)
{
  if (isnil(id))
    return;

  Entity* ent = ent_pool.getFromId(id.value, id.salt);
  if (ent == nullptr)
    return;

  DEBUG(
    "destroying entity ", ent->name,
    " (", id.value, ":", id.salt, ")\n");

  ent->deinit();

  ent_pool.remove(ent);
}

/* ----------------------------------------------------------------------------
 */
Entity* EntityMgr::getEntity(EntityId id) const
{
  if (isnil(id))
    return nullptr;

  return ent_pool.getFromId(id.value, id.salt);
}

/* ----------------------------------------------------------------------------
 */
b8 EntityMgr::addComp(Entity* ent, EntityId id, Component* cmp) const
{
  assert(isnil(cmp->owner));

  if (ent->components.find(cmp->kind))
    return false;

  cmp->owner = id;
  ent->components.insert(cmp);

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 EntityMgr::addComp(Entity* ent, Component* cmp) const
{
  EntityId id;
  ent_pool.formId(ent, &id.value, &id.salt);

  return addComp(ent, id, cmp);
}

/* ----------------------------------------------------------------------------
 */
b8 EntityMgr::addComp(EntityId id, Component* cmp) const
{
  return addComp(getEntity(id), id, cmp);
}

/* ----------------------------------------------------------------------------
 */
