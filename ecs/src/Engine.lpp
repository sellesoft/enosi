$ local cmn = require "common"
$ local ui = require "ui.UI"
$ local Style = require "ui.Style"

@@lpp.import "Engine.lh"

#include "iro/fs/Glob.h"
#include "iro/Logger.h"
#include "iro/time/Time.h"
using namespace iro;

@@lpp.import "asset/Packing.lh"
@@lpp.import "asset/CompiledData.lh"
@@lpp.import "asset/SourceDataFile.lh"
@@lpp.import "asset/SourceDataParser.lh"
@@lpp.import "asset/SourceDataEditor.lh"
@@lpp.import "event/BroadcastEventBus.lh"
@@lpp.import "graphics/Font.lh"
@@lpp.import "graphics/CompiledShader.lh"
@@lpp.import "ui/Inspector.lh"
@@lpp.import "ui/widgets/Text.lh"
@@lpp.import "ui/widgets/Button.lh"
@@lpp.import "ui/widgets/Separator.lh"
@@lpp.import "ui/widgets/InputText.lh"
@@lpp.import "ui/widgets/CollapsingHeader.lh"
@@lpp.import "net/Channel.lh"

@@lpp.import "game/client/Client.lh"

static Logger logger =
  Logger::create("ecs.eng"_str, Logger::Verbosity::Info);

ui::Item* base;
ui::SourceDataEditor* sdata_edit_test;

/* ----------------------------------------------------------------------------
 */
b8 Engine::init()
{
  INFO("initializing engine...\n");
  TimePoint start_time = TimePoint::monotonic();
  frame_start_time = TimeSpan::fromSeconds(start_time.s).toSeconds()
    + TimeSpan::fromNanoseconds(start_time.ns).toSeconds();

$ local initSystem = function(act, name)
    {
      INFO("initializing $(name)\n");
      auto start = TimePoint::monotonic();
      if (!$(act))
        return FATAL("failed to initialize $(name)\n");
      INFO("finished initializing $(name) in ",
           WithUnits(TimePoint::monotonic() - start), "\n");
    }
$ end

  @initSystem(source_data_file_reg.init(),              source data file reg);
  @initSystem(eventbus.broadcast.init(),                broadcast event bus);
  @initSystem(net::init(),                              net);
  @initSystem(input.init(*this),                        input);
  @initSystem(Window::initializeBackend(),              window backend);
  @initSystem(window.init("ecs"_str,input),             window);
  @initSystem(renderer.init(*this, mem::stl_allocator), renderer);
  @initSystem(assetmgr.init(&mem::stl_allocator),       asset mgr);

  //TODO(delle) move required asset compilation somewhere else
  TRACE("compiling white and null textures\n");
  {
    mem::LenientBump texture_compile_allocator;
    if (!texture_compile_allocator.init())
      return ERROR("failed to initialize texture compile allocator\n");
    defer { texture_compile_allocator.deinit(); };

    gfx::CompiledTexture::CompileParams white_texture_params =
    {
      .name         = "assets/textures/white"_str,
      .width        = 2,
      .height       = 2,
      .format       = gfx::ImageFormat::BW,
      .usage        = gfx::ImageUsage::Sampled,
      .filter       = gfx::ImageFilter::Nearest,
      .address_mode = gfx::ImageAddressMode::ClampToWhite,
      .allocator    = &texture_compile_allocator,
      .assetmgr     = &assetmgr,
    };

    u8 pixels[16] = 
    { 
      0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 
      0xff, 0xff, 0xff, 0xff, 
    };

    gfx::CompiledTexture::compileFromMemory(pixels, white_texture_params);

    auto* white_texture_compiled = 
      gfx::CompiledTexture::load(
        "assets/textures/white"_str,assetmgr, renderer);
    if (white_texture_compiled == nullptr)
      return ERROR("failed to load white texture\n");
    white_texture = white_texture_compiled->gfx_texture;

    gfx::CompiledTexture::CompileParams null_texture_params =
    {
      .name         = "assets/textures/null"_str,
      .format       = gfx::ImageFormat::RGBA,
      .usage        = gfx::ImageUsage::Sampled,
      .filter       = gfx::ImageFilter::Nearest,
      .address_mode = gfx::ImageAddressMode::ClampToWhite,
      .allocator    = &texture_compile_allocator,
      .assetmgr     = &assetmgr,
    };

    gfx::CompiledTexture::compilePNG(null_texture_params);

    auto* null_texture_compiled = 
      gfx::CompiledTexture::load(
        "assets/textures/null"_str, assetmgr, renderer);
    if (null_texture_compiled == nullptr)
      return ERROR("failed to load null texture\n");
  }

  TRACE("compiling shaders\n");
  {
    gfx::CompiledShader::CompileParams scene_vertex_shader_params =
    {
      .name      = "assets/shaders/scene.vertex"_str,
      .type      = gfx::ShaderType::Vertex,
      .allocator = &mem::stl_allocator,
      .assetmgr  = &assetmgr,
    };
    gfx::CompiledShader::compileGLSL(scene_vertex_shader_params);

    gfx::CompiledShader::CompileParams scene_fragment_shader_params =
    {
      .name      = "assets/shaders/scene.fragment"_str,
      .type      = gfx::ShaderType::Fragment,
      .allocator = &mem::stl_allocator,
      .assetmgr  = &assetmgr,
    };
    gfx::CompiledShader::compileGLSL(scene_fragment_shader_params);

    gfx::CompiledShader::CompileParams fullscreen_vertex_shader_params =
    {
      .name      = "assets/shaders/fullscreen.vertex"_str,
      .type      = gfx::ShaderType::Vertex,
      .allocator = &mem::stl_allocator,
      .assetmgr  = &assetmgr,
    };
    gfx::CompiledShader::compileGLSL(fullscreen_vertex_shader_params);

    gfx::CompiledShader::CompileParams stars_fragment_shader_params =
    {
      .name      = "assets/shaders/stars.fragment"_str,
      .type      = gfx::ShaderType::Fragment,
      .allocator = &mem::stl_allocator,
      .assetmgr  = &assetmgr,
    };
    gfx::CompiledShader::compileGLSL(stars_fragment_shader_params);

    gfx::CompiledShader::CompileParams ui_vertex_shader_params =
    {
      .name      = "assets/shaders/ui.vertex"_str,
      .type      = gfx::ShaderType::Vertex,
      .allocator = &mem::stl_allocator,
      .assetmgr  = &assetmgr,
    };
    gfx::CompiledShader::compileGLSL(ui_vertex_shader_params);

    gfx::CompiledShader::CompileParams ui_fragment_shader_params =
    {
      .name      = "assets/shaders/ui.fragment"_str,
      .type      = gfx::ShaderType::Fragment,
      .allocator = &mem::stl_allocator,
      .assetmgr  = &assetmgr,
    };
    gfx::CompiledShader::compileGLSL(ui_fragment_shader_params);
  }

  TRACE("compiling gohu font\n");
  {
    CodepointRange ascii =
    {
      .first_codepoint = 32,
      .num_codepoints = 94,
    };

    gfx::Font::CompileParams params =
    {
      .name       = "assets/fonts/gohu"_str,
      .ranges     = CodepointRanges::from(&ascii, 1),
      .allocator  = &mem::stl_allocator,
      .assetmgr   = &assetmgr,
    };

    gfx::Font::compileBDF(params);
  }

  @initSystem(ui.init(*this),              ui);

  INFO("done initializing in ",
    WithUnits(TimePoint::monotonic() - start_time), "\n");

$ if true then

  // base = ui::Item::begin(ui, "base"_str);
  // {
  //   @ui.style(base, Item, | size: 400 400)

  //   sdata_edit_test = ui::SourceDataEditor::create(ui);

  //   h_test =
  //    source_data_file_reg.loadFromDisk("assets/maps/Test.map"_str);

  //   sdata_edit_test->setSourceData(
  //     ui,
  //     h_test.getFile()->returned_data,
  //     h_test.getFile(),
  //     "MapDef"_hashed);
  // }
  // ui.endItem();

$ else

  base = ui::Item::begin(ui, "base"_str);
  {
    @ui.style(base, Item,
    | size: 200 200
    | display: flex
    | background_color: 0xff0000ff)

    auto* a = ui::Item::make(ui, "a"_str);
    @ui.style(a, Item,
    | size: 100% flex(1)
    | background_color: 0x00ff00ff)

    auto* c = ui::Item::make(ui, "c"_str);
    @ui.style(c, Item,
    | size: 100% 10
    | background_color: 0xee00eeff)

    auto* b = ui::Item::make(ui, "b"_str);
    @ui.style(b, Item,
    | size: 100% flex(2)
    | background_color: 0x0000ffff)
  }
  ui.endItem();

$ end

  client = clientCreate(this);

  init_time = TimePoint::now();

  INFO("done!\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Engine::wantHotReload()
{
#if ECS_HOT_RELOAD
  if (input.wasKeyPressed(Key::R))
    return true;
#endif
  return false;
}

/* ----------------------------------------------------------------------------
 */
b8 Engine::update()
{
  iro::TimePoint time_point = iro::TimePoint::monotonic();
  frame_start_time = TimeSpan::fromSeconds(time_point.s).toSeconds()
    + TimeSpan::fromNanoseconds(time_point.ns).toSeconds();

  if (!window.update(*this))
    return ERROR("failed to update window\n");

  if (!renderer.update())
    return ERROR("failed to update renderer\n");

  if (!input.update(*this))
    return ERROR("failed to update input\n");

  clientUpdate(client);

  if (!ui.update(*this))
    return ERROR("failed to update ui\n");

  // inspector->fps->dirty = true;
  //
  // io::StaticBuffer<255> fps;
  // io::format(&fps, 1.f / (TimePoint::now() - start).toSeconds());
  // inspector->fps->set(fps.asStr());

  // ui.root->dirty = true;

  return true;
}
