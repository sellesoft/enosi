$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"
$ local ui = require "ui.UI"

@@lpp.import "Engine.lh"

#include "iro/logger.h"
#include "iro/time/time.h"
using namespace iro;

// Introduce events and the event bus definitions.
@@lpp.import "input/Input.events.lh"
@@lpp.import "window/Window.events.lh"
@@lpp.import "Engine.events.lh"
@@lpp.import "event/BroadcastEventBus.lh"

@@lpp.import "asset/Font.lh"

@@lpp.import "ui/Text.lh"
@@lpp.import "ui/Button.lh"
@@lpp.import "ui/Separator.lh"
@@lpp.import "ui/CollapsingHeader.lh"

static Logger logger = 
  Logger::create("ecs.eng"_str, Logger::Verbosity::Info);

namespace ui
{

@@ui.definePlaceable(Demo,
{
  Item root
  | size: 500 500
  | padding: 5 
  | font: "gohu"
  | font_height: 11
  | background_color: 0x08141eff
  {
    Text hovered_info
    | wrap: word
    ("bleh");

    Item header
    | size: 100% 11
    | display: flex horizontal
    | margin: 0 0 0 60
    {
      .header_sep
      | sizing: flex
      | size: 1 1
      | alignment: 0.5 0.5
      | margin: 5;

      Separator | .header_sep;

      Text ("demo");

      Separator | .header_sep;
    }

    Text ("bah bah bah");

    CollapsingHeader 
    | size: 100% auto
    | header_height: 15
    | content_background_color: 0x34aeaeff
    | border: 0 3 0 3
    | padding: 5 5 5 5 
    ("header")
    {
      Item bg
      | size: 100% auto
      | background_color: 0xaa4488ff
      {
        CollapsingHeader
        | size: 100% 100
        | header_height: 15
        ("hello")
        {
          Text ("goodbye");
        }
      }
    }
  }
})

}

ui::Demo demo;

/* ----------------------------------------------------------------------------
 */ 
b8 Engine::init()
{
  INFO("initializing engine...\n");
  start_time = TimePoint::now();

  if (!eventbus.broadcast.init())
    return ERROR("failed to initialize broadcast event bus\n");

  if (!Window::initializeBackend())
    return ERROR("failed to initialize window backend\n");

  if (!window.init("ecs"_str))
    return ERROR("failed to initialize window\n");

  if (!renderer.init(*this))
    return ERROR("failed to initialize renderer\n");

  if (!assetmgr.init(4096, &mem::stl_allocator))
    return ERROR("failed to initialize assetmgr\n");

  if (!input.init(*this))
    return ERROR("failed to initialize input\n");

  if (!ui.init(*this))
    return ERROR("failed to initialize ui\n");

  reloader = hr::createReloader();
  if (reloader == nullptr)
    return ERROR("failed to create hot reloader\n");

  INFO("done initializing in ", 
    (TimePoint::now() - start_time).toSeconds(), "s\n");

  CodepointRange ascii =
  {
    .first_codepoint = 32,
    .num_codepoints = 94,
  };

  Font::CompileParams params =
  {
    .name = "gohu"_str,
    .asset_path = "assets/fonts/gohu.bdf"_str,
    .data_path = "data/fonts/gohu.font"_str,
    .ranges = CodepointRanges::from(&ascii, 1),
    .allocator = &mem::stl_allocator,
    .assetmgr = &assetmgr,
  };

  Font::compileBDF(params);

  demo.place(ui);

  INFO("done!\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */ 
b8 Engine::checkReload()
{
  if (!input.wasKeyPressed(Key::R))
    return true;

  io::StaticBuffer<32> patchnumbuf;
  patchnumbuf.open();
  io::format(&patchnumbuf, getPatchNumber(reloader));

  String args[2] =
  {
    "patch"_str,
    patchnumbuf.asStr(),
  };

  Process::Stream streams[3] =
  {
    { false, nullptr },
    { false, nullptr },
    { false, nullptr },
  };

  auto lake = 
    Process::spawn(
      "/home/sushi/src/enosi/bin/lake"_str,
      Slice<String>::from(args, 2),
      streams,
      "/home/sushi/src/enosi"_str);

  while (lake.status == Process::Status::Running)
    lake.checkStatus();

  void* dlhandle = dlopen(nullptr, RTLD_LAZY);

  hr::ReloadContext context;
  context.hrfpath = "build/debug/ecs.hrf"_str;
  context.exepath = "build/debug/ecs"_str;
  context.reloadee_handle = dlhandle;

  hr::ReloadResult result;

  if (!hr::doReload(reloader, context, &result))
    return ERROR("failed to reload symbols\n");

  return true;

}

/* ----------------------------------------------------------------------------
 */ 
b8 Engine::update()
{
  if (!checkReload())
    return ERROR("error occured while reloading\n");

  if (!window.update(*this))
    return ERROR("failed to update window\n");

  if (!renderer.update())
    return ERROR("failed to update renderer\n");

  auto ch = demo.root.collapsingheader0.item;

  if (input.scroll != 0.f)
  {
    ch->dirty = true;
    ch->scroll.y += input.scroll;
    ch->scroll.y = min(max(ch->scroll.y, ch->max_scroll.y), 0.f);
  }

  if (!input.update(*this))
    return ERROR("failed to update input\n");

  // f32 t = (TimePoint::now() - start_time).toSeconds();

  // ch->scroll.y = (sin(t) + 1.f) / 2.f * ch->max_scroll.y;
  // ch->dirty = true;

  auto hi = demo.root.hovered_info;

  if (ui.hovered)
  {
    hi->state.buffer.clear();
    io::formatv(&hi->state.buffer, "hello!!!\n",
        "item: ", ui.hovered->name,
      "\n  vs: ", ui.hovered->visible_size, 
      "\n  mp: ", input.mouse.window, "\n");
    hi->dirty = true;
  }

  if (!ui.update(*this))
    return ERROR("failed to update ui\n");

  return true;
}
