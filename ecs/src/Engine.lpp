$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"
$ local ui = require "ui.UI"

@@lpp.import "Engine.lh"

#include "iro/logger.h"
#include "iro/time/time.h"
using namespace iro;

// Introduce events and the event bus definitions.
@@lpp.import "input/InputEvents.lh"
@@lpp.import "window/WindowEvents.lh"
@@lpp.import "event/BroadcastEventBus.lh"

@@lpp.import "asset/Font.lh"

@@lpp.import "ui/Text.lh"
@@lpp.import "ui/Button.lh"

static Logger logger = 
  Logger::create("ecs.eng"_str, Logger::Verbosity::Info);

/* ----------------------------------------------------------------------------
 */ 
b8 Engine::init()
{
  INFO("initializing engine...\n");
  start_time = TimePoint::now();

  if (!eventbus.broadcast.init())
    return ERROR("failed to initialize broadcast event bus\n");

  if (!Window::initializeBackend())
    return ERROR("failed to initialize window backend\n");

  if (!window.init("ecs"_str))
    return ERROR("failed to initialize window\n");

  if (!renderer.init(*this))
    return ERROR("failed to initialize renderer\n");

  if (!assetmgr.init(4096, &mem::stl_allocator))
    return ERROR("failed to initialize assetmgr\n");

  if (!input.init(*this))
    return ERROR("failed to initialize input\n");

  if (!ui.init(*this))
    return ERROR("failed to initialize ui\n");

  INFO("done initializing in ", 
    (TimePoint::now() - start_time).toSeconds(), "s\n");

  // ui.def
  // {
  //   item "demo"
  //   {
  //     style =
  //     {
  //       pos = { 10, 10 },
  //       size = { 100, 100 },
  //       background_color = { 100, 70, 150 }
  //     }

  //     item "inner"
  //     {
  //       style = 
  //       {
  //         background_color = { 200, 150, 100 },
  //         pos.x = 10,
  //       }
  //     }
  //   }
  // }

  CodepointRange ascii =
  {
    .first_codepoint = 32,
    .num_codepoints = 94,
  };

  Font::CompileParams params =
  {
    .name = "gohufont11"_str,
    .asset_path = "assets/fonts/gohufont11.bdf"_str,
    .data_path = "data/fonts/gohufont11.font"_str,
    .ranges = CodepointRanges::from(&ascii, 1),
    .allocator = &mem::stl_allocator,
    .assetmgr = &assetmgr,
  };

  Font::compileBDF(params);

  test = ui.begin<ui::Item>();

  $ local item = ui.createItemContext("Item", "test")

  @item.style.set.size({500, 500});
  @item.style.set.background_color({150, 100, 80, 255});
  @item.style.set.padding({5, 5, 5, 5});

  auto button = ui.begin<ui::Button>("blah"_str, 
    (ui::Button::Action)[](void* _, ui::ButtonActivation activation)
    {
      if (activation == ui::ButtonActivation::Pressed)
        INFO("pressed\n");
      else
        INFO("released\n");
    });

  $ local button = ui.createItemContext("Button", "button")

  @button.style.set.size({100, 100});
  @button.style.set.background_color({0, 255, 0, 255});
  @button.style.set.triggers(Pressed | Released);
  @button.style.set.padding({10, 10, 10, 10});

  auto text = ui.make<ui::Text>("hello"_str, "goodbye"_str);

  $ local text = ui.createItemContext("Text", "text")


  ui.end<ui::Button>();
  
  ui.end<ui::Item>();

  INFO("done!\n");

  @@ui.definePlaceable(test,
  {
    item demo
    {
      size = 100 100;
      padding = 5 5 5 5;

      text "Demo";
    }
  })

  return true;
}

/* ----------------------------------------------------------------------------
 */ 
b8 Engine::update()
{
  if (!window.update(*this))
    return ERROR("failed to update window\n");

  if (!renderer.update())
    return ERROR("failed to update renderer\n");

  if (!input.update(*this))
    return ERROR("failed to update input\n");

  static b8 latched = false;
  static vec2f mpos;

  if (input.wasKeyPressed(Key::A))
  {
    latched = !latched;
    mpos = input.mouse.screen;
  }

  if (latched)
  {
    input.mouse.screen = mpos;
  }

  if (!ui.update(*this))
    return ERROR("failed to update ui\n");


  return true;
}
