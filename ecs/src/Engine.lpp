$ local cmn = require "common"
$ local ui = require "ui.UI"
$ local Style = require "ui.Style"

@@lpp.import "Engine.lh"

#include "iro/containers/StackArray.h"
#include "iro/fs/Glob.h"
#include "iro/Logger.h"
#include "iro/time/Time.h"
using namespace iro;

@@lpp.import "asset/Packing.lh"
@@lpp.import "asset/CompiledData.lh"
@@lpp.import "asset/SourceDataFile.lh"
@@lpp.import "asset/SourceDataParser.lh"
@@lpp.import "event/BroadcastEventBus.lh"
@@lpp.import "graphics/Font.lh"
@@lpp.import "graphics/CompiledShader.lh"
@@lpp.import "net/Connection.lh"

@@lpp.import "game/client/Client.lh"
@@lpp.import "game/server/Server.lh"

static Logger logger =
  Logger::create("ecs.eng"_str, Logger::Verbosity::Info);

/* ----------------------------------------------------------------------------
 */
b8 Engine::init()
{
  INFO("initializing engine...\n");
  TimePoint start_time = TimePoint::monotonic();
  frame_start_time = TimeSpan::fromSeconds(start_time.s).toSeconds()
    + TimeSpan::fromNanoseconds(start_time.ns).toSeconds();

$ local initSystem = function(act, name)
    {
      INFO("initializing $(name)\n");
      auto start = TimePoint::monotonic();
      if (!$(act))
        return FATAL("failed to initialize $(name)\n");
      INFO("finished initializing $(name) in ",
           WithUnits(TimePoint::monotonic() - start), "\n");
    }
$ end

  @initSystem(source_data_file_reg.init(),              source data file reg);
  @initSystem(eventbus.broadcast.init(),                broadcast event bus);
  @initSystem(net::init(),                              net);
  @initSystem(assetmgr.init(&mem::stl_allocator),       asset mgr);

  if (launch_args.find("-dedicated"_hashed))
  {
    io::StaticBuffer<sv::MAX_PASSWORD_LENGTH-1> password = {};
    LaunchArg* password_arg = launch_args.find("-password"_hashed);
    if (password_arg != nullptr)
      password.write(password_arg->value);

    sv::CreateParams server_params =
    {
      .engine = *this,
      .global_allocation_size = unit::megabytes(1),
      .match_allocation_size = unit::megabytes(1),
      .tick_allocation_size = unit::megabytes(2),
      .target_tickrate_ms = 48,
      .publicity = (password.len > 0)
        ? sv::ServerPublicity::Password : sv::ServerPublicity::Public,
      .max_sessions = 8,
      .password = password,
    };
    server_thread = sv::create(server_params);
    if (server_thread == nullptr)
      return FATAL("failed to create server thread\n");
  }
  else
  {
    client = new Client;
    
    if (!client->init(this))
      return FATAL("failed to initialize Client\n");
  }

  init_time = TimePoint::now();

  INFO("done initializing in ",
    WithUnits(TimePoint::monotonic() - start_time), "\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Engine::wantHotReload()
{
#if ECS_HOT_RELOAD
  if (client)
    return client->wantHotReload();
#endif
  return false;
}

/* ----------------------------------------------------------------------------
 */
b8 Engine::update()
{
  iro::TimePoint time_point = iro::TimePoint::monotonic();
  frame_start_time = TimeSpan::fromSeconds(time_point.s).toSeconds()
    + TimeSpan::fromNanoseconds(time_point.ns).toSeconds();

  if (client)
    client->update();

  // inspector->fps->dirty = true;
  //
  // io::StaticBuffer<255> fps;
  // io::format(&fps, 1.f / (TimePoint::now() - start).toSeconds());
  // inspector->fps->set(fps.asStr());

  // ui.root->dirty = true;

  // INFO(1 / (TimePoint::monotonic() - time_point).toSeconds(), "\n");

  return true;
}
