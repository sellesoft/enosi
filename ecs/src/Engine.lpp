$ local cmn = require "common"
$ local ui = require "ui.UI"

@@lpp.import "Engine.lh"

#include "iro/fs/Glob.h"
#include "iro/Logger.h"
#include "iro/time/Time.h"
using namespace iro;

// Introduce events and the event bus definitions.
@@lpp.import "event/BroadcastEventBus.lh"

@@lpp.import "graphics/Font.lh"

@@lpp.import "ui/widgets/Text.lh"
@@lpp.import "ui/widgets/Button.lh"
@@lpp.import "ui/widgets/Separator.lh"
@@lpp.import "ui/widgets/CollapsingHeader.lh"

@@lpp.import "ui/Inspector.lh"

@@lpp.import "game/Component.lh"
@@lpp.import "game/Entity.lh"
@@lpp.import "game/Transform.comp.lh"
@@lpp.import "asset/SourceDataParser.lh"
@@lpp.import "asset/SourceDataFile.lh"
@@lpp.import "asset/Packing.lh"

static Logger logger =
  Logger::create("ecs.eng"_str, Logger::Verbosity::Info);

namespace ui
{

@@ui.definePlaceable(Demo,
{
  Item root
  | size: 500 500
  | padding: 5
  | font: "gohu"
  | font_height: 11
  | background_color: 0x08141eff
  {
    Text hovered_info
    | wrap: word
    ("bleh");

    Item header
    | size: 100% 11
    | display: flex horizontal
    | margin: 0 0 0 60
    {
      .header_sep
      | sizing: flex
      | size: 1 1
      | alignment: 0.5 0.5
      | margin: 5;

      Separator | .header_sep;

      Text ("demo");

      Separator | .header_sep;
    }

    Text ("bah bah bah");

    CollapsingHeader
    | size: 100% auto
    | header_height: 15
    | content_background_color: 0x34aeaeff
    | border: 0 3 0 3
    | padding: 5 5 5 5
    ("header")
    {
      Item bg
      | size: 100% auto
      | background_color: 0xaa4488ff
      {
        CollapsingHeader
        | size: 100% 100
        | header_height: 15
        ("hello")
        {
          Text ("goodbye");
        }
      }
    }
  }
})

}

ui::Demo demo;

/* ----------------------------------------------------------------------------
 */
b8 Engine::init()
{
  INFO("initializing engine...\n");
  start_time = TimePoint::now();

$ local initSystem = function(act, name)
    {
      INFO("initializing $(name)\n");
      auto start = TimePoint::now();
      if (!$(act))
        return FATAL("failed to initialize $(name)\n");
      INFO("finished initializing $(name) in ",
           WithUnits(TimePoint::now() - start), "\n");
    }
$ end

  @initSystem(source_data_file_reg.init(),        source data file reg);
  @initSystem(eventbus.broadcast.init(),          broadcast event bus);
  @initSystem(input.init(*this),                  input);
  @initSystem(Window::initializeBackend(),        window backend);
  @initSystem(window.init("ecs"_str,input),       window);
  @initSystem(renderer.init(*this),               renderer);
  @initSystem(assetmgr.init(&mem::stl_allocator), asset mgr);
  
  //TODO(delle) update the bump allocators to have a reset() and clear()
  mem::LenientBump texture_compile_allocator;
  if (!texture_compile_allocator.init())
    return ERROR("failed to initialize texture compile allocator\n");

  gfx::CompiledTexture::CompileParams white_texture_params =
  {
    .name         = "white"_str,
    .data_path    = "data/textures/white.texture"_str,
    .width        = 4,
    .height       = 4,
    .format       = gfx::ImageFormat::BW,
    .kind         = gfx::ImageKind::TwoD,
    .filter       = gfx::ImageFilter::Nearest,
    .address_mode = gfx::ImageAddressMode::ClampToWhite,
    .allocator    = &texture_compile_allocator,
    .assetmgr     = &assetmgr,
  };

  u8 pixels[16] = 
  { 
    0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 
  };

  gfx::CompiledTexture::compileFromMemory(pixels, white_texture_params);
  gfx::CompiledTexture::load("white"_str, assetmgr, renderer);

  texture_compile_allocator.deinit();

  io::StaticBuffer<511> texture_data_path_buffer;
  auto png_glob = fs::Globber::create("assets/textures/*.png"_str);
  png_glob.run([&](fs::Path& asset_path)
    {
      texture_data_path_buffer.len = 0;
      String name = asset_path.basename().subToFirst('.');
      gfx::CompiledTexture::writeDataPath(
        &texture_data_path_buffer, name, assetmgr);

      gfx::CompiledTexture::CompileParams params =
      { //TODO(delle) add TextureDef for specifying these params
        .name         = name,
        .asset_path   = asset_path.buffer.asStr(),
        .data_path    = texture_data_path_buffer.asStr(),
        .format       = gfx::ImageFormat::RGBA,
        .kind         = gfx::ImageKind::TwoD,
        .filter       = gfx::ImageFilter::Nearest,
        .address_mode = gfx::ImageAddressMode::ClampToWhite,
        .allocator    = &mem::stl_allocator,
        .assetmgr     = &assetmgr,
      };

      gfx::CompiledTexture::compilePNG(params);
      return true;
    });
  png_glob.destroy();

  @initSystem(ui.init(*this),              ui);
  @initSystem(gamemgr.init(this),          gamemgr);

#if ECS_HOT_RELOAD
  reloader = hr::createReloader();
  if (reloader == nullptr)
    return ERROR("failed to create hot reloader\n");
#endif

  INFO("done initializing in ",
    WithUnits(TimePoint::now() - start_time), "\n");

  CodepointRange ascii =
  {
    .first_codepoint = 32,
    .num_codepoints = 94,
  };

  gfx::Font::CompileParams params =
  {
    .name       = "gohu"_str,
    .asset_path = "assets/fonts/gohu.bdf"_str,
    .data_path  = "data/fonts/gohu.cmp_font"_str,
    .ranges     = CodepointRanges::from(&ascii, 1),
    .allocator  = &mem::stl_allocator,
    .assetmgr   = &assetmgr,
  };

  gfx::Font::compileBDF(params);

  // demo.place(ui);

  // inspector = ui::Inspector::create(ui, this);

  $ local inspector = ui.createItemContext("Inspector", "inspector")

  INFO("done!\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Engine::checkReload()
{
#if ECS_HOT_RELOAD
  if (!input.wasKeyPressed(Key::R))
    return true;

  eventbus.broadcast.raise<PreReload>({});

  io::StaticBuffer<32> patchnumbuf;
  patchnumbuf.open();
  io::format(&patchnumbuf, getPatchNumber(reloader));

  String args[2] =
  {
    "patch"_str,
    patchnumbuf.asStr(),
  };

  Process::Stream streams[3] =
  {
    { false, nullptr },
    { false, nullptr },
    { false, nullptr },
  };

  auto lake =
    Process::spawn(
      "/home/sushi/src/enosi/bin/lake"_str,
      Slice<String>::from(args, 2),
      streams,
      "/home/sushi/src/enosi"_str);

  while (lake.status == Process::Status::Running)
    lake.checkStatus();

  void* dlhandle = dlopen(nullptr, RTLD_LAZY);

  hr::ReloadContext context;
  context.hrfpath = "build/debug/ecs.hrf"_str;
  context.exepath = "build/debug/ecs"_str;
  context.reloadee_handle = dlhandle;

  hr::ReloadResult result;

  if (!hr::doReload(reloader, context, &result))
    return ERROR("failed to reload symbols\n");

  eventbus.broadcast.raise<PostReload>({});
#endif
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Engine::update()
{
  auto start = TimePoint::now();

  if (!checkReload())
    return ERROR("error occured while reloading\n");

  if (!window.update(*this))
    return ERROR("failed to update window\n");

  if (!renderer.update())
    return ERROR("failed to update renderer\n");

  if (!input.update(*this))
    return ERROR("failed to update input\n");

  gamemgr.update();

  if (!ui.update(*this))
    return ERROR("failed to update ui\n");

  // inspector->fps->dirty = true;
  //
  // io::StaticBuffer<255> fps;
  // io::format(&fps, 1.f / (TimePoint::now() - start).toSeconds());
  // inspector->fps->set(fps.asStr());

  ui.root->dirty = true;

  return true;
}
