$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"
$ local ui = require "ui.UI"

@@lpp.import "Engine.lh"

#include "iro/logger.h"
#include "iro/time/time.h"
using namespace iro;

// Introduce events and the event bus definitions.
@@lpp.import "input/InputEvents.lh"
@@lpp.import "event/BroadcastEventBus.lh"

static Logger logger = 
  Logger::create("ecs.eng"_str, Logger::Verbosity::Info);

/* ----------------------------------------------------------------------------
 */ 
b8 Engine::init()
{
  INFO("initializing engine...\n");
  start_time = TimePoint::now();

  if (!eventbus.broadcast.init())
    return ERROR("failed to initialize broadcast event bus\n");

  if (!Window::initializeBackend())
    return ERROR("failed to initialize window backend\n");

  if (!window.init("ecs"_str))
    return ERROR("failed to initialize window\n");

  if (!renderer.init(&window))
    return ERROR("failed to initialize renderer\n");

  if (!input.init(*this))
    return ERROR("failed to initialize input\n");

  if (!ui.init(*this))
    return ERROR("failed to initialize ui\n");

  INFO("done initializing in ", 
    (TimePoint::now() - start_time).toSeconds(), "s\n");

  // ui.def
  // {
  //   item "demo"
  //   {
  //     style =
  //     {
  //       pos = { 10, 10 },
  //       size = { 100, 100 },
  //       background_color = { 100, 70, 150 }
  //     }

  //     item "inner"
  //     {
  //       style = 
  //       {
  //         background_color = { 200, 150, 100 },
  //         pos.x = 10,
  //       }
  //     }
  //   }
  // }

  test = ui.make<ui::Item>();

  $ local item = ui.createItemContext("Item", "test")

  @item.style.set.size({10, 10});
  @item.style.set.background_color({255, 0, 0, 255});

  return true;
}

/* ----------------------------------------------------------------------------
 */ 
b8 Engine::update()
{
  if (!window.update(*this))
    return ERROR("failed to update window\n");

  if (!renderer.update(*this))
    return ERROR("failed to update renderer\n");

  if (!input.update(*this))
    return ERROR("failed to update input\n");

  if (!ui.update(*this))
    return ERROR("failed to update ui\n");

  @item.style.set.pos(
    { sinf((TimePoint::now() - start_time).toSeconds()) * 10.f, 
      cosf((TimePoint::now() - start_time).toSeconds()) * 10.f });
  test->dirty = true;

  return true;
}
