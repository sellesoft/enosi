$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"
$ local ui = require "ui.UI"

@@lpp.import "Engine.lh"

#include "iro/logger.h"
#include "iro/time/time.h"
using namespace iro;

// Introduce events and the event bus definitions.
@@lpp.import "input/InputEvents.lh"
@@lpp.import "window/WindowEvents.lh"
@@lpp.import "event/BroadcastEventBus.lh"

@@lpp.import "asset/Font.lh"

@@lpp.import "ui/Text.lh"
@@lpp.import "ui/Button.lh"
@@lpp.import "ui/Separator.lh"
@@lpp.import "ui/CollapsingHeader.lh"

static Logger logger = 
  Logger::create("ecs.eng"_str, Logger::Verbosity::Info);

namespace ui
{

@@ui.definePlaceable(Demo,
{
  Item root
  | size: 500 500
  | padding: 5 5 5 5
  | font: "gohu"
  | font_height: 11
  | background_color: 0x08141eff
  {
    Item header
    | size: 100% 11
    | display: flex horizontal
    {
      .header_sep
      | sizing: flex
      | size: 1 1
      | alignment: 0.5 0.5
      | margin: 5;

      Separator | .header_sep;

      Text ("demo");

      Separator | .header_sep;
    }

    CollapsingHeader 
    | size: 100% auto
    ("header")
    {
      Item bg
      | size: 100% auto
      | background_color: 0xaa4488ff
      {
        Button
        | triggers: Pressed Released
        | margin: 5
        | size: 100% 50
        | background_color: 0x20394fff
        {
          Text ("button 0");
        }

        Button
        | triggers: Pressed Released
        | margin: 5
        | size: 100% 50
        | background_color: 0x32204fff
        {
          Text ("button 1");
        }
      }
    }

  }
})

}

/* ----------------------------------------------------------------------------
 */ 
b8 Engine::init()
{
  INFO("initializing engine...\n");
  start_time = TimePoint::now();

  if (!eventbus.broadcast.init())
    return ERROR("failed to initialize broadcast event bus\n");

  if (!Window::initializeBackend())
    return ERROR("failed to initialize window backend\n");

  if (!window.init("ecs"_str))
    return ERROR("failed to initialize window\n");

  if (!renderer.init(*this))
    return ERROR("failed to initialize renderer\n");

  if (!assetmgr.init(4096, &mem::stl_allocator))
    return ERROR("failed to initialize assetmgr\n");

  if (!input.init(*this))
    return ERROR("failed to initialize input\n");

  if (!ui.init(*this))
    return ERROR("failed to initialize ui\n");

  INFO("done initializing in ", 
    (TimePoint::now() - start_time).toSeconds(), "s\n");

  CodepointRange ascii =
  {
    .first_codepoint = 32,
    .num_codepoints = 94,
  };

  Font::CompileParams params =
  {
    .name = "gohu"_str,
    .asset_path = "assets/fonts/gohu.bdf"_str,
    .data_path = "data/fonts/gohu.font"_str,
    .ranges = CodepointRanges::from(&ascii, 1),
    .allocator = &mem::stl_allocator,
    .assetmgr = &assetmgr,
  };

  Font::compileBDF(params);

  using namespace ui;

  Demo demo;
  demo.place(ui);

  INFO("done!\n");



  return true;
}

/* ----------------------------------------------------------------------------
 */ 
b8 Engine::update()
{
  if (!window.update(*this))
    return ERROR("failed to update window\n");

  if (!renderer.update())
    return ERROR("failed to update renderer\n");

  if (!input.update(*this))
    return ERROR("failed to update input\n");

  static b8 latched = false;
  static vec2f mpos;

  if (input.wasKeyPressed(Key::A))
  {
    latched = !latched;
    mpos = input.mouse.screen;
  }

  if (latched)
  {
    input.mouse.screen = mpos;
  }

  if (!ui.update(*this))
    return ERROR("failed to update ui\n");

  return true;
}
