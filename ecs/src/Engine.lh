$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"

#include "iro/time/time.h"

@@lpp.import "window/Window.lh"
@@lpp.import "graphics/Renderer.lh"
@@lpp.import "ui/UI.lh"

@@lpp.import "input/InputMgr.lh"
@@lpp.import "input/InputEvents.lh"
@@lpp.import "window/Window.lh"
@@lpp.import "asset/AssetMgr.lh"
@@lpp.import "asset/Font.lh"

#include "event/BroadcastEventBus.h"

struct Font;

struct Engine
{
  struct
  {
    BroadcastEventBus broadcast;
  } eventbus;

  Window window;

  gfx::Renderer renderer;

  AssetMgr assetmgr;

  ui::UI ui;

  InputMgr input;

  ui::Item* test;

  Font gohu_font;

  TimePoint start_time;

  b8 init();
  void deinit();

  b8 update();

  template<typename E, typename S>
  void subscribeToBroadcast(S* sub, void (S::* in)(E&))
  {
    // Evil magic necessary to convince clang that passing this
    // as the sub of the callback is ok.
    static union
    {
      void (S::* x)(E&);
      void (*y)(void*, E&);
    } x { in };

    eventbus.broadcast.subscribeTo<E>(sub, x.y);
  }
};
