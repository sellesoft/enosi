$ local cmn = require "common"

#include "iro/time/Time.h"

@@lpp.import "window/Window.lh"
@@lpp.import "graphics/Renderer.lh"
@@lpp.import "graphics/Texture.lh"
@@lpp.import "ui/UI.lh"

@@lpp.import "asset/AssetMgr.lh"
@@lpp.import "asset/SourceDataFileReg.lh"

@@lpp.import "input/InputMgr.lh"

// TODO(sushi) move this stuff elsewhere and remove this pure C++ header,
//             I have absolutely no idea why I implemented it like this 
//             way back then.
#include "event/BroadcastEventBus.h"

namespace ui
{
struct Inspector;
}

namespace hr
{
struct Reloader;
}

struct Client;
struct Server;

/* ============================================================================
 */
//NOTE(delle) fields are in order of initialization
struct Engine
{
  f64 frame_start_time;

  SourceDataFileReg source_data_file_reg;

  struct
  {
    BroadcastEventBus broadcast;
  } eventbus;

  InputMgr input;

  Window window;

  gfx::Renderer renderer;

  AssetMgr assetmgr;

  gfx::Texture white_texture;

  ui::UI ui;

  hr::Reloader* reloader;

  ui::Inspector* inspector;

  // Time point at which the Engine finished initialization.
  TimePoint init_time;

  // The client/server threads, allocated depending on the situation ECS 
  // is running under.
  Client* client;
  Server* server;

  b8 init();
  void deinit();

  b8 wantHotReload();
  b8 update();

  template<typename E, typename S>
  void subscribeToBroadcast(S* sub, void (S::* in)(E&))
  {
    // Evil magic necessary to convince clang that passing this
    // as the sub of the callback is ok.
    static union
    {
      void (S::* x)(E&);
      void (*y)(void*, E&);
    } x { in };

    eventbus.broadcast.subscribeTo<E>(sub, x.y);
  }
};
