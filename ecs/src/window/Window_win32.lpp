$ local cmn = require "common"

$ if IRO_WIN32 then

#include "iro/Platform_Win32.h"

using Win32ErrMsg = iro::platform::Win32ErrMsg;

using namespace iro;

@lpp.import "Window.lh"
@lpp.import "Window_win32.lh"
@@lpp.import "Window.events.lh"
@@lpp.import "../Engine.lh"

#include "iro/Logger.h"

@cmn.defFileLogger(window, Info)

Win32Stuff win32;

/* ----------------------------------------------------------------------------
 */
template<typename E>
void Window::raise(const Engine& eng, E& event) 
{
  eng.eventbus.broadcast.raise<E>(event);
}

/* ----------------------------------------------------------------------------
 */
static Key rawKeyToKey(const RAWKEYBOARD& rawkb)
{
  b8 extended = rawkb.Flags & RI_KEY_E0;
$ local case = function(x,y,z)
$   if z then
  case $(x): return extended? Key::$(y) : Key::$(z);
$   else
  case $(x): return Key::$(y);
$   end
$ end
$ local vkcase = function(x,y,z)
$   return case("VK_"..x,y,z)
$ end

  switch (rawkb.VKey)
  {
$ for i=string.byte'A',string.byte'Z' do
$   local char = string.char(i)
$   case("'"..char.."'", char)
$ end
$ for i=0,9 do
$   case("'"..i.."'", 'N'..i)
$   vkcase('NUMPAD'..i, 'NP'..i)
$ end
$ for i=1,12 do
$   vkcase('F'..i, 'F'..i)
$ end
  @vkcase(CONTROL,    RCtrl,    LCtrl)
  @vkcase(MENU,       RAlt,     LAlt)
  @vkcase(PAUSE,      Pause)
  @vkcase(CAPITAL,    CapsLock)
  @vkcase(ESCAPE,     Escape)
  @vkcase(SPACE,      Space)
  @vkcase(INSERT,     Insert,   NP0)
  @vkcase(END,        End,      NP1)
  @vkcase(DOWN,       Down,     NP2)
  @vkcase(NEXT,       PageDown, NP3)
  @vkcase(LEFT,       Left,     NP4)
  @vkcase(RIGHT,      Right,    NP6)
  @vkcase(HOME,       Home,     NP7)
  @vkcase(UP,         Up,       NP8)
  @vkcase(PRIOR,      PageUp,   NP9)
  @vkcase(DELETE,     Delete,   NPPeriod)
  @vkcase(SNAPSHOT,   PrintScreen)
  @vkcase(LWIN,       LMeta)
  @vkcase(RWIN,       RMeta)
  @vkcase(MULTIPLY,   NPMultiply)
  @vkcase(ADD,        NPPlus)
  @vkcase(SUBTRACT,   NPMinus)
  @vkcase(DECIMAL,    NPPeriod)
  @vkcase(DIVIDE,     NPDivide)
  @vkcase(NUMLOCK,    NPNumLock)
  @vkcase(SCROLL,     ScrollLock)
  @vkcase(LSHIFT,     LShift)
  @vkcase(RSHIFT,     RShift)
  @vkcase(LCONTROL,   LCtrl)
  @vkcase(RCONTROL,   RCtrl)
  @vkcase(LMENU,      LAlt)
  @vkcase(RMENU,      RAlt)
  @vkcase(OEM_1,      Semicolon)
  @vkcase(OEM_PLUS,   Equals)
  @vkcase(OEM_MINUS,  Minus)
  @vkcase(OEM_PERIOD, Period)
  @vkcase(OEM_2,      ForwardSlash)
  @vkcase(OEM_3,      Backquote)
  @vkcase(OEM_4,      LBracket)
  @vkcase(OEM_5,      BackSlash)
  @vkcase(OEM_6,      RBracket)
  @vkcase(OEM_7,      Apostrophe)
  @vkcase(BACK,       Backspace)
  @vkcase(TAB,        Tab)
  @vkcase(RETURN,     NPEnter,  Enter)
  @vkcase(SHIFT,      RShift,   LShift)
  default:
    WARN("unhandled vkey: ", (u64)rawkb.VKey, "\n");
  }
  return {};
}

/* ----------------------------------------------------------------------------
 */
LRESULT CALLBACK win32WindowCallback(
    HWND hwnd, 
    UINT msg, 
    WPARAM wparam, 
    LPARAM lparam)
{
  auto* window = (Window*)GetWindowLongPtr(hwnd, GWLP_USERDATA);
  if (window == nullptr)
    return DefWindowProc(hwnd, msg, wparam, lparam);
  auto* inputmgr = &window->eng->input;

  switch (msg)
  {
  case WM_CREATE: // TODO
    return 0;

  case WM_CLOSE: // TODO
    return 0;

  case WM_DESTROY: // TODO
    return 0;

  case WM_SIZE:
    {
      RECT rect;
      GetClientRect((HWND)window->handle, &rect);
      ClientToScreen((HWND)window->handle, (LPPOINT)&rect.left);
      ClientToScreen((HWND)window->handle, (LPPOINT)&rect.right);
      window->size.x = rect.right - rect.left;
      window->size.y = rect.bottom - rect.top;
      window->raise<WindowResized>(*window->eng, {window->size});
      INFO("window resized to ", window->size, "\n");
    }
    return 0;

  case WM_MOVE:
    window->pos.x = LOWORD(lparam);
    window->pos.y = HIWORD(lparam);
    return 0;

  case WM_MOUSEMOVE:
    {
      inputmgr->mouse.window.x = GET_X_LPARAM(lparam);
      inputmgr->mouse.window.y = GET_Y_LPARAM(lparam);
      POINT screen = { GET_X_LPARAM(lparam), GET_Y_LPARAM(lparam) };
      ClientToScreen((HWND)window->handle, &screen);
      inputmgr->mouse.screen.x = screen.x;
      inputmgr->mouse.screen.y = screen.y;
    }
    return 0;

  case WM_INPUT:
    {
      UINT raw_input_size;
      if (-1 == GetRawInputData(
          (HRAWINPUT)lparam, 
          RID_INPUT, 
          NULL, 
          &raw_input_size,
          sizeof(RAWINPUTHEADER)))
        return ERROR_WIN32("failed to get size of raw input data");

      const u64 buffer_size = 1000;
      u8 buffer[buffer_size];
      if (buffer_size < raw_input_size)
      {
        ERROR("buffer allocated for raw input is too small (", buffer_size,
              " < ", raw_input_size, ")\n");
        assert(false);
      }

      if (-1 == GetRawInputData(
          (HRAWINPUT)lparam, 
          RID_INPUT, 
          &buffer, 
          &raw_input_size, 
          sizeof(RAWINPUTHEADER)))
        return ERROR_WIN32("failed to get raw input data");

      auto p_raw_input = (RAWINPUT*)buffer;

      switch (p_raw_input->header.dwType)
      {
      case RIM_TYPEKEYBOARD:
        {
          const RAWKEYBOARD& rawkb = p_raw_input->data.keyboard;
          Key key = rawKeyToKey(rawkb);
          if (rawkb.Flags & RI_KEY_BREAK)
            inputmgr->keys_real.unset(key);
          else
            inputmgr->keys_real.set(key);
        }
        break;

      case RIM_TYPEMOUSE:
        {
          const RAWMOUSE& rawm = p_raw_input->data.mouse;
          // NOTE(sushi) we don't process mouse movement here because it 
          //             isn't consistent with the actual movement of the
          //             mouse in Windows. We may have a use for it later
          //             though.

$ local mbutton = function(wc, ec)
          if (rawm.ulButtons & RI_MOUSE_$(wc)_UP)
            inputmgr->mouse_real.unset(MouseButton::$(ec));
          if (rawm.ulButtons & RI_MOUSE_$(wc)_DOWN)
            inputmgr->mouse_real.set(MouseButton::$(ec));
$ end
          @mbutton(LEFT_BUTTON,   Left)
          @mbutton(RIGHT_BUTTON,  Right)
          @mbutton(MIDDLE_BUTTON, Middle)
          @mbutton(BUTTON_4,      M4)
          @mbutton(BUTTON_5,      M5)

          if (rawm.ulButtons & RI_MOUSE_WHEEL)
          {
            inputmgr->scroll += f32(s16(rawm.usButtonData)) / (f32)WHEEL_DELTA;
          }
        }
        break;
      }
    }
    return 0;
  }

  return DefWindowProc(hwnd, msg, wparam, lparam);
}

/* ----------------------------------------------------------------------------
 */
b8 Window::initializeBackend()
{
  win32.h_console_instance = GetModuleHandleW(0);

  WNDCLASSEXA dummy_window_class = {};
  dummy_window_class.cbSize        = sizeof(WNDCLASSEX);
  dummy_window_class.style         = CS_OWNDC;
  dummy_window_class.lpfnWndProc   = win32WindowCallback;
  dummy_window_class.hInstance     = win32.h_console_instance;
  dummy_window_class.lpszClassName = g_win32_dummy_window_classname;

  if (!RegisterClassEx(&dummy_window_class))
    return ERROR_WIN32("failed to register dummy window class");

  WNDCLASSEXA window_class = {};
  window_class.cbSize        = sizeof(WNDCLASSEXW);
  window_class.style         = CS_OWNDC;
  window_class.lpfnWndProc   = win32WindowCallback;
  window_class.hInstance     = win32.h_console_instance;
  window_class.lpszClassName = g_win32_window_classname;

  if (!RegisterClassEx(&window_class))
    return ERROR_WIN32("failed to register window class");

  // Create dummy window.
  win32.dummy_window_handle = 
    CreateWindowExA(
        WS_EX_OVERLAPPEDWINDOW
      | WS_EX_NOACTIVATE,
      g_win32_dummy_window_classname,
      "_ecs_dummy_window_",     // Title
        WS_CLIPSIBLINGS         // Style
      | WS_CLIPCHILDREN, 
      CW_USEDEFAULT,0,          // x,y
      CW_USEDEFAULT,0,          // w,h
      NULL,                     // Parent handle
      NULL,                     // Menu handle
      win32.h_console_instance, // Instance handle
      NULL);                    // User data?

  if (win32.dummy_window_handle == NULL)
    return ERROR_WIN32("failed to dummy create window");

  win32.dummy_window_device_handle = GetDC(win32.dummy_window_handle);

  ShowWindow(win32.dummy_window_handle, SW_HIDE);

  return true;
}

/* ----------------------------------------------------------------------------
 *  TODO(sushi) handle unicode window titles if ever necessary.
 */
b8 Window::init(String name, InputMgr& inputmgr)
{
  handle = 
    CreateWindowEx(
      0,
      g_win32_window_classname,
      (LPCSTR)name.ptr,
        WS_CLIPCHILDREN
      | WS_CLIPSIBLINGS
      | WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT,CW_USEDEFAULT,
      CW_USEDEFAULT,CW_USEDEFAULT,
      NULL,
      NULL,
      win32.h_console_instance,
      NULL);

  if (handle == nullptr)
    return ERROR_WIN32("failed to spawn window ", title);

  context = GetDC((HWND)handle);

  ShowWindow((HWND)handle, SW_SHOW);

  SetWindowLongPtr((HWND)handle, GWLP_USERDATA, (LONG_PTR)this);

  RECT rect;
  GetClientRect((HWND)handle, &rect);
  ClientToScreen((HWND)handle, (LPPOINT)&rect.left);
  ClientToScreen((HWND)handle, (LPPOINT)&rect.right);

  pos.x = rect.left;
  pos.y = rect.top;
  size.x = rect.right - rect.left;
  size.y = rect.bottom - rect.top;

  // Register input devices, only keyboard and mouse for now.
  RAWINPUTDEVICE devices[2] = {};
  mem::zero(devices, 2 * sizeof(RAWINPUTDEVICE));

  devices[0].usUsagePage = HID_USAGE_PAGE_GENERIC;
  devices[0].usUsage = HID_USAGE_GENERIC_KEYBOARD;
  devices[0].dwFlags = 0;
  devices[0].hwndTarget = (HWND)handle;

  devices[1].usUsagePage = HID_USAGE_PAGE_GENERIC;
  devices[1].usUsage = HID_USAGE_GENERIC_MOUSE;
  devices[1].dwFlags = 0;
  devices[1].hwndTarget = (HWND)handle;

  if (!RegisterRawInputDevices(devices, 2, sizeof(RAWINPUTDEVICE)))
    return ERROR_WIN32("failed to register raw input devices");

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Window::update(Engine& eng)
{
  // TODO(sushi) do better later
  this->eng = &eng;

  // TODO(sushi) do this elsewhere.
  eng.input.scroll = 0.f;

  MSG msg;
  while (PeekMessage(&msg, (HWND)handle, 0, 0, PM_REMOVE))
  {
    TranslateMessage(&msg);
    DispatchMessage(&msg);
  }

  return true;
}

$ end -- if IRO_WIN32
