/*
 *  A representation of an OS window.
 */

#ifndef _ecs_Window_h
#define _ecs_Window_h

#include "iro/Common.h"
#include "iro/Unicode.h"

#include "input/Keys.h"

#include "math/vec.h"

using namespace iro;

struct Engine;
struct InputMgr;

/* ============================================================================
 */
struct Window
{
  String title;

  void* handle;
  void* context;

  vec2i pos;
  vec2i size;

  b8 focused;

  // Not a fan of doing this but sorta have to 
  // to be able to get it in win32's window callback garbage.
  // Do this better later.
  Engine* eng;

  enum class DisplayMode
  {
    Windowed,
    Borderless,
    BorderlessMaximized,
    FullScreen,
  };

  DisplayMode display_mode;

  enum class CursorMode
  {
    Normal,
    FirstPerson,
  };

  CursorMode cursor_mode;

  b8 size_changed;

  // Initializes whatever backend is being used to display windows.
  static b8 initializeBackend();

  // TODO(sushi) remove the inputmgr arg here and add a platform layer 
  //             for inputmgr initialization as we only want to register
  //             input for the first main window rather than each time they
  //             are created. Since we are only creating one window for now
  //             I'm not as concerned with adding a whole new plat layer yet.
  b8 init(Engine& eng, String title, InputMgr& inputmgr);
  void deinit();

  b8 update(InputMgr& input);
  
  void setCursorPosition(s32 x, s32 y);

  void setDisplayMode(DisplayMode mode);
  void setCursorMode(CursorMode mode);

  template<typename E>
  void raise(const Engine& eng, E&& event) { raise<E>(eng, event); }

  template<typename E>
  void raise(const Engine& eng, E& event);
};

#endif
