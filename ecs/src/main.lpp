$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"

#include "iro/logger.h"
#include "iro/fs/fs.h"
#include "iro/time/time.h"

#include "window/Window.h"
#include "graphics/Renderer.h"

#include "Engine.h"

#include "iro/gdbscriptdef.h"

@lpp.import "input/Input.lpp"
@lpp.import "event/BroadcastEventBus.lh"

static Logger logger = Logger::create("ecs"_str, Logger::Verbosity::Trace);

void onKeyPressed(void* me, KeyPressed& event)
{
  INFO("pressed: ", getKeyStr(event.key), "\n");
}

void onKeyReleased(void* me, KeyReleased& event)
{
  INFO("released: ", getKeyStr(event.key), "\n");
}

int main()
{
  iro::log.init();
  defer { iro::log.deinit(); };

  Logger logger;
  logger.init("lpp"_str, Logger::Verbosity::Trace);

  {
    using enum Log::Dest::Flag;
    Log::Dest::Flags flags;

    if (fs::stdout.isatty())
    {
      flags = 
          AllowColor
        | ShowCategoryName
        | ShowVerbosity
        | TrackLongestName
        | PadVerbosity
        | PrefixNewlines;
    }
    else
    {
      flags = 
          ShowCategoryName
        | ShowVerbosity
        | PrefixNewlines;
    }

    iro::log.newDestination("stderr"_str, &fs::stderr, flags);
  }

  Engine engine;
  if (!engine.init())
    return 1;

  engine.eventbus.broadcast.subscribeTo<KeyPressed>(nullptr, &onKeyPressed);
  engine.eventbus.broadcast.subscribeTo<KeyReleased>(nullptr, &onKeyReleased);

  auto program_start_time = TimePoint::now();

  if (!Window::initializeBackend())
    return 1;

  Window window;
  if (!window.init("hello"_str))
    return 1;

  Renderer renderer;
  if (!renderer.init(&window))
    return 1;

  for (;;) 
  {
    window.update(engine);
    renderer.update(
      &window,
      (TimePoint::now() - program_start_time).toSeconds());
  }
}
