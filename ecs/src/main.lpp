$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"
$ local event = require "event.Event"

#include "iro/logger.h"
#include "iro/fs/fs.h"
#include "iro/time/time.h"

@lpp.import "Engine.lh"

#include "iro/gdbscriptdef.h"

static Logger logger = 
  Logger::create("ecs"_str, Logger::Verbosity::Trace);

int main()
{
  iro::log.init();
  defer { iro::log.deinit(); };

  Logger logger;
  logger.init("lpp"_str, Logger::Verbosity::Trace);

  {
    using enum Log::Dest::Flag;
    Log::Dest::Flags flags;

    if (fs::stdout.isatty())
    {
      flags = 
          AllowColor
        | ShowCategoryName
        | ShowVerbosity
        | PrefixNewlines;
    }
    else
    {
      flags = 
          ShowCategoryName
        | ShowVerbosity
        | PrefixNewlines;
    }

    iro::log.newDestination("stderr"_str, &fs::stderr, flags);
  }

  Engine engine = {};
  if (!engine.init())
    return ERROR("failed to initialize engine\n");

  auto program_start_time = TimePoint::now();

  for (;;) 
  {
    f32 time_elapsed = (TimePoint::now() - program_start_time).toSeconds();

    auto frame_start = TimePoint::now();

    engine.update();

    INFO("frame took: ", 
      (TimePoint::now() - frame_start).toMilliseconds(), "\n");
  }
}
