$ local cmn = require "common"
$ local event = require "event.Event"

#include "iro/Logger.h"
#include "iro/fs/FileSystem.h"
#include "iro/time/Time.h"

@lpp.import "Engine.lh"

#include "iro/GDBScriptDef.h"

static Logger logger = 
  Logger::create("ecs"_str, Logger::Verbosity::Trace);

int main()
{
  iro::log.init();
  defer { iro::log.deinit(); };

  Logger logger;
  logger.init("lpp"_str, Logger::Verbosity::Trace);

  {
    using enum Log::Dest::Flag;
    Log::Dest::Flags flags;

    if (fs::stdout.isatty())
    {
      flags = 
          AllowColor
        | TrackLongestName
        | PadVerbosity
        | ShowCategoryName
        | ShowVerbosity
        | PrefixNewlines;
    }
    else
    {
      flags = 
          ShowCategoryName
        | ShowVerbosity
        | PrefixNewlines;
    }

    iro::log.newDestination("stdout"_str, &fs::stdout, flags);
  }

  Engine engine = {};
  if (!engine.init())
    return ERROR("failed to initialize engine\n");

  auto program_start_time = TimePoint::now();

  for (;;) 
  {
    if (!engine.update())
      break;
  }
}
