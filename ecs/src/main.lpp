$ local lpp = require "lpp"
$ local reflect = require "reflect.Reflector"
$ local event = require "event.Event"

#include "iro/logger.h"
#include "iro/fs/fs.h"
#include "iro/time/time.h"

@lpp.import "Engine.lh"

#include "iro/gdbscriptdef.h"

static Logger logger = 
  Logger::create("ecs"_str, Logger::Verbosity::Trace);

b8 doReload(hr::Reloader* r)
{
  io::StaticBuffer<32> patchnumbuf;
  patchnumbuf.open();
  io::format(&patchnumbuf, getPatchNumber(r));

  String args[2] =
  {
    "patch"_str,
    patchnumbuf.asStr(),
  };

  Process::Stream streams[3] =
  {
    { false, nullptr },
    { false, nullptr },
    { false, nullptr },
  };

  auto lake = 
    Process::spawn(
      "/home/sushi/src/enosi/bin/lake"_str,
      Slice<String>::from(args, 2),
      streams,
      "/home/sushi/src/enosi"_str);

  while (lake.status == Process::Status::Running)
    lake.checkStatus();

  void* dlhandle = dlopen(nullptr, RTLD_LAZY);

  hr::ReloadContext context;
  context.hrfpath = "build/debug/test.hrf"_str;
  context.exepath = "build/debug/test"_str;
  context.reloadee_handle = dlhandle;

  hr::ReloadResult result;

  if (!hr::doReload(r, context, &result))
    return ERROR("failed to reload symbols\n");

  return true;
}

int main()
{
  iro::log.init();
  defer { iro::log.deinit(); };

  Logger logger;
  logger.init("lpp"_str, Logger::Verbosity::Trace);

  {
    using enum Log::Dest::Flag;
    Log::Dest::Flags flags;

    if (fs::stdout.isatty())
    {
      flags = 
          AllowColor
        | TrackLongestName
        | PadVerbosity
        | ShowCategoryName
        | ShowVerbosity
        | PrefixNewlines;
    }
    else
    {
      flags = 
          ShowCategoryName
        | ShowVerbosity
        | PrefixNewlines;
    }

    iro::log.newDestination("stdout"_str, &fs::stdout, flags);
  }

  auto* reloader = hr::createReloader();

  Engine engine = {};
  if (!engine.init())
    return ERROR("failed to initialize engine\n");

  auto program_start_time = TimePoint::now();

  for (;;) 
  {
    if (!engine.update())
      break;
  }
}
