$ local cmn = require "common"
$ local event = require "event.Event"

#include "iro/Logger.h"
#include "iro/fs/FileSystem.h"
#include "iro/Platform.h"
#include "iro/time/Time.h"
#include "iro/Process.h"

@lpp.import "Engine.lh"

$ if IRO_LINUX then
#include "iro/GDBScriptDef.h"
$ end

#if ECS_HOT_RELOAD
#include "hreload/Reloader.h"
#include "dlfcn.h"
#endif

static Logger logger =
  Logger::create("ecs"_str, Logger::Verbosity::Trace);

/* ----------------------------------------------------------------------------
 *  The reason we have this wrapper is to more easily support hot-reloading
 *  a single function with hreload w/o having to do the union function
 *  pointer hack that is often seen elsewhere in the codebase. This function,
 *  when hotreloading is enabled, is passed to hreload since its the primary
 *  function we call into in main, and thus is the only one we have to reload.
 *
 *  TODO(sushi) this is no longer relevant as I've since fixed the performance
 *              issues with reloading all functions, so reorganize this 
 *              sometime.
 */
b8 updateEngine(Engine* engine)
{
  return engine->update();
}

/* ----------------------------------------------------------------------------
 */
void doReload(hr::Reloader* r)
{
#if ECS_HOT_RELOAD
  NOTICE("starting hot reload...\n");

  // Generate patch subcommand to pass to lake.
  io::StaticBuffer<32> patchnumbuf;
  patchnumbuf.open();
  io::format(&patchnumbuf, hr::getPatchNumber(r));

  String args[2] =
  {
    "patch"_str,
    patchnumbuf.asStr(),
  };

  // Run lake and emit its output.
  auto lake =
    Process::spawn(
      "/home/sushi/src/enosi/bin/lake"_str,
      Slice<String>::from(args, 2),
      "/home/sushi/src/enosi"_str);

  while (lake.status == Process::Status::Running || lake.hasOutput())
  {
    if (lake.hasOutput())
    {
      io::StaticBuffer<255> outbuf;
      outbuf.len = lake.read(Bytes::from(outbuf.buffer, outbuf.capacity()));
      INFO(outbuf);
    }
    lake.check();
  }

  if (lake.exit_code != 0)
  {
    ERROR("build failed, aborting hot reload\n");
    return;
  }

  // Perform the hot relaod if the build succeeded.
  void* dlhandle = dlopen(nullptr, RTLD_LAZY);

  hr::ReloadContext context;
  context.hrfpath = "build/debug/ecs.hrf"_str;
  context.exepath = "build/debug/ecs"_str;
  context.reloadee_handle = dlhandle;

  hr::ReloadResult result;
  hr::doReload(r, context, &result);
#endif
}

/* ----------------------------------------------------------------------------
 */
int main(int argc, const char** args)
{
  iro::log.init();
  defer { iro::log.deinit(); };

  Logger logger;
  logger.init("lpp"_str, Logger::Verbosity::Trace);

  {
    using enum Log::Dest::Flag;
    Log::Dest::Flags flags =
        AllowColor
      | PadVerbosity
      | ShowVerbosity
      | PrefixNewlines;

    iro::log.newDestination("stdout"_str, &fs::stdout, flags);
  }

  LaunchArgs launch_args = {};
  if (argc > 1)
  {
    launch_args.init();
    for (int i = 1; i < argc; i++)
    {
      String key = iro::String::fromCStr(args[i]);
      if (!key.startsWith('-'))
        continue;

      LaunchArg arg = { .key = key.hash() };
      if (i + 1 < argc && args[i+1][0] != '-')
      {
        arg.value = iro::String::fromCStr(args[i+1]);
        i++;
      }
      else
      {
        launch_args.insert(&arg);
      }
    }
  }

#if ECS_HOT_RELOAD
  void* reload_funcs[] = { (void*)&updateEngine, };

  hr::Reloader* reloader =
    hr::createReloader(Slice<void*>::from(reload_funcs, 1));
#endif

  Engine engine = { .launch_args = launch_args };
  if (!engine.init())
    return FATAL("failed to initialize Engine\n");

  auto program_start_time = TimePoint::now();

  for (;;)
  {
#if ECS_HOT_RELOAD
    // TODO(sushi) call back into the Engine telling it if the reload was
    //             successful or not.
    if (engine.wantHotReload())
      doReload(reloader);
#endif
    if (!updateEngine(&engine))
      break;
  }
}
