$ local cmn = require "common"
$ local Schema = require "asset.Schema"

@@lpp.import "asset/SourceData.lh"

struct AssetMgr;

namespace gfx
{
struct Renderer;
}

// TODO(sushi) it would be nice to take an allocator here, but that somewhat
//             complicates destroying packed data, as it may crash if we 
//             pass an allocator that does not support freeing. We can just 
//             pass nullptr in that case but its sorta weird to have the user
//             know that.
//
//             The allocation is mostly for Component stuff, as they are 
//             inherited types and so arbitrarily sized. Another way we might
//             want to approach stuff like this is just having a specific 
//             container type for these types that is provided here that 
//             allocates them how it sees fit. I'm not entirely sure yet
//             though, and hopefully we get some better ideas in the future.
struct PackContext
{
  // Optional systems only required when the type being packed
  // has members that need these to load it.
  AssetMgr* assetmgr;
  gfx::Renderer* renderer;
};

template<typename T>
b8 packSourceDataIntoType(const SourceData& data, T* out, PackContext& ctx);

template<typename T>
b8 destroyPackedData(T* data);
