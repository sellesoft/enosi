$ require "common"
$ local ast = require "reflect.AST"

#include "iro/Logger.h"

$$$
local importer = require "reflect.Importer"
{
  patterns = 
  {
    "src/**/*.defs.lh",
    "src/**/*.comp.lh",
  },
}
$$$
@importer:get

using namespace iro;

@log.ger(ref, Debug);

/* ----------------------------------------------------------------------------
 */
b8 Ref::load(String type, LoadParams& params)
{
$ local TRef = importer.p.decls.map["struct Ref"]

  switch (type.hash())
  {
  case "Ref"_hashed:
    return ERROR("Ref::load called with type Ref\n");

$ local function placeDer(der)
$   local name = importer.removeTag(der.name)
  case "$(name)"_hashed:
    return (($(name)*)this)->load(params);
$   for der in der.derived:each() do
$     placeDer(der)
$   end
$ end

$ for der in TRef.derived:each() do
$   placeDer(der)
$ end
  }

  return ERROR("unhandled type in Ref::load: ", type, "\n");
}
