/*
 *  Some data that either comes from packing SourceData or from loading 
 *  CompiledData.
 */

$ require "common"

#include "iro/memory/Bump.h"

struct Ref;
struct AssetRef;

/* ============================================================================
 *  A Ref found in the data that was packed, intended to be resolved
 *  later by whoever is using this data.
 */
struct PackedRef
{
  // The next ref in the linked list.
  PackedRef* next;

  // The type of Ref.
  String type;

  // A pointer to the reference in the data.
  Ref* ref;
};

/* ============================================================================
 */
struct PackedData
{
  // A buffer containing all data that was retieved while packing this data,
  // eg. its raw binary data, strings, etc.
  mem::LenientBump buffer;

  // A linked list of asset refs found during packing.
  PackedRef* refs;

  // A slice containing the ROOT data of this PackedData, eg. if we packed a 
  // MapDef, this will span said def, not including strings or other data
  // that may have been allocated.
  Bytes data;

  template<typename T>
  T* getRootAs() const
  {
    return (T*)data.ptr;
  }

  void recordRef(String type, Ref* ref)
  {
    auto* pref = buffer.allocateType<PackedRef>();
    pref->next = refs;
    pref->type = type;
    pref->ref = ref;
    refs = pref;
  }

  void clear()
  {
    buffer.deinit();
    refs = nullptr;
    data = nil;
  }
};
