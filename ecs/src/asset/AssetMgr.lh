/* 
 *  Manager for handling the loading and caching of assets, which is any 
 *  form of data loaded from disk at runtime.
 *
 *  When an asset is loaded the manager provdes a handle to its resource,
 *  which is used to retrieve its data.
 *  
 *  In the future this should also handle the runtime reloading of assets.
 */  

#include "iro/common.h"
#include "iro/unicode.h"
#include "iro/containers/pool.h"
#include "iro/containers/array.h"
#include "iro/containers/avl.h"
#include "iro/containers/list.h"
#include "iro/fs/path.h"
#include "iro/memory/allocator.h"

$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"

@@lpp.import "asset/AssetHandle.lh"

using namespace iro;

struct Asset;

typedef DList<Asset> AssetList;

/* ============================================================================
 *  Internal representation of an asset.
 */
struct Asset
{
  // probably dont need to use Path here but im lazy atm.
  fs::Path path = nil;

  void* data = nullptr;
  u64   data_size = 0;

  // TODO(sushi) this sucks, manually implement a linked list here.
  AssetList::Node* list_node;
};

/* ============================================================================
 */
struct AssetMgr
{
  Asset* asset_pool;
  u64    asset_capacity;

  u64 next_free_slot;
  u64 loaded_count;

  // List of loaded assets.
  AssetList asset_list;

  mem::Allocator* allocator;


  b8 init(u64 asset_capacity, mem::Allocator* allocator);
  void deinit();

  AssetHandle loadAsset(str path);

  // Unloads the asset pointed to by the given handle.
  // This also sets the handle to nil for you.
  // TODO(sushi) asset ref counting so we don't unload assets 
  //             still referred to elsewhere.
  void unloadAsset(AssetHandle& handle);

  AssetHandle findAsset(str path);

  Asset* getAsset(AssetHandle handle);

  template<typename T>
  T* getAssetData(AssetHandle handle)
  {
    if (isnil(handle))
      return nullptr;
    return (T*)getAsset(handle)->data;
  }

  static b8 checkNeedsCompiled(str asset_path, str data_path);

  str getAssetDir() { return "assets"_str; }
  str getDataDir() { return "data"_str; }
};
