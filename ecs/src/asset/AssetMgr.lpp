$ local cmn = require "common"

@@lpp.import "asset/AssetMgr.lh"

#include "iro/memory/Memory.h"
#include "iro/fs/File.h"
#include "iro/Platform.h"
#include "iro/Logger.h"

@cmn.defFileLogger(rsrcmgr, Debug)

/* ----------------------------------------------------------------------------
 */
b8 AssetMgr::init(mem::Allocator* allocator)
{
  INFO("initializing AssetMgr\n");
  
  this->allocator = allocator;

  if (!map.init(allocator))
    return ERROR("failed to init asset map\n");

  if (!pool.init(allocator))
    return @log.error("failed to init asset pool\n");

  INFO("finished\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
void AssetMgr::deinit()
{
  INFO("deinitializing AssetMgr\n");

  if (!map.isEmpty())
  {
    ERROR("AssetMgr::deinit called but Assets still exist!\n",
          "  Currently allocated resources are: \n");
    for (Asset& asset : map)
    {
      ERROR("    ", asset.name, "\n");
    }

    assert(!"AssetMgr::deinit called while Assets are still active!");
  }
  
  map.deinit();

  INFO("done\n");
}

/* ----------------------------------------------------------------------------
 */
Asset* AssetMgr::allocateAsset(String name)
{
  u64 name_hash = name.hash();
  assert(map.find(name_hash) == nullptr && 
    "a Asset has already been allocated with the given name");

  Asset* asset = pool.pushTail()->data;
  
  asset->hash = name_hash;
  asset->name = name.allocateCopy(allocator);

  map.insert(asset);

  return asset;
}

/* ----------------------------------------------------------------------------
 */
Asset* AssetMgr::loadAssetFromDisk(String name)
{
  using namespace fs;

  u64 name_hash = name.hash();
  if (Asset* existing = map.find(name_hash))
  {
    @log.debug("asset '", name, "' already loaded\n");
    return existing;
  }

  @log.debug("loading asset '", name, "' from disk\n");

  if (!Path::exists(name))
  {
    @log.error("no asset exists at path '", name, "'\n");
    return nullptr;
  }

  auto file = File::from(name, OpenFlag::Read);
  if (isnil(file))
  {
    @log.error("failed to open asset file at '", name, "'\n");
    return nullptr;
  }

  Asset* asset = allocateAsset(name);
  if (asset == nullptr)
  {
    @log.error("failed to allocate asset '", name, "'\n");
    return nullptr;
  }

  asset->size = file.getInfo().byte_size;
  asset->data = allocator->allocate(asset->size);

  assert(asset->size == file.read({(u8*)asset->data, asset->size}));

  return asset;
}

/* ----------------------------------------------------------------------------
 */
Asset* AssetMgr::findAsset(String name) const
{
  return map.find(name.hash());
}

/* ----------------------------------------------------------------------------
 */
b8 AssetMgr::checkNeedsCompiled(String asset_path, String data_path)
{
  using namespace fs;
  return !Path::exists(data_path) ||
         1 ==  Path::compareModTimes(asset_path, data_path);
}
