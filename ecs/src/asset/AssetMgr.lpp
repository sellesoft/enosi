$ local cmn = require "common"

@@lpp.import "asset/AssetMgr.lh"

#include "iro/memory/Memory.h"
#include "iro/fs/File.h"
#include "iro/Platform.h"

@cmn.defFileLogger(rsrcmgr, Debug)

/* ----------------------------------------------------------------------------
 */
b8 AssetMgr::init(mem::Allocator* allocator)
{
  INFO("initializing AssetMgr\n");
  
  this->allocator = allocator;

  if (!map.init(allocator))
    return ERROR("failed to init asset map\n");

  INFO("finished\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
void AssetMgr::deinit()
{
  INFO("deinitializing AssetMgr\n");

  if (!map.isEmpty())
  {
    ERROR("AssetMgr::deinit called but Assets still exist!\n",
          "  Currently allocated resources are: \n");
    for (Asset& asset : map)
    {
      ERROR("    ", asset.name, "\n");
    }

    assert(!"AssetMgr::deinit called while Assets are still active!");
  }
  
  map.deinit();

  INFO("done\n");
}

/* ----------------------------------------------------------------------------
 */
Asset* AssetMgr::allocateAsset(u64 size, String name)
{
  u64 name_hash = name.hash();
  assert(map.find(name_hash) == nullptr && 
    "a Asset has already been allocated with the given name");

  auto* asset = (Asset*)allocator->allocate(size);
  mem::zero(asset, size);

  map.insert(asset);

  return asset;
}

/* ----------------------------------------------------------------------------
 */
Asset* AssetMgr::findAsset(String name) const
{
  return map.find(name.hash());
}

/* ----------------------------------------------------------------------------
 */
void AssetMgr::unloadAsset(Asset* asset)
{
  assert(!asset->rc.isReferenced());

  asset->onUnload();

  map.remove(asset);

  allocator->free(asset);
}

/* ----------------------------------------------------------------------------
 */
b8 AssetMgr::checkNeedsCompiled(String asset_path, String data_path)
{
  using namespace fs;
  return !Path::exists(data_path) ||
         1 ==  Path::compareModTimes(asset_path, data_path);
}
