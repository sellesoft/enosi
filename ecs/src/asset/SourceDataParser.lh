/*
 *  Parser for source data.
 */

$ local cmn = require "common"

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/memory/Allocator.h"
#include "iro/io/IO.h"
#include "iro/Scanner.h"

using namespace iro;

@@lpp.import "asset/SourceData.lh"

using namespace iro;

struct Token;
struct SourceDataFile;

/* ============================================================================
 */
struct SourceDataParser
{
  // The file being parsed.
  SourceDataFile* file;

  String in_name;

  b8   init(SourceDataFile* file, io::IO* in, String in_name);
  void deinit();

  b8 parse();

private:

  Scanner scanner;

  b8 parseReturn();
  b8 parseAuxData(Token tok);
  b8 parsePossiblyTypedData(SourceData* data);
  b8 parseObjectData(SourceDataObject* obj);
  b8 parseNamedOrPossiblyTypedData(SourceData* data);
  b8 parseNamedOrPossiblyTypedData(Token tok, SourceData* data);
  b8 parseValueOrUntypedObject(Token tok, SourceData* data);

  Token nextToken();

  template<typename... Args>
  b8 errorAt(Token tok, Args... args);

  u32 stage_depth = 0;

  struct ScopedStage
  {
    SourceDataParser& parser;

    ScopedStage(SourceDataParser& parser, const char* funcname)
      : parser(parser)
    {
      onEnter(funcname);
      parser.stage_depth += 1;
    }

    ~ScopedStage()
    {
      parser.stage_depth -= 1;
      onLeave();
    }

    void onEnter(const char* funcname);
    void onLeave();

    template<typename... T>
    void log(T... args);
  };
};
