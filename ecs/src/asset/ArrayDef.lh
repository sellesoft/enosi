/*
 *  A lighter weight type used for Arrays in Defs.
 *
 *  We originally used iro's Array but that contained uneeded data that made
 *  compiling and loading the data from disk more complicated (eg. it stores
 *  its len, space, and allocator info embedded in the allocated data).
 *
 *  This array expects that the amount of elements is known when it is created
 *  so each element is allocated immediately, then they are filled out by
 *  whatever is using this.
 */

$ require "common"

#include "iro/Common.h"
#include "iro/memory/Allocator.h"

#include <assert.h>

using namespace iro;

/* ============================================================================
 */
template<typename T>
struct ArrayDef
{
  T*  arr = nullptr;
  u32 len = 0;

  b8 init(u32 space, mem::Allocator* allocator)
  {
    arr = allocator->constructArray<T>(space);
    if (arr == nullptr)
      return false;

    len = space;

    return true;
  }

  T& operator [](s64 i) { assert(i >= 0 && i < len); return arr[i]; }
  const T& operator [](s64 i) const
    { assert(i >= 0 && i < len); return arr[i]; }

  T* begin() { return arr; }
  T* end()   { return arr + len; }

  const T* begin() const { return arr; }
  const T* end()   const { return arr + len; }
};
