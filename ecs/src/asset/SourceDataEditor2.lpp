$ local cmn = require "common"
$ local ui = require "ui.UI"
$ local glob = require "Glob"
$ local Processor = require "reflect.Processor"
$ local ast = require "reflect.AST"
$ local List = require "List"

$$$
local importer = require "reflect.Importer"
{
  patterns = 
  {
    "src/**/*.defs.lh",
    "src/**/*.comp.lh",
  },

  filter = function(p, decl)
    if decl.metadata.def then
      return true
    end

    local TComponent = p.processed_clang_objs["struct Component"]
    if TComponent and decl:is(ast.Record) and decl:isDerivedFrom(TComponent)
    then
      return true
    end
  end,
}
$$$
@importer:get

@@lpp.import "asset/SourceDataEditor.lh"

@@lpp.import "Engine.lh"

@@lpp.import "asset/SourceData.lh"
@@lpp.import "asset/SourceDataParser.lh"

@@lpp.import "ui/UI.lh"
@@lpp.import "graphics/Geo.lh"

using namespace ui;

#include "math/util.h"

$ local placed = {}
$ local place_queue = List{}
$ local putPacker
$ local putTypePacker
$ local TAssetRef = importer.p:lookupDecl "struct AssetRef"
$ local TResourceRef = importer.p:lookupDecl "struct gfx::ResourceRef"

@log.ger(srcdataedit, Info)

/* ============================================================================
 */
struct DatumState
{
  DatumState* parent = nullptr;
  SourceData* data = nullptr;
  b8 is_missing_data = false;

  u32 datum_idx = 0;

  struct InitParams
  {
    DatumState* parent;
    SourceData* data;
    SourceDataEditor* editor;

    String name;
    String default_data;
  };

  /* --------------------------------------------------------------------------
   */
  b8 init(UI& ui, const InitParams& params)
  {
    parent = params.parent;
    data = params.data;

    if (data == nullptr)
    {
      is_missing_data = true;
      resolveMissingData(params.name, params.editor);
      assert(data != nullptr && "derived type failed to resolve missing data");
    }

    if (!datum_init(ui, params))
      return false;

    return true;
  }

  /* --------------------------------------------------------------------------
   */
  void deinit(UI& ui)
  {
    datum_deinit(ui);
  }

  /* --------------------------------------------------------------------------
   */
  struct UpdateParams
  {
    String name;
    String default_data;
    vec2f pos;
    const SourceDataEditorSkinDef& skin;
    SourceDataEditor& editor;
    u32* datum_idx;
  };

  /* --------------------------------------------------------------------------
   */
  f32 update(UI& ui, const UpdateParams& params)
  {
    vec2f name_pos = 
    {
      params.skin.row.name_padding + params.pos.x + getNameXOffset(), 
      getRowTextY(params),
    };

    vec2f text_size = 
      gfx::measureText(
        params.name, 
        &*params.skin.text.font, 
        params.skin.text.font_height,
        1.f);

    params.editor.max_name_extent = 
      max<f32>(name_pos.x + text_size.x, params.editor.max_name_extent);

    ui.putText(
      {name_pos.x, getRowTextY(params), 100.f, 100.f}, 
      params.name, 
      params.skin.text);

    if (ui.frame_input.isKeyDown(Key::LCtrl))
    {
      if (ui.putFocusableBounds(
            ui.generateIdFromPointer(this), 
            Rect::from(params.pos, text_size))
          .test(FocusFlag::PrimaryReleased))
      {
        @dbgBreak;
      }
    }

    f32 height = datum_update(ui, params);

    // Inject background at the front of the layer's command list now that 
    // we know the height of this datum's content.
    ui.beginCmdFrontInjection();

    Color row_color = 
      *params.datum_idx % 2 
      ? params.skin.row.odd_color 
      : params.skin.row.even_color;

    vec2f bg_size = 
      vec2f(ui.getWidth() - params.pos.x, max(height, params.skin.row.height));
    Rect bg_bounds = Rect::from(params.pos, bg_size);

    ui.putQuad(bg_bounds, row_color);

    // TODO(sushi) indicate this better, like greying out or something.
    if (is_missing_data)
      ui.putQuad(bg_bounds, params.skin.missing_data_color);

    ui.endCmdFrontInjection();

    *params.datum_idx += 1;

    return height;
  }

  /* --------------------------------------------------------------------------
   */
  f32 calcInlineValueX(const UpdateParams& params) const
  {
    return 0.f;
  }

  //
  // Interface to behavior defined by derivations of this type. This is set
  // up this way so that we can always call into DatumState first, then
  // call down into the more specific behaviors that other types implement,
  // allowing us to wrap code around that behavior as needed. Each of the 
  // derived types that may also be derived from use this pattern as well.
  // 

  virtual b8 datum_init(UI& ui, const InitParams& params) { return true; }
  virtual void datum_deinit(UI& ui) { }
  virtual f32 datum_update(UI&ui, const UpdateParams& params) { return 0.f; }

  // Allows adjusting where the name is placed, eg. Object states need 
  // to place a +/- before the name to indicate opened state.
  virtual f32 getNameXOffset() const { return 0.f; }

  // Whether or not this datum state embeds its children.
  // TODO(sushi) this is a bit scuffed and I would like for it to be removed
  //             in favor of something else. It exists because TypedPtrStates
  //             allocate a 'subdatum' of the proper type and when that is 
  //             an ObjectState, we don't want it to double nest the chilren.
  virtual b8 embedsChildren() const { return false; }

  // Whether or not this datum state is open.
  // NOTE(sushi) this, like the above function, also sucks and is just a 
  //             hacky way to handle typed pointer stuff. Really need 
  //             to figure out a better way to handle this.
  virtual b8 isOpen() const { return false; }

  f32 getRowTextY(const UpdateParams& params) const 
  {
    return params.pos.y + floor(
      0.5f * (params.skin.row.height - params.skin.text.font_height));
  }

  // Invoked on instances of this type whenever we find missing data during
  // init or an update and a default value was not provided. The type is 
  // expected to set 'data' to some value it feels is an appropriate default.
  virtual void resolveMissingData(String name, SourceDataEditor* editor) = 0;

  // Returns a Rect where inline value stuff can be placed.
  Rect getInlineBounds(UI& ui, const UpdateParams& params) const
  {
    f32 x = 
      params.editor.name_column_width + params.skin.row.name_value_spacing;
    f32 y = params.pos.y;
    f32 w = ui.getWidth() - x - params.skin.row.right_padding;
    f32 h = params.skin.row.height;

    return Rect::from(x, y, w, h);
  }
};

/* ============================================================================
 *  A helper for managing the state of a text box used to edit some part 
 *  of SourceData.
 */
struct DatumTextBox
{
  enum class Part
  {
    Name,
    Value,
    Type,
  };  

  enum 
  {
    c_BufferSize = 255,
  };

  u8 buffer[c_BufferSize];
  s32 buffer_len = 0;

  ui::TextFieldState state;

  b8 init(
      UI& ui, 
      SourceData* data, 
      Part part,
      const DatumState::InitParams& params)
  {
    state.edit.setBuffer({buffer, &buffer_len, c_BufferSize});

    String val;

    switch (part)
    {
    case Part::Name:
      val = data->name;
      break;
    case Part::Value:
      val = data->val.str;
      break;
    case Part::Type:
      val = data->type;
      break;
    }

    if (data->val.str.len > c_BufferSize)
    {
      // TODO(sushi) fix this somehow.
      WARN("data ", data->name, " is too long to fit in a "
           "text box (", data->val.str.len, " > ", c_BufferSize, ")\n");
    }

    if (notnil(val))
    {
      mem::copy(buffer, val.ptr, min<u64>(val.len, c_BufferSize));
      buffer_len = val.len;
    }

    return true;
  }

  b8 update(
    UI& ui,
    const DatumState::UpdateParams& params,
    Rect bounds,
    Part part,
    SourceData* data,
    const TextFieldSkin& skin)
  {
    return ui.putTextField(
      ui.generateIdFromPointer(this), 
      bounds,
      &state,
      skin);
  }
};

/* ============================================================================
 */
struct ValueState : DatumState
{
  DatumTextBox textbox;

  /* --------------------------------------------------------------------------
   */
  b8 datum_init(UI& ui, const InitParams& params) override
  {
    if (!textbox.init(ui, data, DatumTextBox::Part::Value, params))
      return false;

    return true;
  }

  /* --------------------------------------------------------------------------
   */
  void datum_deinit(UI& ui) override
  {
 
  }

  /* --------------------------------------------------------------------------
   */
  f32 datum_update(UI& ui, const UpdateParams& params) override
  {
    const f32 text_field_vertical_padding = 2.f;
    const f32 text_field_height = 
      params.skin.row.height - 2.f * text_field_vertical_padding;

    auto inline_pos = 
      vec2f(
        params.editor.name_column_width + params.skin.row.name_value_spacing, 
        params.pos.y + text_field_vertical_padding);

    auto inline_size = vec2f(
      ui.getWidth() - params.editor.name_column_width - 5.f, 
      text_field_height);

    auto bounds = Rect::from(inline_pos, inline_size);

    textbox.update(
      ui, 
      params, 
      bounds, 
      DatumTextBox::Part::Value,
      data, 
      params.skin.text_field);

    return params.skin.row.height;
  }

  /* --------------------------------------------------------------------------
   */
  void resolveMissingData(String name, SourceDataEditor* editor) override
  {
    // Resolve to empty field.
    data = editor->sfile->allocateSourceData();
    data->name = name;
  }
};

/* ============================================================================
 */
struct Vec2State : DatumState
{
  DatumTextBox x_box;
  DatumTextBox y_box;

  /* --------------------------------------------------------------------------
   */
  b8 datum_init(UI& ui, const InitParams& params) override
  {
    x_box.init(ui, data->children[0], DatumTextBox::Part::Value, params);
    y_box.init(ui, data->children[1], DatumTextBox::Part::Value, params);

    return true;
  }

  /* --------------------------------------------------------------------------
   */
  void datum_deinit(UI& ui) override
  {
  }

  /* --------------------------------------------------------------------------
   */
  f32 datum_update(UI& ui, const UpdateParams& params) override
  {
    const SourceDataEditorVectorSkin& skin = params.skin.vec2_data;

    Rect bounds = getInlineBounds(ui, params);

    const f32 text_field_vertical_padding = 2.f;
    const f32 text_field_height = bounds.h - 2.f * text_field_vertical_padding;
    const f32 text_field_y = bounds.y + text_field_vertical_padding;

    f32 x = bounds.x;

    const gfx::Font& font = *params.skin.text.font;

    ui::TextSkin comp_name_skin = params.skin.text;
    comp_name_skin.align = {0.f, 0.5f};

    x += 
      ui.putText({x, bounds.y, 999.f, bounds.h}, "x"_str, comp_name_skin).x;
    x += skin.comp_name_spacing;

    Rect field_bounds = {};
    field_bounds.x = x;
    field_bounds.y = text_field_y;
    field_bounds.w = skin.min_comp_width;
    field_bounds.h = text_field_height;

    x_box.update(
      ui, 
      params, 
      field_bounds,
      DatumTextBox::Part::Value,
      data,
      params.skin.text_field);

    x += field_bounds.w + skin.comp_spacing;

    x +=
      ui.putText({x, bounds.y, 999.f, bounds.h}, "y"_str, comp_name_skin).x;
    x += skin.comp_name_spacing;

    field_bounds.x = x;

    y_box.update(
      ui,
      params, 
      field_bounds, 
      DatumTextBox::Part::Value, 
      data, 
      params.skin.text_field);

    return bounds.h;
  }

  /* --------------------------------------------------------------------------
   */
  void resolveMissingData(String name, SourceDataEditor* editor) override
  {
    data = editor->default_data.allocateSourceData();

    data->setObject(name);
    data->setVec2(editor->default_data, {0.f,0.f});
  }
};

/* ============================================================================
 */
struct ObjectState : DatumState
{
  b8 open = false;

  /* --------------------------------------------------------------------------
   */
  b8 datum_init(UI& ui, const InitParams& params) override
  {
    // The top-level datum is always open.
    if (parent == nullptr)
      open = true;

    return obj_init(ui, params);
  }

  virtual b8 obj_init(UI& ui, const InitParams& params) { return true; }

  /* --------------------------------------------------------------------------
   */
  void datum_deinit(UI& ui) override
  {
    obj_deinit(ui);
  }

  virtual void obj_deinit(UI& ui) { }

  /* --------------------------------------------------------------------------
   */
  f32 datum_update(UI& ui, const UpdateParams& params) override
  {
    if (parent != nullptr)
    {
      vec2f text_pos = vec2f(
        params.pos.x + params.skin.row.name_padding,
        getRowTextY(params));

      // TODO(sushi) make a proper texture for editor icons.
      ui.putText(
        Rect::from(text_pos, {100.f, 100.f}), 
        (open? "-"_str : "+ "_str), 
        params.skin.text);

      vec2f hit_area = vec2f(
        params.editor.name_column_width - params.pos.x,
        params.skin.row.height);

      Rect name_bounds = Rect::from(params.pos, hit_area);

      // TODO(sushi) using 'this' as the id is prob fragile, need a better way.
      //             Maybe merging the pointer with a string id.
      FocusFlags focus = 
        ui.putFocusableBounds(ui.generateIdFromPointer(this), name_bounds);

      if (focus.test(FocusFlag::PrimaryReleased))
        open = !open;
    }

    f32 height = obj_update(ui, params);

    return height;
  }

  virtual f32 obj_update(UI& ui, const UpdateParams& params) { return 0.f; }

  /* --------------------------------------------------------------------------
   */
  virtual b8 embedInParent() const { return false; }

  /* --------------------------------------------------------------------------
   */
  virtual b8 parentIsOpen() const { return true; }

  /* --------------------------------------------------------------------------
   */
  f32 getNameXOffset() const override
  {
    return 12.f;
  }

  /* --------------------------------------------------------------------------
   */
  void resolveMissingData(String name, SourceDataEditor* editor) override
  {
    data = editor->default_data.allocateSourceData();
    data->children.init();
    data->name = name;
  }
};  

$ local putTypeDatumState
$ local putDatumState

$ local getTypeDatumType

$ local function getDeclDatumType(decl)
$   if decl:is(ast.TemplateSpecialization) then
$     if "vec2" == decl.specialized_name then
$       return "Vec2State"
$     elseif "ArrayDef" == decl.specialized_name then
$       return "ArrayState<"..decl.template_args[1].name..">"
$     end
$   elseif decl:is(ast.Struct) then
$     return "StructState<"..importer.removeTag(decl.name)..">"
$   elseif decl:is(ast.Enum) then
$     return "EnumState<"..importer.removeTag(decl.name)..">"
$   elseif decl:is(ast.TypedefDecl) then
$     return (getTypeDatumType(decl.subtype))
$   end
$   
$   return "ValueState"
$ end

$ getTypeDatumType = function(type)
$   if type.name == "String" then
$     return "ValueState"
$   end
$
$   type = type:getDesugared()
$   if type:is(ast.Builtin) then
$     return "ValueState"
$   end
$
$   if type:is(ast.TagType) then
$     return (getDeclDatumType(type:getDecl()))
$   elseif type:is(ast.TypedefType) then
$     return (getDeclDatumType(type.decl))
$   end
$   
$   return "ValueState"
$ end

$ -- * ------------------------------------------------------------------------

template<typename T>
struct StructState;

$ local function putStructState(name, decl)
$   local function eachField(f)
$     for field,i in decl:eachFieldWithIndex() do
$       if not field.metadata.hidden then
$         f(field, i)
$       end
$     end
$   end
$  
$   eachField(function(field)
$     putTypeDatumState(field.type)
$   end)

template<>
struct StructState<$(name)> : ObjectState
{

$ eachField(function(field, i)
  $(getTypeDatumType(field.type)) member$(i);
$ end)

  /* --------------------------------------------------------------------------
   */
  b8 obj_init(UI& ui, const InitParams& params) override
  {
$ eachField(function(field, i)
    SourceData* member$(i)_data = 
      params.data != nullptr
      ? params.data->findChildByName("$(field.name)"_str) 
      : nullptr;

    InitParams member$(i)_params = 
    {
      .parent = this,
      .data = member$(i)_data,
      .editor = params.editor,
      .name = "$(field.name)"_str,
      .default_data = nil,
    };

    member$(i).init(ui, member$(i)_params);
$ end)

    return true;
  }

  /* --------------------------------------------------------------------------
   */
  f32 obj_update(UI& ui, const UpdateParams& params) override
  {
    f32 y = parent != nullptr? params.skin.row.height : 0.f;
    const f32 x_offset = parent == nullptr? 0.f : params.skin.children_indent;

    u32 datum_idx = *params.datum_idx + 1;

    if (open)
    {
$ eachField(function(field, i)
      UpdateParams member$(i)_params = 
      {
        .name = "$(field.name)"_str,
        .default_data = nil,
        .pos = params.pos + vec2f(x_offset, y),
        .skin = params.skin,
        .editor = params.editor,
        .datum_idx = &datum_idx,
      };

      y += member$(i).update(ui, member$(i)_params);
$ end)
    }

    return y;
  }
};
$ end

$ -- * ------------------------------------------------------------------------

template<typename T>
struct EnumState;

$ local function putEnumDatumState(name, decl)

$   local elem_count = 0
$   local elem_char_count = 0
$   for elem in decl.elems:each() do
$     if not elem.metadata.hidden then
$       elem_char_count = elem_char_count + #elem.name
$       elem_count = elem_count + 1
$     end
$   end
/* ============================================================================
 */
template<>
struct EnumState<$(name)> : DatumState
{
  f32 datum_update(UI& ui, const UpdateParams& params) override
  {
    Rect bounds = getInlineBounds(ui, params);

    const f32 button_height = 14.f;
    const f32 dropdown_height = $(elem_count - 1) * button_height;

    f32 y = 0.f;
    if (ui.beginDropDown(
          "enum_drop_down"_fid, 
          bounds,
          dropdown_height,
          data->val.str,
          params.skin.dropdown))
    {
      ui.putQuad(ui.getBounds(), 0x222222ff);

      b8 set = false;
$ for elem in decl.elems:each() do
      if (!set && data->val.str != "$(elem.name)"_str)
      {
        if (ui.putButton(
              "$(elem.name)_button"_fid, 
              Rect::from(0.f, y, ui.getWidth(), button_height),
              "$(elem.name)"_str,
              params.skin.button))
        {
          data->val.str = "$(elem.name)"_str;
          set = true;
          ui.closePopup();
        }

        y += button_height;
      }
$ end

      ui.endDropDown();
    }

    return params.skin.row.height;
  }

  void resolveMissingData(String name, SourceDataEditor* editor) override
  {
    data = editor->default_data.allocateSourceData();
    data->name = name;
  }
};
$ end

$ -- * ------------------------------------------------------------------------

template<typename T>
struct ArrayState;

$ local function putArrayState(name, decl)
$   local subtype = decl.template_args[1]
$   putTypeDatumState(subtype)
/* ============================================================================
 */
template<>
struct ArrayState<$(subtype.name)> : ObjectState
{
  Array<$(getTypeDatumType(subtype))> arr;

  b8 obj_init(UI& ui, const InitParams& params) override
  {
    if (!arr.init(data->children.len()))
      return false;

    io::SmallBuffer<8> idx_name;
    for (s32 i = 0; i < data->children.len(); ++i)
    {
      idx_name.clear();
      io::format(&idx_name, i);
      auto* sub = arr.push();

      InitParams sub_params = params;
      sub_params.parent = this;
      sub_params.data = data->children[i];
      sub_params.name = idx_name.asStr();

      if (!sub->init(ui, sub_params))
        return ERROR("failed to initialize array element ", i, "\n");
    }
    
    return true;
  }

  f32 obj_update(UI& ui, const UpdateParams& params) override
  {
    u32 datum_idx = *params.datum_idx + 1;

    f32 y = parent != nullptr? params.skin.row.height : 0.f;
    const f32 indent = params.skin.children_indent;

    if (open)
    {
      io::SmallBuffer<8> idx_name;
      for (s32 i = 0; i < arr.len(); ++i)
      {
        idx_name.clear();
        io::format(&idx_name, i);

        UpdateParams sub_params = params;
        sub_params.name = idx_name.asStr();
        sub_params.pos += vec2f(indent, y);

        y += arr[i].update(ui, sub_params);
      }
    }

    return y;
  }
};
$ end

$ -- * ------------------------------------------------------------------------

$ local function putTemplateSpecializationState(name, decl)
$   local spec = decl.specialized_name
$   
$   if "ArrayDef" == spec then
$     return (putArrayState(name, decl))
$   end
$ end

$ -- * ------------------------------------------------------------------------

$ local function putRecordDatumState(name, decl)
$   if decl:is(ast.TemplateSpecialization) then
$     return (putTemplateSpecializationState(name, decl))
$   elseif decl:is(ast.Struct) and decl.is_complete then
$     return (putStructState(name, decl))
$   end
$ end

$ -- * ------------------------------------------------------------------------

$ putDatumState = function(decl)
$   if placed[decl.name] then return end
$  
$   placed[decl.name] = decl
$  
$   if decl:is(ast.TagDecl) then
$     if decl:is(ast.Record) then
$       putRecordDatumState(importer.removeTag(decl.name), decl)
$     elseif decl:is(ast.Enum) then
$       putEnumDatumState(importer.removeTag(decl.name), decl)
$     end
$   elseif decl:is(ast.TypedefDecl) then
$     putTypeDatumState(decl.subtype)
$   end
$ end

$ -- * ------------------------------------------------------------------------

$ putTypeDatumState = function(type)
$   type = type:getDesugared()
$   -- print(type:tostring())
$   if type:is(ast.TagType) then
$     return (putDatumState(type:getDecl()))
$   elseif type:is(ast.TypedefType) then
$     return (putDatumState(type.decl))
$   end
$ end

$ -- * ------------------------------------------------------------------------

$ importer:eachDecl(function(name, decl)
$   putDatumState(decl)
$ end)

/* ----------------------------------------------------------------------------
 */
b8 SourceDataEditor::init(UI& ui)
{
  if (!datum_allocator.init())
    return ERROR("failed to initialize datum allocator\n");

  default_data.init();

  return true;
}

/* ----------------------------------------------------------------------------
 */
void SourceDataEditor::setSourceData(
    UI& ui, 
    SourceData* sdata, 
    SourceDataFile* sfile, 
    u64 type_id)
{
  this->sdata = sdata;
  this->sfile = sfile;
  this->type_id = type_id;

  if (current_datum != nullptr)
  {
    current_datum->deinit(ui);
    mem::stl_allocator.free(current_datum);
    current_datum = nullptr;
  }

  switch (type_id)
  {
$ for k,v in pairs(placed) do
$   local datum_type = getDeclDatumType(v)
  case "$(k)"_hashed:
    {
      current_datum = mem::stl_allocator.construct<$(datum_type)>();
      
      DatumState::InitParams params = 
      {
        .parent = nullptr,
        .data = sdata,
        .editor = this,

        .name = nil,
        .default_data = nil,
      };

      current_datum->init(ui, params);
    }
    break;
$ end
  }
}

/* ----------------------------------------------------------------------------
 */
void SourceDataEditor::update(
    UI& ui,
    Rect bounds,
    const SourceDataEditorSkinDef& skin)
{
  if (current_datum)
  {
    Rect content_bounds = bounds.contracted(skin.padding);

    ui.beginPanel("source_data_editor"_fid, bounds);
    ui.beginScrollGroup("hello"_fid, content_bounds, skin.scroll_bar);

    u32 datum_idx = 0;

    DatumState::UpdateParams params = 
    {
      .name = nil,
      .default_data = nil,
      .pos = {0.f,0.f},
      .skin = skin,
      .editor = *this,
      .datum_idx = &datum_idx,
    };

    f32 height = current_datum->update(ui, params);
    
    name_column_width = max(max_name_extent, skin.row.min_name_width);
    max_name_extent = 0.f;

    ui.endScrollGroup(skin.scroll_bar);
    ui.beginCmdFrontInjection();
    ui.putQuad(ui.getBounds(), skin.bg_color);
    ui.endCmdFrontInjection();
    ui.endPanel();

  }
}
