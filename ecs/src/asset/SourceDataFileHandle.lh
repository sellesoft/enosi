/*
 *  Ref counted handle to a SourceDataFile.
 *  
 *  These are retrieved from the SourceDataFileReg.
 *
 *  TODO(sushi) remove this as we don't really use ref counting anymore.
 */

$ local cmn = require "common"

#include "iro/Common.h"
#include "iro/traits/Nil.h"
#include "assert.h"

@@lpp.import "RefCounting.lh"

struct SourceDataFileReg;
struct SourceDataFile;

/* ============================================================================
 *  Header of SourceDataFiles allocated by the SourceDataFileReg. Handles
 *  point to this.
 */
struct SourceDataFileHeader
{
  // Pointer to registry so we may automatically clean this up when we find
  // no more refs exist.
  SourceDataFileReg* reg = nullptr;

  // Ref count to this SourceDataFile.
  RefCounter rc = {};
  
  SourceDataFile* getFile() const
  {
    return (SourceDataFile*)(this + 1);
  }
};

/* ============================================================================
 */
struct SourceDataFileHandle
{
  SourceDataFileHandle() {}
  ~SourceDataFileHandle() 
  { 
    // if (header != nullptr)
    //   release();
  }

  SourceDataFileHandle(const SourceDataFileHandle& rhs)
  {
    if (header != nullptr)
      release();
    header = rhs.header;
    if (header)
      header->rc.addRef();
  }

  SourceDataFileHandle& operator =(const SourceDataFileHandle& rhs)
  {
    if (header != nullptr)
      release();
    header = rhs.header;
    if (header != nullptr)
      header->rc.addRef();
    return *this;
  }

  void release();

  static SourceDataFileHandle invalid() { return {}; }

  SourceDataFile* getFile() const 
    { return header? header->getFile() : nullptr; }

  // For use in NilValue.
  b8 isValid() const { return header != nullptr; }

private:
  
  // TODO(sushi) we dont need to store this why did i do this?
  //             regardless, ref counting is out of style, so this whole header
  //             thing will probably be removed.
  SourceDataFileHeader* header = nullptr;

  // Only the registry may create handles.
  friend SourceDataFileReg;

  SourceDataFileHandle(SourceDataFileHeader* header) : header(header) {}
};

