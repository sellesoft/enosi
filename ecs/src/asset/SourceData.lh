/*
 *  Internal representation of our source data format.
 */

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/containers/Array.h"
#include "iro/containers/AVL.h"
#include "iro/io/IO.h"

using namespace iro;

/* ============================================================================
 */
struct SourceData
{
  // TODO(sushi) maybe attach a source location to these
  //             so we can give exact locations when needed?
  //             Or set up SourceDataFile to be able to take 
  //             some SourceData and translate it into a source loc.

  String name;

  struct Value
  {
    enum class Kind : u8
    {
      String,
      Number,
    };

    String str = nil;
    Kind kind = Kind::String;
  };

  Value val = {};
  String type = nil;
  Array<SourceData*> children = nil;

  SourceData() {}

  /* --------------------------------------------------------------------------
   */
  b8 hasStringValue() const
  {
    return notnil(val.str) && val.kind == Value::Kind::String;
  }

  /* --------------------------------------------------------------------------
   */
  b8 hasNumberValue() const
  {
    return notnil(val.str) && val.kind == Value::Kind::Number;
  }

  /* --------------------------------------------------------------------------
   */
  b8 hasObjectData() const
  {
    return notnil(children);
  }

  /* --------------------------------------------------------------------------
   */
  b8 hasChildren() const
  {
    return hasObjectData() && children.len() != 0;
  }

  /* --------------------------------------------------------------------------
   */
  void destroy()
  {
    children.destroy();
  }

  /* --------------------------------------------------------------------------
   */
  const SourceData* findChildByName(String name) const
  {
    for (const SourceData* child : children)
    {
      if (child->name == name)
        return child;
    }
    return nullptr;
  }

  /* --------------------------------------------------------------------------
   */
  SourceData* findChildByName(String name)
  {
    return (SourceData*)((const SourceData*)this)->findChildByName(name);
  } 

  void dump(u32 depth = 0) const;
  void dump(io::IO* out, u32 depth = 0) const;
};
