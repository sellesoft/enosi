/*
 *  Internal representation of our source data format.
 */

#include "iro/Common.h"
#include "iro/Unicode.h"
#include "iro/containers/Array.h"
#include "iro/containers/AVL.h"
#include "iro/io/IO.h"

using namespace iro;

struct SourceData;

struct SourceDataValue
{
  enum class Kind
  {
    String,
    Number,
  };

  Kind kind;

  String val = nil;
};

struct SourceDataObject
{
  String type = nil;
  Array<SourceData*> children;

  b8 init()
  {
    if (!children.init())
      return false;
    return true;
  }

  void deinit()
  {
    children.destroy();
  }

  const SourceData* findChildByName(String name) const;
  SourceData* findChildByName(String name) 
  { 
    return (SourceData*)
      ((const SourceDataObject*)this)->findChildByName(name); 
  }
};

struct SourceData
{
  String name;

  enum class Kind
  {
    Invalid,
    Value,
    Object,
  };

  Kind kind;

  b8 isValue() const { return kind == Kind::Value; }
  b8 isObject() const { return kind == Kind::Object; }

  SourceDataValue* getAsValue()
  {
    assert(isValue());
    return &data.value;
  }

  const SourceDataValue* getAsValue() const
  {
    assert(isValue());
    return &data.value;
  }

  SourceDataObject* getAsObject()
  {
    assert(isObject());
    return &data.object;
  }

  const SourceDataObject* getAsObject() const
  {
    assert(isObject());
    return &data.object;
  }

  SourceDataValue* setAsValue()
  {
    if (isValue())
      return &data.value;

    if (isObject())
      data.object.deinit();

    kind = Kind::Value;
    return new (&data.value) SourceDataValue;
  }

  SourceDataObject* setAsObject()
  {
    if (isObject())
      return &data.object;

    kind = Kind::Object;
    new (&data.object) SourceDataObject;
    data.object.init();
    return &data.object;
  }

  SourceData() : kind(Kind::Invalid), data({}) {}

  void dump(u32 depth = 0) const;
  void dump(io::IO* out, u32 depth = 0) const;

private:

  union
  {
    SourceDataValue value;
    SourceDataObject object;
  } data;
};
