$ local cmn = require "common"
$ local Schema = require "asset.Schema"
$ local glob = require "Glob"
$ local Processor = require "reflect.Processor"
$ local ast = require "reflect.AST"
$ local List = require "List"
$ local util = require "Util"
$ local component = require "game.component.Component"
$ local metadata = require "reflect.Metadata"
$ local Defs = require "asset.GatherDefs"


#include "iro/Logger.h"
#include "iro/containers/BitArray.h"

#include "stdlib.h"

using namespace iro;

@cmn.defFileLogger(packing, Info)

struct Renderer;

$ local defs = Defs.gather()
@defs.imported:get

@@lpp.import "asset/Packing.lh"
@@lpp.import "asset/AssetMgr.lh"
@@lpp.import "asset/ArrayDef.lh"
@@lpp.import "asset/SourceData.lh"
@@lpp.import "asset/SourceDataFile.lh"
@@lpp.import "asset/SourceDataParser.lh"

@@lpp.import "graphics/CompiledTexture.lh"

template<typename T>
b8 packSourceDataIntoEnum(const SourceData& data, T* out);

b8 packComponent(const SourceData& data, Component** out, PackContext& ctx);

/* ----------------------------------------------------------------------------
 */
b8 packTextureRef(
    const SourceData& data, 
    gfx::TextureRef* out, 
    PackContext& ctx)
{
  if (!data.hasStringValue())
    return ERROR("expected a string value to pack TextureRef\n");

  out->name = data.val.str.allocateCopy(&ctx.packed->buffer);

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 destroyCompiledTexture(gfx::CompiledTexture** data)
{
  *data = nullptr;
  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packTypedPtr(const SourceData& data, TypedPtr<T>* out, PackContext& ctx);

/* ----------------------------------------------------------------------------
 */
template<>
b8 packTypedPtr<Component>(
    const SourceData& data,
    TypedPtr<Component>* out,
    PackContext& ctx)
{
  if (isnil(data.type))
    return ERROR("packTypedPtr passed untyped data\n");

  out->type = data.type.allocateCopy(&ctx.packed->buffer);
  if (!packComponent(data, &out->ptr, ctx))
    return false;

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packArray(
    const SourceData& data, 
    ArrayDef<T>* out, 
    PackContext& ctx)
{
  out->init(data.children.len(), &ctx.packed->buffer);

  for (u32 i = 0; i < data.children.len(); ++i)
  {
    const SourceData* child = data.children[i];
    if (notnil(child->name))
      return ERROR("arrays cannot contain named elements\n");

    if (!packSourceDataIntoType<T>(*child, &(*out)[i], ctx))
      return false;
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packArray(
    const SourceData& data,
    ArrayDef<TypedPtr<T>>* out,
    PackContext& ctx)
{
  out->init(data.children.len(), &ctx.packed->buffer);

  for (u32 i = 0; i < data.children.len(); ++i)
  {
    const SourceData* child = data.children[i];
    if (notnil(child->name))
      return ERROR("arrays cannot contain named elements\n");

    if (!packTypedPtr(*child, &(*out)[i], ctx))
      return false;
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<>
b8 packArray<gfx::TextureRef>(
    const SourceData& data,
    ArrayDef<gfx::TextureRef>* out,
    PackContext& ctx)
{
  out->init(data.children.len(), &ctx.packed->buffer);

  for (u32 i = 0; i < data.children.len(); ++i)
  {
    const SourceData* child = data.children[i];
    if (notnil(child->name))
      return ERROR("arrays cannot contain named elements\n");

    if (!packTextureRef(*child, &(*out)[i], ctx))
      return false;
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<>
b8 packArray<Component*>(
    const SourceData& data,
    ArrayDef<Component*>* out,
    PackContext& ctx)
{
  out->init(data.children.len(), &ctx.packed->buffer);

  for (u32 i = 0; i < data.children.len(); ++i)
  {
    const SourceData* child = data.children[i];
    if (notnil(child->name))
      return ERROR("arrays cannot contain named elements\n");

    if (!packComponent(*child, &(*out)[i], ctx))
      return false;
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 destroyArray(Array<T>* data)
{
  if (isnil(*data))
    return true;

  for (T& v : *data)
    destroyPackedData(&v);

  data->destroy();
  return true;
}

/* ----------------------------------------------------------------------------
 */
template<>
b8 destroyArray<const SourceData*>(Array<const SourceData*>* data)
{
  data->destroy();
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 packString(const SourceData& data, String* out, PackContext& ctx)
{
  if (!data.hasStringValue())
    return ERROR("expected a string\n");

  *out = data.val.str.allocateCopy(&ctx.packed->buffer);
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 destroyString(String* s)
{
  if (notnil(*s))
    mem::stl_allocator.free(s->ptr);
  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packNumber(const SourceData& data, T* out)
{
  if (!data.hasNumberValue())
    return ERROR("expected a number\n");

  *out = strtof((char*)data.val.str.ptr, nullptr);
  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packVec2(const SourceData& data, T* out)
{
  // TODO(sushi) nameless initialization

  if (!data.hasChildren())
    return ERROR("expected an object to pack vec2\n");
  
  if (data.children.len() != 2)
    return ERROR("too many children in vec2 source data\n");

  if (isnil(data.children[0]->name))
  {
    SourceData* x = data.children[0];
    SourceData* y = data.children[1];

    // Must be nameless initialization.
    if (!x->hasNumberValue())
      return ERROR("vec2 members must be numbers\n");

    out->x = strtof((char*)x->val.str.ptr, nullptr);

    if (!y->hasNumberValue())
      return ERROR("vec2 members must be numbers\n");

    out->y = strtof((char*)y->val.str.ptr, nullptr);
  }
  else
  {
    for (const SourceData* child : data.children)
    {
      if (!child->hasNumberValue())
        return ERROR("vec2 members can only be numbers\n");

      switch (child->name.hash())
      {
      case "x"_hashed:
        out->x = strtof((char*)child->val.str.ptr, nullptr);
        break;
      case "y"_hashed:
        out->y = strtof((char*)child->val.str.ptr, nullptr);
        break;
      default:
        return ERROR("no member named ", child->name, " in vec2\n");
      }
    }
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 packColor(const SourceData& data, Color* out)
{
  if (!data.hasChildren())
    return ERROR("expected an object to pack Color\n");

  // TODO(sushi) nameless initialization

  for (const SourceData* child : data.children)
  {
    if (!child->hasNumberValue())
      return ERROR("vec2 members can only be numbers\n");

    switch (child->name.hash())
    {
    case "r"_hashed:
      out->r = strtof((char*)child->val.str.ptr, nullptr);
      break;
    case "g"_hashed:
      out->g = strtof((char*)child->val.str.ptr, nullptr);
      break;
    case "b"_hashed:
      out->b = strtof((char*)child->val.str.ptr, nullptr);
      break;
    case "a"_hashed:
      out->a = strtof((char*)child->val.str.ptr, nullptr);
      break;
    default:
      return ERROR("no member named ", child->name, " in vec2\n");
    }
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 packSourceDataPointer(const SourceData& data, const SourceData** out)
{
  *out = &data;
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 packAssetRef(
    const SourceData& data, 
    AssetRef* out, 
    String type,
    PackContext& ctx)
{
  if (!data.hasStringValue())
    return @log.error("expected a string to pack asset ref\n");

  out->name = data.val.str;
  return true;
}

$ -- * ------------------------------------------------------------------------

$ local putEnumPacker = function(name, decl)
$   local typename = Defs.removeTag(decl.name)
/* ----------------------------------------------------------------------------
 */
template<>
b8 packSourceDataIntoEnum(const SourceData& data, $(typename)* out)
{
  if (!data.hasStringValue())
    return ERROR("expected a string for $(name) enum data\n");

  switch (data.val.str.hash())
  {
$ for elem in decl.elems:each() do
$   if elem.metadata.hidden then
  case "$(elem.name)"_hashed:
    return 
      ERROR("enum value $(typename)::$(elem.name) is marked as hidden\n");
$   else
  case "$(elem.name)"_hashed: *out = $(typename)::$(elem.name); break;
$   end
$ end

  default:
    return ERROR("no element ", data.val.str, " in enum $(name)\n");
  }

  return true;
}
$ end

$ -- * ------------------------------------------------------------------------

$ local putArrayPackCase = function(declname, addrname, type, decl, prereqs)
$   prereqs:push(decl.template_args[1]:getDecl())
    if (!child->hasObjectData())
      return ERROR("expected an object for array field $(addrname)\n");
    if (!packArray(
          *child,
          &$(addrname), 
          ctx))
      return ERROR("failed to pack array data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putStringPackCase = function(declname, addrname, type, prereqs)
    if (!packString(*child, &$(addrname), ctx))
      return ERROR("failed to pack string data for field $(addrname)");
$ end

$ -- * ------------------------------------------------------------------------

$ local putNumberPackCase = function(declname, addrname, type, prereqs)
    if (!packNumber(*child, &$(addrname)))
      return ERROR("failed to pack number data for field $(addrname)");
$ end

$ -- * ------------------------------------------------------------------------

$ local putStructPackCase = function(declname, addrname, type, prereqs)
$   prereqs:push(type:getDecl())
    if (!packSourceDataIntoType(
          *child, 
          &$(addrname), 
          ctx))
      return ERROR("failed to pack struct data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putVec2PackCase = function(declname, addrname, type, prereqs)
    if (!packVec2(*child, &$(addrname)))
      return ERROR("failed to pack vec2 data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putColorPackCase = function(declname, addrname, type, prereqs)
    if (!packColor(*child, &$(addrname)))
      return ERROR("failed to Color data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putEnumArrayPackCase = function(declname, addrname, type, prereqs)
    if (!packSourceDataIntoEnumArray(*child, &$(addrname), ctx))
      return ERROR("failed to pack enum array data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putEnumPackCase = function(declname, addrname, type, prereqs)
$   prereqs:push(type:getDecl())
    if (!packSourceDataIntoEnum(*child, &$(addrname)))
      return ERROR(
        "failed to pack $(declname) data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putTextureRefPackCase = function(declname, addrname)
    if (!packTextureRef( *child, &$(addrname), ctx))
      return ERROR(
        "failed to pack $(declname) data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putAssetRefPackCase = function(declname, addrname, decl)
$   local asset_type = decl.template_args[1]:getDesugared()
$   local asset_typename = Defs.removeTag(asset_type.name)
  if (!packAssetRef(*child, &$(addrname), "$(asset_typename)"_str, ctx))
    return ERROR(
      "failed to pack asset ref to $(declname) for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putPackCase = function(declname, addrname, type, prereqs)
$   local TRef = defs.p.decls.map["struct Ref"]
$   if type.name == "String" then
$     return (putStringPackCase(declname, addrname, type, prereqs))
$   end
$  
$   type = type:getDesugared()
$   if type:is(ast.BuiltinType) then
$     return (putNumberPackCase(declname, addrname, type, prereqs))
$   end
$
$   if type:is(ast.TagType) then
$     local decl = type:getDecl()
$     if decl:is(ast.Record) then 
$       if decl:isDerivedFrom(TRef) then
  ctx.packed->recordRef("$(Defs.removeTag(decl.name))"_str, &$(addrname));
$       end
$     end
$     if decl:is(ast.TemplateSpecialization) then
$       if decl.specialized_name == "Array" then
$         print(declname)
$         error "Arrays are not allowed in defs! use ArrayDef instead"
$       elseif decl.specialized_name == "ArrayDef" then
$         return (putArrayPackCase(declname, addrname, type, decl, prereqs))
$       elseif decl.specialized_name == "vec2" then
$         return (putVec2PackCase(declname, addrname, type, prereqs))
$       elseif decl.specialized_name == "Flags" then
$         -- TODO(sushi) handle Flags
$       elseif decl.specialized_name == "OffsetPtr" or 
$              decl.specialized_name == "OffsetSlice" then
$         -- TODO(sushi) fix includes or implement better filtering so things
$         --             using these don't show up here
$       elseif decl.specialized_name == "TypedAssetRef" or 
$              decl.specialized_name == "TypedSourceAssetRef" then
$         return (putAssetRefPackCase(declname, addrname, decl, prereqs))
$       elseif decl.specialized_name == "EnumArray" then
$         return (putEnumArrayPackCase(declname, addrname, type, prereqs))
$       else
$         error("unhandled specialized template "..decl.specialized_name)
$       end
$     elseif decl:is(ast.Struct) then
$       if Defs.removeTag(decl.name) == "Color" then
$         return (putColorPackCase(declname, addrname, type, prereqs))
$       elseif Defs.removeTag(decl.name) == "gfx::TextureRef" then
$         return (putTextureRefPackCase(declname, addrname))
$       else
$         return (putStructPackCase(declname, addrname, type, prereqs))
$       end
$     elseif decl:is(ast.Enum) then
$       return (putEnumPackCase(declname, addrname, type, prereqs))
$     end
$   elseif type:is(ast.PointerType) then
$     type = type.subtype
$     if type.name == "gfx::CompiledTexture" then
$       return (putCompiledTexturePackCase(declname, addrname, type, prereqs))
$     end
$   end
$ end

$ -- * ------------------------------------------------------------------------

$ local putEnumArrayPacker = function(name, decl, prereqs)
$   local typename = Defs.removeTag(decl.name)
$   local enum_type = decl.template_args[1].decl
$   local enum_typename = Defs.removeTag(enum_type.name)
$   local elem_decl = decl.template_args[2].decl
$   if not elem_decl then 
$     io.write(name, " has element with no decl\n")
$     return 
$   end
$   local elem_type = elem_decl.type
/* ----------------------------------------------------------------------------
 */
b8 packSourceDataIntoEnumArray(
    const SourceData& data, 
    $(typename)* out,
    PackContext& ctx)
{
  using TSelf = $(name);
  using TEnum = $(enum_type.name);
  using TElem = $(elem_type.name);

  if (!data.hasObjectData())
    return ERROR("expected object data for enum array $(name)\n");

  if (data.children.isEmpty())
  {
    mem::zero(out, sizeof(TSelf));
    return true;
  }

  for (const SourceData* child : data.children)
  {
    switch (child->name.hash())
    {
$ for elem in enum_type.elems:each() do
    case "$(elem.name)"_hashed:
$     putPackCase(
$       decl.name, 
$       "(*out)[TEnum::"..elem.name.."]", 
$       elem_type, 
$       prereqs)
      break;
$ end
    default:
      return ERROR(
        "no element named ", child->name, " in $(enum_type.name)\n");
    }
  }

  return true;
}
$ end

$ -- * ------------------------------------------------------------------------

$ local putStructPacker = function(name, decl, prereqs)
/* ----------------------------------------------------------------------------
 */
template<>
b8 packSourceDataIntoType<$(name)>(
    const SourceData& data, 
    $(name)* out,
    PackContext& ctx)
{
  if (isnil(data.children))
    return ERROR("expected an object to pack into $(name)\n");

  mem::zero(out, sizeof($(name)));

  if (data.children.isEmpty())
    return true;

  BitArray<$(decl:getFieldCount())> found_fields = {};

  for (const SourceData* child : data.children)
  {
    switch (child->name.hash())
    {
$ for field,i in decl:eachFieldWithIndex() do
    case "$(field.name)"_hashed:
      {
        found_fields.set($(i));
$       putPackCase(decl.name, "out->"..field.name, field.type, prereqs)
      }
      break;
$ end
    default:
      return ERROR("no field named '", child->name, "' in $(name)\n");
    }
  }

$ for field,i in decl:eachFieldWithIndex() do
$   if field.metadata.default then
  if (!found_fields.test($(i)))
  {
    
    // TODO(sushi) this can absolutely be done better, given that we know this 
    //             information at compile time, but I'm just wanting to get 
    //             this working for now. In the future, we should be able to 
    //             determine a constant value for the default data given to 
    //             us and be able to just mem copy it into the member here.
    SourceDataFile file;
    file.init();
    defer { file.deinit(); };

    auto view = io::StringView::from("$(field.metadata.default)"_str);
    SourceDataParser parser;

    parser.init(&file, &view, "$(field.name) default"_str);
    defer { parser.deinit(); };

    SourceData* default_data = file.allocateSourceData();

    if (!parser.parsePossiblyTypedData(default_data))
      return ERROR("failed to parse default value of $(field.name)\n");
    
    // yeah im lazy so what
    SourceData* child = default_data;
$   putPackCase(decl.name, "out->"..field.name, field.type, prereqs)
  }
$   end
$ end
  
  return true;
}
$ end


$ -- * ------------------------------------------------------------------------

$ local placed_packers = 
$ {
$   String = true
$ }
$ local function putPacker(name, decl, prereqs)
$   if not decl or placed_packers[decl.name] then return end
$   if name == "gfx::Renderer" then return end
$   placed_packers[decl.name] = true
$   if decl:is(ast.Struct) then
$     if decl.is_complete then
$       for field in decl:eachFieldWithIndex() do
$         putPacker(field.type.name, field.type:getDecl(), prereqs)
$       end
$       putStructPacker(name, decl, prereqs)
$     end
$   elseif decl:is(ast.TemplateSpecialization) then
$     if decl.specialized_name == "Array" then
$     elseif decl.specialized_name == "ArrayDef" then
$       local elem_type = decl.template_args[1]
$       if not elem_type:is(ast.PointerType) then
$         local elem_decl = decl.template_args[1]:getDecl()
$         putPacker(elem_decl.name, elem_decl, prereqs)
$       end
$     elseif decl.specialized_name == "EnumArray" then
$       putEnumArrayPacker(name, decl, prereqs)
$     end
$   elseif decl:is(ast.Enum) then
$     putEnumPacker(name, decl)
$   end
$ end

$ defs:eachDecl(function(name, decl)
$   local prereqs = List{}
$   if decl:is(ast.Record) then
$     putPacker(name, decl, prereqs)
$   end
$ end)

/* ----------------------------------------------------------------------------
 */
b8 packSourceDataFromType(
    const SourceData& data, 
    PackContext& ctx)
{
  if (isnil(data.type))
    return @log.error("packSourceDataFromType passed untyped data\n");

  switch (data.type.hash())
  {
$ defs:eachDecl(function(name, decl)
$   if decl:is(ast.Struct) and decl.is_complete then
  case "$(name)"_hashed:
    return packSourceDataIntoType<$(name)>(data, ctx);
$   end
$ end)
  }

  return false;
}

/* ----------------------------------------------------------------------------
 *  NOTE(sushi) this is placed after packing structs as if not we will be 
 *              instantiating packSourceDataIntoType on each component type 
 *              before they are defined which is a problem for whatever reason
 *              so awesome man.
 */
b8 packComponent(const SourceData& data, Component** out, PackContext& ctx)
{
  *out = nullptr;

  if (isnil(data.type))
    return ERROR("Component data must be typed\n");

  switch (data.type.hash())
  {
$ for comp in component.components.list:each() do
  case "$(comp.name)"_hashed:
    {
      auto* comp = ctx.packed->buffer.allocateType<$(comp.name)>();
      if (!packSourceDataIntoType(data, comp, ctx))
      {
        // TODO(sushi) it might be more appropriate to call 'destroy' here
        //             as a Component type may contain data that needed to 
        //             be allocated, but atm we aren't set up to be able 
        //             to nicely 'destroy' or 'deinit' things even when they
        //             aren't already init. We need to handle this better 
        //             throughout the code base.
        // mem::stl_allocator.free(comp);
        return false;
      }

      comp->kind = getComponentKind<$(comp.name)>();

      *out = comp;
    }
    break;
$ end
  }

  return true;
}

