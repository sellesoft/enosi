$ local cmn = require "common"
$ local Schema = require "asset.Schema"
$ local glob = require "Glob"
$ local Processor = require "reflect.Processor"
$ local ast = require "reflect.AST"
$ local List = require "List"
$ local util = require "Util"

#include "iro/Logger.h"

#include "stdlib.h"

using namespace iro;

@cmn.defFileLogger(packing, Info)

@@lpp.import "asset/Packing.lh"
@@lpp.import "asset/SourceData.lh"
@@lpp.import "asset/AssetMgr.lh"
@@lpp.import "graphics/CompiledTexture.lh"

struct Renderer;

$$$
local imported = cmn.buffer.new()

local importPattern = function(pattern)
  glob(pattern):each(function(path)
    if path and path:find("%S") then
      imported:put(lpp.import(path))
    end
  end)
end

importPattern "**/*.schema.lh"
importPattern "**/*.comp.lh"

local p = Processor.new(tostring(imported))
p:run()
$$$
@imported:get

$ local removeTypeTag = function(name)
$   return name
$     :gsub("struct ", "")
$     :gsub("union ", "")
$     :gsub("enum ", "")
$ end

template<typename T>
b8 packSourceDataIntoEnum(const SourceData& data, T* out);

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packArray(
    const SourceData& data, 
    Array<T>* out, 
    AssetMgr& assetmgr,
    gfx::Renderer& renderer)
{
  for (const SourceData* child : data.children)
  {
    if (notnil(child->name))
      return ERROR("arrays cannot contain named elements\n");
    
    T* elem = out->push();
    packSourceDataIntoType<T>(*child, elem, assetmgr, renderer);
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<>
b8 packArray<const SourceData*>(
    const SourceData& data, 
    Array<const SourceData*>* out,
    AssetMgr& assetmgr,
    gfx::Renderer& renderer)
{
  for (const SourceData* child : data.children)
  {
    if (notnil(child->name))
      return ERROR("arrays cannot contain named elements\n");

    out->push(child);
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 destroyArray(Array<T>* data)
{
  for (T& v : *data)
    destroyPackedData(&v);

  data->destroy();
  return true;
}

/* ----------------------------------------------------------------------------
 */
template<>
b8 destroyArray<const SourceData*>(Array<const SourceData*>* data)
{
  data->destroy();
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 packString(const SourceData& data, String* out)
{
  if (!data.hasStringValue())
    return ERROR("expected a string\n");

  *out = data.val.str.allocateCopy();
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 destroyString(String* s)
{
  mem::stl_allocator.free(s->ptr);
  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packNumber(const SourceData& data, T* out)
{
  if (!data.hasNumberValue())
    return ERROR("expected a number\n");

  *out = strtof((char*)data.val.str.ptr, nullptr);
  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packVec2(const SourceData& data, T* out)
{
  // TODO(sushi) nameless initialization

  if (!data.hasChildren())
    return ERROR("expected an object to pack vec2\n");

  for (const SourceData* child : data.children)
  {
    if (!child->hasNumberValue())
      return ERROR("vec2 members can only be numbers\n");

    switch (child->name.hash())
    {
    case "x"_hashed:
      out->x = strtof((char*)child->val.str.ptr, nullptr);
      break;
    case "y"_hashed:
      out->y = strtof((char*)child->val.str.ptr, nullptr);
      break;
    default:
      return ERROR("no member named ", child->name, " in vec2\n");
    }
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 packCompiledTexture(
    const SourceData& data, 
    gfx::CompiledTexture** out, 
    AssetMgr& assetmgr,
    gfx::Renderer& renderer)
{
  if (!data.hasStringValue())
    return ERROR("expected a string value to pack gfx::CompiledTexture*");

  *out = 
    gfx::CompiledTexture::load(
      data.val.str,
      assetmgr,
      renderer);

  if (*out == nullptr)
    return ERROR("failed to load compiled texture with name ", 
                 data.val.str, "\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 destroyCompiledTexture(gfx::CompiledTexture** data)
{
  *data = nullptr;
  // (*data)->gfx_texture.destroy();
  return true;
}

$ -- * ------------------------------------------------------------------------

$ local putEnumPacker = function(name, decl)
$   local typename = removeTypeTag(decl.name)
/* ----------------------------------------------------------------------------
 */
template<>
b8 packSourceDataIntoEnum(const SourceData& data, $(typename)* out)
{
  if (!data.hasStringValue())
    return ERROR("expected a string for $(name) enum data\n");

  switch (data.val.str.hash())
  {
$ for elem in decl.elems:each() do
  case "$(elem)"_hashed: *out = $(typename)::$(elem); break;
$ end

  default:
    return ERROR("no element ", data.val.str, " in enum $(name)\n");
  }

  return true;
}
$ end

$ -- * ------------------------------------------------------------------------

$ local putArrayPackCase = function(declname, field, decl, prereqs)
$   prereqs:push(decl.template_args[1]:getDecl())
    out->$(field.name).init();
    if (!child->hasChildren())
      return ERROR("expected an object for array field $(field.name)\n");
    if (!packArray(
          *child,
          &out->$(field.name), 
          assetmgr,
          renderer))
      return ERROR("failed to pack array data for field $(field.name)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putStringPackCase = function(declname, field, prereqs)
    if (!packString(*child, &out->$(field.name)))
      return ERROR("failed to pack string data for field $(field.name)");
$ end

$ -- * ------------------------------------------------------------------------

$ local putNumberPackCase = function(declname, field, prereqs)
    if (!packNumber(*child, &out->$(field.name)))
      return ERROR("failed to pack number data for field $(field.name)");
$ end

$ -- * ------------------------------------------------------------------------

$ local putStructPackCase = function(declname, field, prereqs)
$   prereqs:push(field.type:getDecl())
    if (!packSourceDataIntoType(
          *child, 
          &out->$(field.name), 
          assetmgr,
          renderer))
      return ERROR("failed to pack struct data for field $(field.name)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putVec2PackCase = function(declname, field, prereqs)
    if (!packVec2(*child, &out->$(field.name)))
      return ERROR("failed to pack vec2 data for field $(field.name)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putEnumPackCase = function(declname, field, prereqs)
$   prereqs:push(field.type:getDecl())
    if (!packSourceDataIntoEnum(*child, &out->$(field.name)))
      return ERROR(
        "failed to pack $(declname) data for field $(field.name)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putCompiledTexturePackCase = function(declname, field, prereqs)
    if (!packCompiledTexture(
        *child, 
        &out->$(field.name), 
        assetmgr,
        renderer))
      return ERROR(
        "failed to pack $(declname) data for field $(field.name)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putPackCase = function(declname, field, prereqs)
$   local type = field.type
$   if type.name == "String" then
$     return (putStringPackCase(declname, field, prereqs))
$   end
$   
$   type = type:getDesugared()
$   if type:is(ast.BuiltinType) then
$     return (putNumberPackCase(declname, field, prereqs))
$   end
$
$   if type:is(ast.TagType) then
$     local decl = type:getDecl()
$     if decl:is(ast.TemplateSpecialization) then
$       if decl.specialized_name == "Array" then
$         return (putArrayPackCase(declname, field, decl, prereqs))
$       elseif decl.specialized_name == "vec2" then
$         return (putVec2PackCase(declname, field, prereqs))
$       elseif decl.specialized_name == "Flags" then
$         -- TODO(sushi) handle Flags
$       else
$         error("unhandled specialized template "..decl.specialized_name)
$       end
$     elseif decl:is(ast.Struct) then
$       return (putStructPackCase(declname, field, prereqs))
$     elseif decl:is(ast.Enum) then
$       return (putEnumPackCase(declname, field, prereqs))
$     end
$   elseif type:is(ast.PointerType) then
$     type = type.subtype
$     if type.name == "gfx::CompiledTexture" then
$       return (putCompiledTexturePackCase(declname, field, prereqs))
$     end
$   end
$ end

$ local putStructPacker = function(name, decl, prereqs)
/* ----------------------------------------------------------------------------
 */
template<>
b8 packSourceDataIntoType<$(name)>(
    const SourceData& data, 
    $(name)* out,
    AssetMgr& assetmgr,
    gfx::Renderer& renderer)
{
  if (isnil(data.children))
    return ERROR("expected an object to pack into $(name)\n");

  // TODO(sushi) handle defaulted stuff.
  if (data.children.isEmpty())
  {
    mem::zero(out, sizeof($(name)));
    return true;
  }

  for (const SourceData* child : data.children)
  {
    switch (child->name.hash())
    {
$ for field in decl:eachFieldWithIndex() do
    case "$(field.name)"_hashed:
      {
$     putPackCase(decl.name, field, prereqs)
      }
      break;
$ end
    default:
      return ERROR("no field named '", child->name, "' in $(name)\n");
    }
  }
  
  return true;
}
$ end

$ -- * ------------------------------------------------------------------------

$ local placed_packers = 
$ {
$   String = true
$ }
$ local function putPacker(name, decl, prereqs)
$   if not decl or placed_packers[decl.name] then return end
$   placed_packers[decl.name] = true
$   if decl:is(ast.Struct) then
$     for field in decl:eachFieldWithIndex() do
$       putPacker(field.type.name, field.type:getDecl(), prereqs)
$     end
$     putStructPacker(name, decl, prereqs)
$   elseif decl:is(ast.TemplateSpecialization) then
$     if decl.specialized_name == "Array" then
$       local elem_type = decl.template_args[1]
$       if not elem_type:is(ast.PointerType) then
$         local elem_decl = decl.template_args[1]:getDecl()
$         putPacker(elem_decl.name, elem_decl, prereqs)
$       end
$     end
$   elseif decl:is(ast.Enum) then
$     putEnumPacker(name, decl)
$   end
$ end

$ for decl in p.decls.list:each() do
$   local name = decl.name
$     :gsub("struct ", "")
$     :gsub("union ", "")
$     :gsub("enum ", "")
$   local prereqs = List{}
$   if decl.decl:is(ast.Record) then
$     -- util.dumpValue(decl.decl)
$     putPacker(name, decl.decl, prereqs)
$     placed_packers[decl.name] = true
$   end
$ end

$ -- * ------------------------------------------------------------------------

$ local putStringDestroyCase = function(declname, field, prereqs)
  if (!destroyString(&data->$(field.name)))
    return false;
$ end

$ -- * ------------------------------------------------------------------------

$ local putArrayDestroyCase = function(declname, field, prereqs)
  if (!destroyArray(&data->$(field.name)))
    return false;
$ end

$ -- * ------------------------------------------------------------------------

$ local putCompiledTextureDestroyCase = function(declname, field, prereqs)
  if (!destroyCompiledTexture(&data->$(field.name)))
    return false;
$ end

$ -- * ------------------------------------------------------------------------

$ local putStructDestroyCase = function(declname, field, prereqs)
  if (!destroyPackedData(&data->$(field.name)))
    return false;
$ end

$ -- * ------------------------------------------------------------------------

$ local putDestroyCase = function(declname, field, prereqs)
$   local type = field.type
$   if type.name == "String" then
$     return (putStringDestroyCase(declname, field, prereqs))
$   end
$   
$   type = type:getDesugared()
$
$   if type:is(ast.TagType) then
$     local decl = type:getDecl()
$     if decl:is(ast.TemplateSpecialization) then
$       if decl.specialized_name == "Array" then
$         return (putArrayDestroyCase(declname, field, decl, prereqs))
$       end
$     elseif decl:is(ast.Struct) then
$       return (putStructDestroyCase(declname, field, prereqs))
$     end
$   elseif type:is(ast.PointerType) then
$     type = type.subtype
$     if type.name == "gfx::CompiledTexture" then
$       return (putCompiledTextureDestroyCase(declname, field, prereqs))
$     end
$   end
$ end

$ local putStructDestroyer = function(name, decl, prereqs)
/* ----------------------------------------------------------------------------
 */
template<>
b8 destroyPackedData<$(name)>($(name)* data)
{
$ for field in decl:eachFieldWithIndex() do
$   putDestroyCase(decl.name, field, prereqs)
$ end
  
  return true;
}
$ end

$ -- * ------------------------------------------------------------------------

$ local placed_destroyers = 
$ {
$   String = true
$ }
$ local function putDestroyer(name, decl, prereqs)
$   if not decl or placed_destroyers[decl.name] then return end
$   placed_destroyers[decl.name] = true
$   if decl:is(ast.Struct) then
$     for field in decl:eachFieldWithIndex() do
$       putDestroyer(field.type.name, field.type:getDecl(), prereqs)
$     end
$     putStructDestroyer(name, decl, prereqs)
$   elseif decl:is(ast.TemplateSpecialization) then
$     if decl.specialized_name == "Array" then
$       local elem_type = decl.template_args[1]
$       if not elem_type:is(ast.PointerType) then
$         local elem_decl = decl.template_args[1]:getDecl()
$         putDestroyer(elem_decl.name, elem_decl, prereqs)
$       end
$     end
$   end
$ end

$ for decl in p.decls.list:each() do
$   local name = decl.name
$     :gsub("struct ", "")
$     :gsub("union ", "")
$     :gsub("enum ", "")
$   local prereqs = List{}
$   if decl.decl:is(ast.Record) then
$     putDestroyer(name, decl.decl, prereqs)
$     placed_destroyers[decl.name] = true
$   end
$ end
