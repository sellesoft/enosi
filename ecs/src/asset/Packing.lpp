$ local cmn = require "common"
$ local Schema = require "asset.Schema"
$ local glob = require "Glob"
$ local Processor = require "reflect.Processor"
$ local ast = require "reflect.AST"
$ local List = require "List"
$ local util = require "Util"
$ local metadata = require "reflect.Metadata"

$ do return end

$$$
local importer = require "reflect.Importer"
{
  patterns = 
  {
    "src/**/*.defs.lh",
    "src/**/*.comp.lh",
  },

  filter = function(p, decl)
    if decl.metadata.def then
      return true
    end

    local TComponent = p.processed_clang_objs["struct Component"]
    if TComponent and decl:is(ast.Record) and decl:isDerivedFrom(TComponent)
    then
      return true
    end
  end,
}
$$$
@importer:get

#include "iro/Logger.h"
#include "iro/containers/BitArray.h"

#include "stdlib.h"

using namespace iro;

@cmn.defFileLogger(packing, Info)

struct Renderer;

@@lpp.import "asset/Packing.lh"
@@lpp.import "asset/AssetMgr.lh"
@@lpp.import "asset/ArrayDef.lh"
@@lpp.import "asset/SourceData.lh"
@@lpp.import "asset/SourceDataFile.lh"
@@lpp.import "asset/SourceDataParser.lh"

@@lpp.import "graphics/CompiledTexture.lh"

template<typename T>
b8 packSourceDataIntoEnum(const SourceData& data, T* out);

$ importer:eachDecl(function(name, decl)
$   if decl:is(ast.Struct) and decl.is_complete then
template<>
b8 packSourceDataIntoType<$(name)>(
  const SourceData& data,
  $(name)* out,
  PackContext& ctx);
$   end
$ end)

b8 packComponent(const SourceData& data, Component** out, PackContext& ctx);

/* ----------------------------------------------------------------------------
 */
b8 packTextureRef(
    const SourceData& data, 
    gfx::TextureRef* out, 
    PackContext& ctx)
{
  if (!data.hasStringValue())
    return ERROR("expected a string value to pack TextureRef\n");

  out->name = data.val.str.allocateCopy(&ctx.packed->buffer);

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 destroyCompiledTexture(gfx::CompiledTexture** data)
{
  *data = nullptr;
  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packTypedPtr(const SourceData& data, TypedPtr<T>* out, PackContext& ctx)
{
  if (isnil(data.type))
    return ERROR("packTypedPtr given untyped data\n");

  out->type = data.type.allocateCopy(&ctx.packed->buffer);
  out->ptr = ctx.packed->buffer.allocateType<T>();

  return packSourceDataIntoType<T>(data, out->ptr, ctx);
}

$ local function packNumberTypedPtr(name)
/* ----------------------------------------------------------------------------
 */
template<>
b8 packTypedPtr<$(name)>(
    const SourceData& data,
    TypedPtr<$(name)>* out,
    PackContext& ctx)
{
  if (!data.hasNumberValue())
    return ERROR("expected number for TypedPtr<$(name)>\n");

  // NOTE(sushi) it would be nice if we could just store the number in the 
  //             pointer here, but then we couldn't use zero, unless if we 
  //             maybe used the last bit to indicate that state but idk.
  out->type = "$(name)"_str;
  out->ptr = ctx.packed->buffer.allocateType<$(name)>();

  *out->ptr = strtof((char*)data.val.str.ptr, nullptr);

  return true;
}
$ end

@packNumberTypedPtr "u8"
@packNumberTypedPtr "u16"
@packNumberTypedPtr "u32"
@packNumberTypedPtr "u64"
@packNumberTypedPtr "s8"
@packNumberTypedPtr "s16"
@packNumberTypedPtr "s32"
@packNumberTypedPtr "s64"
@packNumberTypedPtr "f32"
@packNumberTypedPtr "f64"

/* ----------------------------------------------------------------------------
 */
template<>
b8 packTypedPtr<String>(
    const SourceData& data, 
    TypedPtr<String>* out, 
    PackContext& ctx)
{
  if (!data.hasStringValue())
    return ERROR("expected string for TypedPtr<String>\n");

  out->type = "String"_str;
  out->ptr = ctx.packed->buffer.allocateType<String>();

  *out->ptr = data.val.str.allocateCopy(&ctx.packed->buffer);

  return true;
}  

/* ----------------------------------------------------------------------------
 */
template<>
b8 packTypedPtr<StringHash>(
    const SourceData& data, 
    TypedPtr<StringHash>* out, 
    PackContext& ctx)
{
  if (!data.hasStringValue())
    return ERROR("expected string for TypedPtr<StringHash>\n");

  out->type = "StringHash"_str;
  out->ptr = ctx.packed->buffer.allocateType<StringHash>();

  *out->ptr = data.val.str.hash();

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 packTypedBoolPtr(
    const SourceData& data,
    TypedPtr<b8>* out,
    PackContext& ctx)
{
  if (!data.hasBooleanValue())
    return ERROR("expected a boolean value for TypePtr<b8>\n");

  out->type = "b8"_str;
  out->ptr = ctx.packed->buffer.allocateType<b8>();

  *out->ptr = data.testBooleanValue();

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<>
b8 packTypedPtr<Component>(
    const SourceData& data,
    TypedPtr<Component>* out,
    PackContext& ctx)
{
  if (isnil(data.type))
    return ERROR("packTypedPtr passed untyped data\n");

  out->type = data.type.allocateCopy(&ctx.packed->buffer);
  if (!packComponent(data, &out->ptr, ctx))
    return false;

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<>
b8 packTypedPtr<void>(
    const SourceData& data,
    TypedPtr<void>* out,
    PackContext& ctx)
{
  if (isnil(data.type))
    return ERROR("packTypedPtr passed untyped data\n");

  out->type = data.type.allocateCopy(&ctx.packed->buffer);
  switch (out->type.hash())
  {
$ importer:eachDecl(function(name, decl)
$   if decl:is(ast.Struct) and decl.is_complete then
  case "$(name)"_hashed:
    {
      out->ptr = ctx.packed->buffer.allocateType<$(name)>();
      return packSourceDataIntoType<$(name)>(data, ($(name)*)out->ptr, ctx);
    }
    break;
$   end
$ end)
  }

  return ERROR("unhandled type used in TypedPtr<void>: ", data.type, "\n");
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packArray(
    const SourceData& data, 
    ArrayDef<T>* out, 
    PackContext& ctx)
{
  out->init(data.children.len(), &ctx.packed->buffer);

  for (u32 i = 0; i < data.children.len(); ++i)
  {
    const SourceData* child = data.children[i];
    if (notnil(child->name))
      return ERROR("arrays cannot contain named elements\n");

    if (!packSourceDataIntoType<T>(*child, &(*out)[i], ctx))
      return false;
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packArray(
    const SourceData& data,
    ArrayDef<TypedPtr<T>>* out,
    PackContext& ctx)
{
  out->init(data.children.len(), &ctx.packed->buffer);

  for (u32 i = 0; i < data.children.len(); ++i)
  {
    const SourceData* child = data.children[i];
    if (notnil(child->name))
      return ERROR("arrays cannot contain named elements\n");

    if (!packTypedPtr(*child, &(*out)[i], ctx))
      return false;
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<>
b8 packArray<gfx::TextureRef>(
    const SourceData& data,
    ArrayDef<gfx::TextureRef>* out,
    PackContext& ctx)
{
  out->init(data.children.len(), &ctx.packed->buffer);

  for (u32 i = 0; i < data.children.len(); ++i)
  {
    const SourceData* child = data.children[i];
    if (notnil(child->name))
      return ERROR("arrays cannot contain named elements\n");

    if (!packTextureRef(*child, &(*out)[i], ctx))
      return false;
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<>
b8 packArray<Component*>(
    const SourceData& data,
    ArrayDef<Component*>* out,
    PackContext& ctx)
{
  out->init(data.children.len(), &ctx.packed->buffer);

  for (u32 i = 0; i < data.children.len(); ++i)
  {
    const SourceData* child = data.children[i];
    if (notnil(child->name))
      return ERROR("arrays cannot contain named elements\n");

    if (!packComponent(*child, &(*out)[i], ctx))
      return false;
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packArray(
    const SourceData& data,
    ArrayDef<TypedSourceAssetRef<T>>* out,
    PackContext& ctx)
{
  out->init(data.children.len(), &ctx.packed->buffer);

  for (u32 i = 0; i < data.children.len(); ++i)
  {
    const SourceData* child = data.children[i];
    if (notnil(child->name))
      return ERROR("arrays cannot contain named elements\n");

    if (!packAssetRef(*child, &(*out)[i], nil, ctx))
      return false;
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packArray(
    const SourceData& data,
    ArrayDef<TypedStringMap<T>>* out,
    PackContext& ctx)
{
  out->init(data.children.len(), &ctx.packed->buffer);

  for (u32 i = 0; i < data.children.len(); ++i)
  {
    const SourceData* child = data.children[i];
    if (notnil(child->name))
      return ERROR("arrays cannot contain named elements\n");

    if (!packSourceDataIntoType(*child, &(*out)[i], ctx))
      return false;
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 packString(const SourceData& data, String* out, PackContext& ctx)
{
  if (!data.hasStringValue())
    return ERROR("expected a string\n");

  *out = data.val.str.allocateCopy(&ctx.packed->buffer);
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 destroyString(String* s)
{
  if (notnil(*s))
    mem::stl_allocator.free(s->ptr);
  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packNumber(const SourceData& data, T* out)
{
  if (!data.hasNumberValue())
    return ERROR("expected a number\n");

  *out = strtof((char*)data.val.str.ptr, nullptr);
  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packVec2(const SourceData& data, T* out)
{
  // TODO(sushi) nameless initialization

  if (!data.hasChildren())
    return ERROR("expected an object to pack vec2\n");
  
  if (data.children.len() != 2)
    return ERROR("too many children in vec2 source data\n");

  if (isnil(data.children[0]->name))
  {
    SourceData* x = data.children[0];
    SourceData* y = data.children[1];

    // Must be nameless initialization.
    if (!x->hasNumberValue())
      return ERROR("vec2 members must be numbers\n");

    out->x = strtof((char*)x->val.str.ptr, nullptr);

    if (!y->hasNumberValue())
      return ERROR("vec2 members must be numbers\n");

    out->y = strtof((char*)y->val.str.ptr, nullptr);
  }
  else
  {
    for (const SourceData* child : data.children)
    {
      if (!child->hasNumberValue())
        return ERROR("vec2 members can only be numbers\n");

      switch (child->name.hash())
      {
      case "x"_hashed:
        out->x = strtof((char*)child->val.str.ptr, nullptr);
        break;
      case "y"_hashed:
        out->y = strtof((char*)child->val.str.ptr, nullptr);
        break;
      default:
        return ERROR("no member named ", child->name, " in vec2\n");
      }
    }
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 packColor(const SourceData& data, Color* out)
{
  if (!data.hasChildren())
    return ERROR("expected an object to pack Color\n");

  // TODO(sushi) nameless initialization

  for (const SourceData* child : data.children)
  {
    if (!child->hasNumberValue())
      return ERROR("vec2 members can only be numbers\n");

    switch (child->name.hash())
    {
    case "r"_hashed:
      out->r = strtof((char*)child->val.str.ptr, nullptr);
      break;
    case "g"_hashed:
      out->g = strtof((char*)child->val.str.ptr, nullptr);
      break;
    case "b"_hashed:
      out->b = strtof((char*)child->val.str.ptr, nullptr);
      break;
    case "a"_hashed:
      out->a = strtof((char*)child->val.str.ptr, nullptr);
      break;
    default:
      return ERROR("no member named ", child->name, " in vec2\n");
    }
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 packAssetRef(
    const SourceData& data, 
    AssetRef* out, 
    String type,
    PackContext& ctx)
{
  if (!data.hasStringValue())
    return @log.error("expected a string to pack asset ref\n");

  out->name = data.val.str;
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 packStringHash(
    const SourceData& data,
    StringHash* out,
    PackContext& ctx)
{
  if (!data.hasStringValue())
    return @log.error("expected a string value to pack string hash\n");

  out->val = stringHash(&data.val.str);
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 packBoolean(
    const SourceData& data,
    b8* out,
    PackContext& ctx)
{
  if (!data.hasBooleanValue())
    return @log.error("expected a boolean value\n");

  *out = data.testBooleanValue();

  return true;
}

$ -- * ------------------------------------------------------------------------

$ local putEnumPacker = function(name, decl)
$   local typename = importer.removeTag(decl.name)
/* ----------------------------------------------------------------------------
 */
template<>
b8 packSourceDataIntoEnum(const SourceData& data, $(typename)* out)
{
  if (!data.hasStringValue())
    return ERROR("expected a string for $(name) enum data\n");

  switch (data.val.str.hash())
  {
$ for elem in decl.elems:each() do
$   if elem.metadata.hidden then
  case "$(elem.name)"_hashed:
    return 
      ERROR("enum value $(typename)::$(elem.name) is marked as hidden\n");
$   else
  case "$(elem.name)"_hashed: *out = $(typename)::$(elem.name); break;
$   end
$ end

  default:
    return ERROR("no element ", data.val.str, " in enum $(name)\n");
  }

  return true;
}
$ end

$ -- * ------------------------------------------------------------------------

$ local putArrayPackCase = function(declname, addrname, type, decl, prereqs)
$   prereqs:push(decl.template_args[1]:getDecl())
    if (!child->hasObjectData())
      return ERROR("expected an object for array field $(addrname)\n");
    if (!packArray(
          *child,
          &$(addrname), 
          ctx))
      return ERROR("failed to pack array data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putStringPackCase = function(declname, addrname, type, prereqs)
    if (!packString(*child, &$(addrname), ctx))
      return ERROR("failed to pack string data for field $(addrname)");
$ end

$ -- * ------------------------------------------------------------------------

$ local putNumberPackCase = function(declname, addrname, type, prereqs)
    if (!packNumber(*child, &$(addrname)))
      return ERROR("failed to pack number data for field $(addrname)");
$ end

$ -- * ------------------------------------------------------------------------

$ local putStructPackCase = function(declname, addrname, type, prereqs)
    if (!packSourceDataIntoType(
          *child, 
          &$(addrname), 
          ctx))
      return ERROR("failed to pack struct data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putVec2PackCase = function(declname, addrname, type, prereqs)
    if (!packVec2(*child, &$(addrname)))
      return ERROR("failed to pack vec2 data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putColorPackCase = function(declname, addrname, type, prereqs)
    if (!packColor(*child, &$(addrname)))
      return ERROR("failed to Color data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putEnumArrayPackCase = function(declname, addrname, type, prereqs)
    if (!packSourceDataIntoEnumArray(*child, &$(addrname), ctx))
      return ERROR("failed to pack enum array data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putStringMapPackCase = function(declname, addrname, type)
    if (!packSourceDataIntoStringMap(*child, &$(addrname), ctx))
      return ERROR("failed to pack string map data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putEnumPackCase = function(declname, addrname, type, prereqs)
$   prereqs:push(type:getDecl())
    if (!packSourceDataIntoEnum(*child, &$(addrname)))
      return ERROR(
        "failed to pack $(declname) data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putTextureRefPackCase = function(declname, addrname)
    if (!packTextureRef( *child, &$(addrname), ctx))
      return ERROR(
        "failed to pack $(declname) data for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putAssetRefPackCase = function(declname, addrname, decl)
$   local asset_type = decl.template_args[1]:getDesugared()
$   local asset_typename = importer.removeTag(asset_type.name)
  if (!packAssetRef(*child, &$(addrname), "$(asset_typename)"_str, ctx))
    return ERROR(
      "failed to pack asset ref to $(declname) for field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putEnumFlagsPackCase = function(declname, addrname, decl)
$   local TEnum = decl.template_args[1]:getDesugared()
$   local DEnum = TEnum:getDecl()
  if (!packSourceDataIntoEnumFlags(*child, &$(addrname), ctx))
    return ERROR(
      "failed to pack flags into $(declname)'s field $(addrname)\n");
$ end 

$ -- * ------------------------------------------------------------------------

$ local putStringHashPackCase = function(declname, addrname)
  if (!packStringHash(*child, &$(addrname), ctx))
    return ERROR(
      "failed to pack string hash into $(declname)'s field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putBooleanPackCase = function(declname, addrname)
  if (!packBoolean(*child, &$(addrname), ctx))
    return ERROR(
      "failed to pack boolean into $(declname)'s field $(addrname)\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putTypedPtrPackCase = function(declname, addrname)
  if (!packTypedPtr(*child, &$(addrname), ctx))
    return ERROR(
      "failed to pack typed pointer in to $(declname)'s field $(addrname)'\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putTypedStringMapCase = function(declname, addrname)
  if (!packSourceDataIntoType(*child, &$(addrname), ctx))
    return ERROR(
      "failed to pack typed string map into $(declname)'s "
      "field '$(addrname)'\n");
$ end

$ -- * ------------------------------------------------------------------------

$ local putPackCase = function(declname, addrname, type, prereqs)
$   local TRef = importer.p.decls.map["struct Ref"]
$   if type.name == "String" then
$     return (putStringPackCase(declname, addrname, type, prereqs))
$   end
$  
$   if type.name == "b8" then
$     return (putBooleanPackCase(declname, addrname))
$   end
$  
$   type = type:getDesugared()
$   if type:is(ast.BuiltinType) then
$     return (putNumberPackCase(declname, addrname, type, prereqs))
$   end
$
$   if type:is(ast.TagType) then
$     local decl = type:getDecl()
$     if decl:is(ast.Record) then 
$       if decl:isDerivedFrom(TRef) then
  ctx.packed->recordRef("$(importer.removeTag(decl.name))"_str, &$(addrname));
$       end
$     end
$     if decl:is(ast.TemplateSpecialization) then
$       if decl.specialized_name == "Array" then
$         print(declname)
$         error "Arrays are not allowed in defs! use ArrayDef instead"
$       elseif decl.specialized_name == "TypedPtr" then
$         return (putTypedPtrPackCase(declname, addrname))
$       elseif decl.specialized_name == "ArrayDef" then
$         return (putArrayPackCase(declname, addrname, type, decl, prereqs))
$       elseif decl.specialized_name == "vec2" then
$         return (putVec2PackCase(declname, addrname, type, prereqs))
$       elseif decl.specialized_name == "Flags" then
$         return (putEnumFlagsPackCase(declname, addrname, decl))
$       elseif decl.specialized_name == "OffsetPtr" or 
$              decl.specialized_name == "OffsetSlice" then
$         -- TODO(sushi) fix includes or implement better filtering so things
$         --             using these don't show up here
$       elseif decl.specialized_name == "TypedAssetRef" or 
$              decl.specialized_name == "TypedSourceAssetRef" then
$         return (putAssetRefPackCase(declname, addrname, decl, prereqs))
$       elseif decl.specialized_name == "TypedStringMap" then
$         return (putTypedStringMapCase(declname, addrname, decl))
$       elseif decl.specialized_name == "EnumArray" then
$         return (putEnumArrayPackCase(declname, addrname, type, prereqs))
$       elseif decl.specialized_name == "StringMap" then
$         return (putStringMapPackCase(declname, addrname, type))
$       else
$         error("unhandled specialized template "..decl.specialized_name)
$       end
$     elseif decl:is(ast.Struct) then
$       local name = importer.removeTag(decl.name)
$       if name == "Color" then
$         return (putColorPackCase(declname, addrname, type, prereqs))
$       elseif name == "gfx::TextureRef" then
$         return (putTextureRefPackCase(declname, addrname))
$       elseif name == "StringHash" then
$         return (putStringHashPackCase(declname, addrname))
$       else
$         return (putStructPackCase(declname, addrname, type, prereqs))
$       end
$     elseif decl:is(ast.Enum) then
$       return (putEnumPackCase(declname, addrname, type, prereqs))
$     end
$   elseif type:is(ast.PointerType) then
$     type = type.subtype
$     if type.name == "gfx::CompiledTexture" then
$       return (putCompiledTexturePackCase(declname, addrname, type, prereqs))
$     end
$   end
$ end

$ -- * ------------------------------------------------------------------------

$ local putEnumFlagsPacker = function(name, decl)
$   local typename = importer.removeTag(decl.name)
$   local TEnum = decl.template_args[1]:getDesugared()
$   local DEnum = TEnum:getDecl()
$   if not DEnum then
$     error("enum flags type "..name.." has no decl!")
$   end
$   local enumname = importer.removeTag(DEnum.name)
/* ----------------------------------------------------------------------------
 */
b8 packSourceDataIntoEnumFlags(
    const SourceData& data,
    $(typename)* out,
    PackContext& ctx)
{
  using TEnum = $(enumname);

  if (!data.hasObjectData())
    return ERROR("expected an array of $(enumname) to packing to $(name)\n");

  if (data.children.isEmpty())
  {
    out->clear();
    return true;
  }

  for (const SourceData* child : data.children)
  {
    if (notnil(child->name))
      return ERROR("elements of $(typename) data cannot be named\n");

    if (!child->hasStringValue())
      return ERROR("elements of $(typename) data must be strings\n");
    
    switch (child->val.str.hash())
    {
$ for elem in DEnum.elems:each() do
$   if not elem.metadata.hidden then
    case "$(elem.name)"_hashed:
      out->set(TEnum::$(elem.name));
      break;
$   end
$ end
    default:
      return ERROR("no element named ", child->val.str, " in $(typename)\n");
    }
  }

  return true;
}
$ end

$ -- * ------------------------------------------------------------------------

$ local putEnumArrayPacker = function(name, decl, prereqs)
$   local typename = importer.removeTag(decl.name)
$   local enum_type = decl.template_args[1].decl
$   local enum_typename = importer.removeTag(enum_type.name)
$   local elem_decl = decl.template_args[2].decl
$   if not elem_decl then 
$     io.write(name, " has element with no decl\n")
$     return 
$   end
$   local elem_type = elem_decl.type
/* ----------------------------------------------------------------------------
 */
b8 packSourceDataIntoEnumArray(
    const SourceData& data, 
    $(typename)* out,
    PackContext& ctx)
{
  using TSelf = $(name);
  using TEnum = $(enum_type.name);
  using TElem = $(elem_type.name);

  if (!data.hasObjectData())
    return ERROR("expected object data for enum array $(name)\n");

  if (data.children.isEmpty())
  {
    mem::zero(out, sizeof(TSelf));
    return true;
  }

  for (const SourceData* child : data.children)
  {
    switch (child->name.hash())
    {
$ for elem in enum_type.elems:each() do
    case "$(elem.name)"_hashed:
$     putPackCase(
$       decl.name, 
$       "(*out)[TEnum::"..elem.name.."]", 
$       elem_type, 
$       prereqs)
      break;
$ end
    default:
      return ERROR(
        "no element named ", child->name, " in $(enum_type.name)\n");
    }
  }

  return true;
}
$ end

$ -- * ------------------------------------------------------------------------

$ local function putStringMapPacker(name, decl)
$   local elem_type = decl.template_args[1]
/* ----------------------------------------------------------------------------
 */
b8 packSourceDataIntoStringMap( 
    const SourceData& data, 
    $(name)* out,
    PackContext& ctx)
{
  if (!data.hasObjectData())
    return ERROR("expected object data to pack $(name)\n");

  if (data.children.isEmpty())
  {
    mem::zero(out, sizeof($(name)));
    return true;
  }

  if (!out->init(data.children.len(), &ctx.packed->buffer))
    return ERROR("failed to initialize StringMap\n");

  for (const SourceData* child : data.children)
  {
    if (isnil(child->name))
      return ERROR("StringMap data must be named\n");

    auto* elem = out->add(child->name);

$   putPackCase(decl.name, "*elem", elem_type)
  }

  return true;
}
$ end

/* ----------------------------------------------------------------------------
 */
template<>
b8 packSourceDataIntoType<String>(
    const SourceData& data,
    String* out,
    PackContext& ctx)
{
  if (!data.hasStringValue())
    return ERROR("expected a string value to pack String\n");

  *out = data.val.str.allocateCopy(&ctx.packed->buffer);

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packSourceDataIntoType(
   const SourceData& data,
   TypedPtr<T>* out,
   PackContext& ctx)
{
  out->type = 
}

$ -- * ------------------------------------------------------------------------

$ local function putArrayDefPacker(name, decl)
/* ----------------------------------------------------------------------------
 */
template<>
b8 packSourceDataIntoType(
  const SourceData& data,
  ArrayDef<$(name)>* out,
  PackContext& ctx)
{
  if (!data.hasObjectData())
    return ERROR("expected object data to pack ArrayDef<$(name)>\n");

  out->init(data.children.len(), &ctx.packed->buffer);

  for (u32 i = 0; i < data.children.len(); ++i)
  {
    const SourceData* child = data.children[i];
    if (notnil(child->name))
      return ERROR("arrays cannot contain named elements\n");

    if (!packSourceDataIntoType<$(name)>(*child, &(*out)[i], ctx))
      return false;
  }

  return true;
}
$ end

$ -- * ------------------------------------------------------------------------
$ -- Note that this generates a packer as if 'decl' were the subtype of a 
$ -- TypedStringMap<T>, eg. 'decl' is T, not the entire type, because we need 
$ -- to generate one of these for each possible T.

$ local function putTypedStringMapPacker(name, decl)
/* ----------------------------------------------------------------------------
 */
template<>
b8 packSourceDataIntoType(
    const SourceData& data,
    TypedStringMap<$(name)>* out,
    PackContext& ctx)
{
  if (!data.hasObjectData())
    return ERROR("expected object data to pack $(name)\n");

$ -- Separated from below code cause it was getting ugly.
$ local function packIntoDecl(decl)
  // No children so just zero and return.
  if (data.children.isEmpty())
  {
    mem::zero(out, sizeof($(name)));
    return true;
  }

  if (!out->map.init(data.children.len(), &ctx.packed->buffer))
    return ERROR("failed to init string map for $(name)\n");

  for (const SourceData* child : data.children)
  {
    if (isnil(child->name))
      return ERROR("children of $(name) data must be named\n");

    TypedPtr<void>* tptr = nullptr;
    switch (child->name.hash())
    {
$   for field in decl:eachFieldWithIndex() do
$     local type = field.type
    case "$(field.name)"_hashed:
$     if field.metadata.hidden then
      return ERROR("field $(field.name) of $(decl.name) is marked hidden\n");
$     else
      tptr = out->map.add("$(field.name)"_str);
$       if type.name == "String" then
      if (!packTypedPtr(*child, ((TypedPtr<String>*)tptr), ctx))
        return false;
$       elseif type.name == "b8" then
      if (!packTypedBoolPtr(*child, ((TypedPtr<b8>*)tptr), ctx))
        return false;
$       else
$         local realtype = type:getDesugared()
$         if realtype:is(ast.BuiltinType) then
      if (!packTypedPtr(*child, ((TypedPtr<$(type.name)>*)tptr), ctx))
        return false;
$         else
$           local fdecl = realtype:getDecl()
$           if fdecl then
$             local TRef = importer.p.processed_clang_objs["struct Ref"]
$             if fdecl:is(ast.Record) and fdecl:isDerivedFrom(TRef) then
      if (!packTypedPtr(*child, ((TypedPtr<$(fdecl.name)>*)tptr), ctx))
        return false;
$             elseif fdecl:is(ast.Struct) then
$               local fdeclname = importer.removeTag(fdecl.name)
$               if fdeclname == "StringHash" then
      if (!packTypedPtr(*child, ((TypedPtr<StringHash>*)tptr), ctx))
        return false;
$               else
      {
        if (isnil(child->type))
          return ERROR(
            "child object data of a TypedStringMap must be typed\n");

        auto* tsm = 
          ctx.packed->buffer.allocateType<TypedStringMap<$(fdecl.name)>>();

        if (!packSourceDataIntoType(*child, tsm, ctx))
          return ERROR("failed to pack nested TypedStringMap<$(fdecl.name)> "
                       "for field $(field.name)\n");

        tptr->type = "$(importer.removeTag(fdecl.name))"_str;
        tptr->ptr = tsm;
      }
$               end
$             end
$           end
$         end
$       end
$     end
      break;
$   end
    default:
      return ERROR("type $(decl.name) has no field ", child->name, "\n");
    }
  }
$ end

$ -- Switch on the type of the given data and then validate each specified 
$ -- field.

  switch (data.type.hash())
  {
$ local function eachDerived(decl)
$   local dername = importer.removeTag(decl.name)
  case "$(dername)"_hashed:
$   -- If this is a hidden type, error on its usage.
$   if decl.metadata.hidden then
    return ERROR("attempt to use type $(dername) for TypedStringMap, but it "
                 "is marked hidden\n");
$   else -- Otherwise, match children to members of the thing.
$     packIntoDecl(decl)
$   end
    break;
$   for der in decl.derived:each() do
$     eachDerived(der)
$   end
$ end
$ eachDerived(decl)
  }
  
  return true;
}
$ end

/* ----------------------------------------------------------------------------
 */
template<typename T>
b8 packSourceDataIntoType(
    const SourceData& data, 
    StringMap<T>* out, 
    PackContext& ctx)
{
  return packSourceDataIntoStringMap(data, out, ctx);
}

$ -- * ------------------------------------------------------------------------

$ local putStructPacker = function(name, decl, prereqs)
/* ----------------------------------------------------------------------------
 */
template<>
b8 packSourceDataIntoType<$(name)>(
    const SourceData& data, 
    $(name)* out,
    PackContext& ctx)
{
  if (isnil(data.children))
    return ERROR("expected an object to pack into $(name)\n");

  mem::zero(out, sizeof($(name)));

  if (data.children.isEmpty())
    return true;

  BitArray<$(decl:getFieldCount())> found_fields = {};

  for (const SourceData* child : data.children)
  {
    switch (child->name.hash())
    {
$ for field,i in decl:eachFieldWithIndex() do
    case "$(field.name)"_hashed:
      {
        found_fields.set($(i));
$       putPackCase(decl.name, "out->"..field.name, field.type, prereqs)
      }
      break;
$ end
    default:
      return ERROR("no field named '", child->name, "' in $(name)\n");
    }
  }

$ for field,i in decl:eachFieldWithIndex() do
$   if field.metadata.default then
  if (!found_fields.test($(i)))
  {
    
    // TODO(sushi) this can absolutely be done better, given that we know this 
    //             information at compile time, but I'm just wanting to get 
    //             this working for now. In the future, we should be able to 
    //             determine a constant value for the default data given to 
    //             us and be able to just mem copy it into the member here.
    SourceDataFile file;
    file.init();
    defer { file.deinit(); };

    auto view = io::StringView::from("$(field.metadata.default)"_str);
    SourceDataParser parser;

    parser.init(&file, &view, "$(field.name) default"_str);
    defer { parser.deinit(); };

    SourceData* default_data = file.allocateSourceData();

    if (!parser.parsePossiblyTypedData(default_data))
      return ERROR("failed to parse default value of $(field.name)\n");
    
    // yeah im lazy so what
    SourceData* child = default_data;
$   putPackCase(decl.name, "out->"..field.name, field.type, prereqs)
  }
$   end
$ end
  
  return true;
}
$ end

$ -- * ------------------------------------------------------------------------

$ local placed_packers = 
$ {
$   String = true
$ }
$ local function putPacker(name, decl, prereqs)
$   if not decl or placed_packers[decl.name] then return end
$   if name == "gfx::Renderer" then return end
$   placed_packers[decl.name] = true
$   if decl:is(ast.Record) then
$     -- Because we support stuff like TypedStringMap<T>, which can take on 
$     -- the form of T or any type derived from it, we have to ensure that 
$     -- the derived types are placed before each type, such that if something
$     -- like this uses a derived type, it wont try to call into other packing
$     -- functions that would normally come after it.
$     for der in decl.derived:each() do
$       putPacker(importer.removeTag(der.name), der)
$     end
$   end
$   if decl:is(ast.Struct) then
$     if decl.is_complete then
$       for field in decl:eachFieldWithIndex() do
$         putPacker(field.type.name, field.type:getDecl(), prereqs)
$       end
$       putStructPacker(name, decl, prereqs)
$       if name ~= "String" then
$         putTypedStringMapPacker(name, decl)
$       end
$     end
$   elseif decl:is(ast.TemplateSpecialization) then
$     if decl.specialized_name == "Array" then
$     elseif decl.specialized_name == "TypedPtr" then
$       local subtype = decl.template_args[1]
$       local subdecl = subtype:getDecl()
$       if subdecl then
$         putPacker(subdecl.name, subdecl)
$       end
$     elseif decl.specialized_name == "Flags" then
$       putEnumFlagsPacker(name, decl)
$     elseif decl.specialized_name == "ArrayDef" then
$       local elem_type = decl.template_args[1]
$       if not elem_type:is(ast.PointerType) then
$         local elem_decl = decl.template_args[1]:getDecl()
$         putPacker(elem_decl.name, elem_decl, prereqs)
$       end
$     elseif decl.specialized_name == "StringMap" then
$       local elem_decl = decl.template_args[1]:getDecl()
$       if elem_decl then
$         putPacker(elem_decl.name, elem_decl)
$       end
$       putStringMapPacker(name, decl)
$     elseif decl.specialized_name == "EnumArray" then
$       putEnumArrayPacker(name, decl, prereqs)
$     end
$   elseif decl:is(ast.Enum) then
$     putEnumPacker(name, decl)
$   end
$ end

$ importer:eachDecl(function(name, decl)
$   local prereqs = List{}
$   if decl:is(ast.Record) then
$     putPacker(name, decl, prereqs)
$   end
$ end)

/* ----------------------------------------------------------------------------
 */
b8 packSourceDataFromType(
    const SourceData& data, 
    PackContext& ctx)
{
  if (isnil(data.type))
    return @log.error("packSourceDataFromType passed untyped data\n");

  switch (data.type.hash())
  {
$ importer:eachDecl(function(name, decl)
$   if decl:is(ast.Struct) and decl.is_complete then
  case "$(name)"_hashed:
    return packSourceDataIntoType<$(name)>(data, ctx);
$   end
$ end)
  }

  return false;
}

/* ----------------------------------------------------------------------------
 *  NOTE(sushi) this is placed after packing structs as if not we will be 
 *              instantiating packSourceDataIntoType on each component type 
 *              before they are defined which is a problem for whatever reason
 *              so awesome man.
 */
b8 packComponent(const SourceData& data, Component** out, PackContext& ctx)
{
  *out = nullptr;

  if (isnil(data.type))
    return ERROR("Component data must be typed\n");

  switch (data.type.hash())
  {
$ local TComponent = importer.p.decls.map["struct Component"]
$ importer:eachDecl(function(name, decl)
$   if not decl:is(ast.Record) or not decl:isDerivedFrom(TComponent) then
$     return
$   end
  case "$(name)"_hashed:
    {
      auto* comp = ctx.packed->buffer.allocateType<$(name)>();
      if (!packSourceDataIntoType(data, comp, ctx))
        return false;

      comp->Component::kind = getComponentKind<$(name)>();

      *out = comp;
    }
    break;
$ end)
  }

  return true;
}

