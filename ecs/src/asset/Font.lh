/*
 *  A font loaded from disk.
 */

$ local lpp = require "lpp"
$ local reflect = require "reflection.Reflector"

#include "iro/common.h"
#include "iro/unicode.h"
#include "iro/traits/nil.h"
#include "math/vec.h"

using namespace iro;

@@lpp.import "asset/AssetHandle.lh"

@@lpp.import "asset/Texture.lh"

struct AssetMgr;

/* ==========================================================================
 *  This mirrors stbtt_aligned_quad
 */
struct AlignedQuad
{
  f32 x0, y0, u0, v0;
  f32 x1, y1, u1, v1;
};

/* ==========================================================================
 *  This mirrors stbtt_packedchar
 */
struct PackedChar
{
  unsigned short x0, y0, x1, y1;
  f32 xoff, yoff, xadvance;
  f32 xoff2, yoff2;
};

/* ==========================================================================
 *  This mirrors stbtt_pack_range
 */
struct PackRange
{
  f32 font_size;
  s32 first_codepoint;
  s32 num_chars;
  PackedChar* chardata_for_range;
};

/* ============================================================================
 *  Compiled font data saved to disk. 
 */
struct FontData
{
  u32 count;
  s32 size_x;
  s32 size_y;
  f32 ascent;
  f32 descent;
  f32 line_gap;

  u32 num_ranges;
  PackRange* ranges;

  b8 serialize(io::IO* out);

  static b8 deserialize(FontData* out, void* data);
};

/* ============================================================================
 *  Runtime representation of a loaded font.
 */
struct Font
{
  AssetHandle handle;
  // TODO(sushi) convert to an asset ref when that gets implemented.
  Texture texture;

  FontData* data;

  static Font loadFromPath(
    str path, 
    f32 font_size,
    mem::Allocator* allocator,
    AssetMgr& assetmgr);

  static b8 load(
    Font* out,
    str name, 
    mem::Allocator* allocator,
    AssetMgr& assetmgr);

  struct CompileParams
  {
    str name;
    str asset_path;
    str data_path;
    mem::Allocator* allocator;
    AssetMgr* assetmgr;
  };

  static b8 compile(CompileParams& params);
};

DefineNilValue(Font, {nil}, { return notnil(x.handle); });
