$ local cmn = require "common"

@@lpp.import "asset/SourceDataFileReg.lh"
@@lpp.import "asset/SourceDataParser.lh"

#include "iro/Logger.h"
using namespace iro;

@cmn.defFileLogger(srcdata.reg, Info);

#include "iro/fs/File.h"
#include "iro/Platform.h"

/* ----------------------------------------------------------------------------
 */
b8 SourceDataFileReg::init()
{
  if (!pool.init())
    return ERROR("failed to initialize source data file pool\n");
  if (!map.init())
    return ERROR("failed to initialize source data file map\n");
  return true;
}

/* ----------------------------------------------------------------------------
 */
void SourceDataFileReg::deinit()
{
// NOTE(sushi) disabling for now so the engine can close. I dont care for ref
//             counting anymore and this will eventually be redone.
$ if false then
  for (SourceDataFileSlot& slot : map)
  {
    assert(!slot.header.rc.isReferenced() &&
      "attempt to deinit SourceDataFileReg while a SourceDataFile is still "
      "referenced!");
  }
$ end

  pool.deinit();
  map.deinit();
}

/* ----------------------------------------------------------------------------
 */
SourceDataFileHandle SourceDataFileReg::loadFromDisk(String path)
{
  using namespace fs;

  @log.debug("loading ", path, "\n");

  u64 path_hash = path.hash();

  @log.debug("  path hash: ", path_hash, "\n");

  SourceDataFileSlot* slot = map.find(path_hash);
  if (slot != nullptr)
  {
    @log.debug(path, " already loaded\n");
    return SourceDataFileHandle(&slot->header);
  }

  auto file = File::from(path, OpenFlag::Read);
  if (isnil(file))
  {
    ERROR("failed to open source data file at ", path, "\n");
    platform::debugBreak();
    return SourceDataFileHandle::invalid();
  }
  defer { file.close(); };

  slot = pool.add();

  slot->path = fs::Path::from(path);
  slot->path_hash = path_hash;
  slot->header.reg = this;

  if (!slot->file.init())
  {
    ERROR("failed to initialize source data file\n");
    pool.remove(slot);
    return SourceDataFileHandle::invalid();
  }

  if (!parseSourceDataFile(&slot->file, &file, path))
  {
    ERROR("failed to init source data file parser\n");
    pool.remove(slot);
    return SourceDataFileHandle::invalid();
  }

  map.insert(slot);

  slot->header.rc.addRef();

  return SourceDataFileHandle(&slot->header);
}

/* ----------------------------------------------------------------------------
 */
b8 SourceDataFileReg::saveToDisk(const SourceDataFileHandle& h_sdfile)
{
  using namespace fs;

  if (!h_sdfile.isValid())
    return ERROR("SourceDataFileReg::saveToDisk passed a nil handle\n");

  auto* sdfile = h_sdfile.getFile();
  auto* slot = (SourceDataFileSlot*)h_sdfile.header;

  auto file = 
    File::from(slot->path, OpenFlag::Write | OpenFlag::Truncate);
  if (isnil(file))
    return @log.error("failed to open file at ", slot->path, " for writing\n");
  defer { file.close(); };

  for (SourceData& aux : sdfile->aux_data_list)
    aux.dump(&file);

  if (sdfile->returned_data != nullptr)
  {
    io::format(&file, "return ");
    sdfile->returned_data->dump(&file);
  }

  return true;
} 

/* ----------------------------------------------------------------------------
 */
void SourceDataFileReg::releaseSourceDataFile(SourceDataFileHeader* header)
{
  // At this point we should know that this source data file is no longer 
  // referenced as we can only get into this function from a handle to it.

$ if false then
  SourceDataFileSlot* slot = (SourceDataFileSlot*)header;

  @log.debug("releasing ", slot->path, "\n");

  slot->file.deinit();

  map.remove(slot);
  pool.remove(slot);

$ end
}
