$ local cmn = require "common"
$ local ast = require "reflect.AST"


@log.ger(asset, Info)

$$$
local importer = require "reflect.Importer"
{
  patterns =
  {
    "src/**/*.defs.lh",
    "src/**/*.comp.lh",
  },
}
$$$
@importer:get

@@lpp.import "asset/Asset.lh"
@@lpp.import "asset/AssetMgr.lh"
@@lpp.import "asset/CompiledData.lh"

#include "iro/fs/Path.h"
#include "iro/fs/File.h"
#include "iro/Logger.h"

using namespace fs;

/* ----------------------------------------------------------------------------
 */
static String resolveExpectedType(String s)
{
  switch (s.hash())
  {
$ importer:eachDecl(function(name, decl)
$   if decl:is(ast.TypedefDecl) then
$     local type = decl.subtype:getDesugared()
$     local subdecl = type:getDecl()
$     if subdecl and subdecl:is(ast.TemplateSpecialization) and
$        subdecl.specialized_name == "TypedSourceAssetRef"
$     then
  case "$(decl.name)"_hashed:
$       local name = importer.removeTag(subdecl.template_args[1].name)
    return "$(name)"_str;
$     end
$   end
$ end)
  }

  return s;
}

/* ----------------------------------------------------------------------------
 */
template<>
b8 TypedSourceAssetRef<int>::load(String type, LoadParams& params)
{
  if (isnil(name))
    return true;

  String asset_name = name;

  PathBuffer src_path_buffer;

  String actual_type = resolveExpectedType(type);

  if (Path::hasExtension(name))
  {
    io::formatv(&src_path_buffer, name);
    asset_name = name.subToLast('.');
  }
  else
  {
    String source_type = rtr::getMetadataValue(type, "source_types"_str);
    if (isnil(source_type))
    {
      return ERROR(
        "attempt to load asset '", name, "' of type ", type, " but asset "
        "name has no extension and ", type, " does not specify source_types "
        "metadata\n");
    }

    io::formatv(&src_path_buffer, name, '.', source_type);
  }

  String src_path = src_path_buffer.asStr();

  @log.debug("loading asset '", src_path, "'\n");

  if (params.sfile_reg != nullptr)
  {
    CompiledData::CompileParams compile_params = 
    {
      .name = src_path,
      .type = actual_type,
      .assetmgr = params.assetmgr,
      .sfile_reg = *params.sfile_reg,
    };

    if (!CompiledData::compile(compile_params))
      return false;
  }

  auto compiled_data = 
    CompiledData::load(src_path, actual_type, params.assetmgr, &asset);
  if (compiled_data == nullptr)
    return ERROR("failed to load data from '", src_path, "'\n");

  if (params.recursive)
  {
    CompiledData::Refs refs;
    compiled_data->getRefs(&refs);

    for (auto& ref : refs)
    {
      ref.ptr->load(ref.type, params);
    }
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
template<>
b8 TypedAssetRef<int>::load(String type, LoadParams& params)
{
  if (isnil(name))
    return ERROR(
      "TypedAssetRef::load called on a reference that has no name\n");

  if (!Path::hasExtension(name))
    return ERROR("TypedAssetRef::load called on a reference whose name has "
                 "no extension\n");
  
  asset = params.assetmgr.loadAssetFromDisk(name);
  if (asset == nullptr)
    return ERROR("failed to load asset '", name, "' from disk\n");

  return true;
}
