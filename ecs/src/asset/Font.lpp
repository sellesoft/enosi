
$ local lpp = require "lpp"
$ local reflect = require "reflect.Reflector"
$ local List = require "list"

#include "math.h"

#include "iro/io/io.h"
#include "iro/fs/file.h"
#include "iro/platform.h"

@@lpp.import "asset/Font.lh"
@@lpp.import "asset/AssetMgr.lh"

static Logger logger = 
  Logger::create("font"_str, Logger::Verbosity::Debug);

typedef io::StaticBuffer<512> PathBuffer;

/* ----------------------------------------------------------------------------
 */
static b8 codepointInRange(PackRange* range, u32 codepoint)
{
  return codepoint >= range->first_codepoint &&
         codepoint < range->first_codepoint + range->num_chars;
}

/* ----------------------------------------------------------------------------
 */
PackRange* Font::getRangeOfCodepoint(u32 codepoint)
{
  if (data->num_ranges == 1)
  {
    if (codepointInRange(data->ranges, codepoint))
      return data->ranges;
    else
      return nullptr;
  }

  for (s32 rangeidx = 0; rangeidx < data->num_ranges; ++rangeidx)
  {
    PackRange* range = data->ranges + rangeidx;
    
    if (codepointInRange(data->ranges, codepoint))
      return range;
  }

  return nullptr;
}

/* ----------------------------------------------------------------------------
 */
b8 Font::getPackedChar(PackedChar* out, u32 codepoint)
{
  PackRange* range = getRangeOfCodepoint(codepoint);
  if (!range)
    return false;
  getPackedChar(out, range, codepoint);
  return true;
}

/* ----------------------------------------------------------------------------
 */
void Font::getPackedChar(PackedChar* out, PackRange* range, u32 codepoint)
{
  *out = *(range->chardata + codepoint - range->first_codepoint);
}

/* ----------------------------------------------------------------------------
 */
s64 Font::writeAssetPath(io::IO* io, String name, String ext, AssetMgr& assetmgr)
{
  return io::formatv(io, assetmgr.getAssetDir(), "/fonts/", name, '.', ext);
}

/* ----------------------------------------------------------------------------
 */
s64 Font::writeDataPath(io::IO* io, String name, AssetMgr& assetmgr)
{
  return io::formatv(io, assetmgr.getDataDir(), "/fonts/", name, ".font");
}

/* ----------------------------------------------------------------------------
 */
b8 Font::load(
    Font* out,
    String name, 
    AssetMgr& assetmgr)
{
  INFO("loading font '", name, "'\n");

  using namespace fs;

  PathBuffer data_path;
  writeDataPath(&data_path, name, assetmgr);

  if (!Path::exists(data_path.asStr()))
    return ERROR("attempt to load font '", name, "' but there is no data at "
                 "path '", data_path.asStr(), "'\n");

  out->handle = assetmgr.loadAsset(data_path.asStr());
  if (isnil(out->handle))
    return ERROR("failed to load asset for font '", name, "'\n");

  out->data = (FontData*)assetmgr.getAsset(out->handle)->data;
  
  FontData* data = out->data;

  // Adjust pointers to point at correct data.
  data->ranges = (PackRange*)(out->data + 1);

  for (s32 range_idx = 0; range_idx < data->num_ranges; ++range_idx)
  {
    PackRange& range = data->ranges[range_idx];
    range.chardata = 
      (PackedChar*)((u8*)data + (u64)range.chardata);
  }

  INFO("loading font's texture\n");

  // Load the texture.
  if (!Texture::load(
        &out->texture,
        name,
        assetmgr))
    return ERROR("failed to load font texture\n");

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 FontData::serialize(io::IO* out)
{
  out->write({(u8*)this, offsetof(FontData, ranges)});

  // Write dummy pointer memory to be readjusted when loaded.
  void* dummy = (void*)0xff;
  out->write(&dummy);

  u64 char_data_offset = sizeof(FontData) + num_ranges * sizeof(PackRange);
  
  if (ranges)
  {
    // Serialize the ranges array.
    for (s32 range_idx = 0; range_idx < num_ranges; ++range_idx)
    {
      PackRange& range = ranges[range_idx];

      out->write({(u8*)&range, offsetof(PackRange, chardata)});

      // Store offset to this range's char data array from the beginning 
      // of the data.
      out->write(&char_data_offset);

      char_data_offset += range.num_chars * sizeof(PackedChar);
    }

    // Serialize the char data arrays.
    for (s32 range_idx = 0; range_idx < num_ranges; ++range_idx)
    {
      PackRange& range = ranges[range_idx];

      out->write(
        {
          (u8*)range.chardata, 
          range.num_chars*sizeof(PackedChar)
        });
    }
  }

  return true;
}


