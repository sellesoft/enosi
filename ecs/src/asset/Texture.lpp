$ local cmn = require "common"

#include "iro/io/IO.h"
#include "iro/fs/File.h"
#include "iro/fs/Path.h"
#include "iro/Platform.h"

@@lpp.import "asset/Texture.lh"
@@lpp.import "asset/AssetMgr.lh"
@@lpp.import "graphics/Renderer.lh"

#include "cassert"

static Logger logger = 
  Logger::create("ecs.texture"_str, Logger::Verbosity::Debug);

// TODO(sushi) put somewhere common.
typedef io::StaticBuffer<512> PathBuffer;

/* ----------------------------------------------------------------------------
 */
s64 Texture::writeDataPath(io::IO* io, String name, AssetMgr& assetmgr)
{
  return io::formatv(io, 
      assetmgr.getDataDir(), "/textures/", name, ".texture");
}

/* ----------------------------------------------------------------------------
 */
b8 TextureData::serialize(io::IO* out)
{
  out->write({(u8*)this, offsetof(TextureData, pixels)});

  void* dummy = (void*)0xff;
  out->write(&dummy);

  u64 pixel_stride = 0;
  switch (format)
  {
    case ImageFormat::BW: pixel_stride = 1; break;
    case ImageFormat::BWA: pixel_stride = 2; break;
    case ImageFormat::RGB: pixel_stride = 3; break;
    case ImageFormat::RGBA: pixel_stride = 4; break;
  }
  assert(pixel_stride != 0);

  u64 pixels_bytes = width * height * pixel_stride;
  out->write({(u8*)pixels, pixels_bytes});

  return true;
}

/* ----------------------------------------------------------------------------
 */
MovedAssetRef Texture::load(
    String name,
    AssetMgr& assetmgr,
    gfx::Renderer& renderer)
{
  using namespace fs;

  TRACE("loading '", name, "'\n");

  PathBuffer data_path_buf;
  writeDataPath(&data_path_buf, name, assetmgr);

  String data_path = data_path_buf.asStr();

  MovedAssetRef existing = assetmgr.findAsset(data_path);
  if (notnil(existing))
    return existing;

  TRACE("loading '", name, "' which is unloaded\n");
  SCOPED_INDENT;

  if (!Path::exists(data_path))
  {
    ERROR("attempt to load texture '", name, "' but there is no asset "
          "at path '", data_path, "'\n");
    return nil;
  }

  auto r_texture = TextureRef(assetmgr.allocateAsset<Texture>(data_path));
  if (isnil(r_texture))
  {
    ERROR("failed to load texture '", name, "'\n");
    return nil;
  }

  Texture* texture = r_texture.getData();
  
  auto compiled_data_file = File::from(data_path, OpenFlag::Read);
  if (isnil(compiled_data_file))
  {
    ERROR("failed to open compiled texture data from '", data_path, "'\n");
    return nil;
  }

  u64 file_size = compiled_data_file.getInfo().byte_size;
  texture->compiled = (TextureData*)mem::stl_allocator.allocate(file_size);

  compiled_data_file.read({(u8*)texture->compiled, file_size});

  TextureData* data = texture->compiled;

  // Repoint the data's pixels.
  data->pixels = (void*)(data + 1);

  renderer.loadTexture(texture);

  return r_texture.move();
}

/* ----------------------------------------------------------------------------
 */
b8 Texture::compileFromMemory(void* pixels, CompileParams& params)
{
  using namespace fs;

  // Ensure the data directories exist.
  if (!platform::makeDir(Path::removeBasename(params.data_path), true))
    return ERROR("failed to create data directories for data at '",
                 params.data_path);

  TextureData data;

  data.format = params.format;
  data.filter = params.filter;
  data.address_mode = params.address_mode;
  data.kind = params.kind;

  data.width = params.width;
  data.height = params.height;

  data.pixels = pixels;

  auto data_file = 
    File::from(params.data_path, 
        OpenFlag::Create
      | OpenFlag::Truncate
      | OpenFlag::Write);
  if (isnil(data_file))
    return ERROR("failed to open texture data file for writing at '", 
                 params.data_path, "'\n");
  defer { data_file.close(); };

  if (!data.serialize(&data_file))
    return ERROR("failed to serialize texture\n");

  return true;
}
