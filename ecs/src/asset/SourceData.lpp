$ local cmn = require "common"

@@lpp.import "asset/SourceData.lh"

#include "iro/fs/File.h"

/* ----------------------------------------------------------------------------
 */
void SourceData::dump(io::IO* out, u32 depth) const
{
  auto indent = [&]()
  {
    for (u32 i = 0; i < depth; ++i)
      out->write("  "_str);
  };

  indent();
  if (notnil(name))
    io::formatv(out, name, " = ");

  if (notnil(val.str))
  {
    if (val.kind == Value::Kind::Number)
      io::format(out, val.str);
    else
      io::formatv(out, '"', val.str, '"');
  }
  else if (hasObjectData())
  {
    if (notnil(type))
      io::formatv(out, type);

    if (hasChildren())
    {
      io::format(out, '\n');
      indent();
      io::format(out, "{\n");

      for (const SourceData* child : children)
      {
        child->dump(out, depth + 1);
        io::format(out, ",\n");
      }

      indent();
      io::format(out, '}');
    }
    else
    {
      io::format(out, "{}");
    }
    
  }
  else
  {
    // This is not defined, and is more to indicate invalid source data.
    // We could maybe define it in its language though
    io::format(out, "nil");
  }
}

/* ----------------------------------------------------------------------------
 */
void SourceData::dump(u32 depth) const
{
  dump(&fs::stdout, depth);
  io::format(&fs::stdout, '\n');
}
