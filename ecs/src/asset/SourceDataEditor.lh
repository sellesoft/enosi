/*
 *  Widget for editing some source data.
 */

$ require "common"
$ local ui = require "ui.UI"

@@lpp.import "ui/Item.lh"

@@lpp.import "ui/widgets/InputText.lh"

@@lpp.import "graphics/Font.lh"

@@lpp.import "asset/SourceDataFile.lh"

struct SourceData;

namespace ui
{

struct DatumState;

/* ============================================================================
 */
struct SourceDataEditor : Item
{
  // The SourceData we are editing. This is not owned by the editor, and 
  // so is not cleaned up when setSourceData is called, and is expected to
  // be kept in memory until released from the editor.
  SourceData* sdata;
  SourceDataFile* sfile;

  SourceDataFile default_data;

  u64 type_id;

  f32 max_name_width;

  DatumState* current_datum;
  DatumState* hovered;

  gfx::Font* font;
  gfx::Texture font_texture;

  /* ==========================================================================
   *  State relevant for a Datum being edited textually. This is used to 
   *  reduce some of the overhead of datum states having to store and manage
   *  their own input text states as well as to reduce the amount of 
   *  input text states we store to 1.
   */
  struct DatumTextEdit
  {
    enum class Kind
    {
      Name,
      Type,
      Value,
    };

    Kind kind;

    DatumState* datum;
    SourceData* sdata;

    vec2f pos;
    vec2f size;

    // InputTextState input_text;

    void update(ItemUpdateContext& ctx, SourceDataEditor* editor);

    void onFocusLost(SourceDataEditor* editor);
  };

  DatumTextEdit datum_text_edit;

  // An interface for recieving notifications when the source data editor does
  // certain things.
  struct Interface
  {
    // Called when some SourceData has been changed.
    virtual void onEdit(SourceData* data) = 0;
  };

  Interface* interface;

  static SourceDataEditor* create(UI& ui, Interface* interface = nullptr);
  void destroy();

  void setSourceData(
      UI& ui, 
      SourceData* data, 
      SourceDataFile* file, 
      u64 type_id = 0);

  void evaluate(UI& ui) override;
  void update(ItemUpdateContext& ctx) override;
  void reportDrawCmds(UI& ui, DrawCmdLists& lists) override;
  b8 onHitTest(vec2f local_cursor) override;

  // Used by datum states during 'update' to report some area that if clicked
  // will begin textually editing some data. This should only be used during
  // an update in which the reason == MouseReleased (unless in the future 
  // we have some other way to focus text boxes), as if this finds that the
  // cursor is contained in the provided rect, it will set the current 
  // text edit state to the provided information.
  void beginEditDatumText(
    UI& ui,
    DatumState* datum,
    SourceData* sdata, 
    DatumTextEdit::Kind kind,
    vec2f pos,
    vec2f size);

  b8 isEditingDatumText(
    SourceData* sdata, 
    DatumTextEdit::Kind kind) const;

  void endEditDatumText(SourceData* sdata, DatumTextEdit::Kind kind);

  void onEdit(SourceData* data)
  {
    if (interface)
      interface->onEdit(data);
  }

  void onSourceDataReplaced(SourceData* old_data, SourceData* new_data);

  void notifyExternalChange()
  {
    setDirty();
  }

  SourceData* parseDefaultData(String s);

private:
  
  void placeSourceDataItems(UI& ui, SourceData* sdata);
};

}
