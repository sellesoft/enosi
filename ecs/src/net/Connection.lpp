/*
 * Packet header and fragmentation explanation goes here.
 *
 * TODOs:
 *   explain message fragmentation and MTU
 *   crc32 instead of protocol
 *   platform layer?
 *   avoid congestion
 *
 * References:
 *   https://github.com/id-Software/Quake-III-Arena/blob/master/code/qcommon/qcommon.h
 *   https://gafferongames.com/post/sending_and_receiving_packets/
 */
$ require "common"

$ if IRO_WIN32 then
#define WIN32_LEAN_AND_MEAN
#include <Winsock2.h>
#include <Ws2ipdef.h>
#include "iro/Platform_Win32.h"
$ else -- if IRO_WIN32
#include <sys/socket.h>
#include <netinet/in.h>
#include <fcntl.h>
#include "errno.h"
#include "string.h"
#include "unistd.h"
#include "sys/ioctl.h"
$ end -- if not IRO_WIN32

@@lpp.import "net/Address.lh"
@@lpp.import "net/Connection.lh"
@@lpp.import "net/Message.lh"

#include "iro/Common.h"
#include "iro/Logger.h"
#include "iro/memory/Allocator.h"

#include <mutex>

using namespace iro;

@log.ger(net.connection, Info)

namespace net
{

/* ============================================================================
 */
// Protocol ID: <3><C><dollar><version>
static constexpr u32 PROTOCOL_VERSION = 0;
static constexpr u32 PROTOCOL_ID = 0x33422400 + PROTOCOL_VERSION;
static constexpr u32 PRIORITY_SEQUENCE = -1;
static constexpr u16 FRAGMENT_BIT = (1 << 15);

/* ============================================================================
 */
static int s_ipv6_socket = 0;
static b8 s_ipv6_socket_is_bound = false;

/* ============================================================================
 */
struct OfflineMessage
{
  std::mutex mutex;
  volatile u16 size;
  u8 data[Message::MAX_SIZE];
};

static OfflineMessage s_offline_messages[2];

/* ============================================================================
 */
struct QueuedMessage
{
  u16 size;
  u8 data[Message::MAX_SIZE];
  QueuedMessage* next;
};

/* ----------------------------------------------------------------------------
 */
b8 init()
{
  @log.trace("initializing net\n");

$ if IRO_WIN32 then
  WSADATA wsa_data;
  if (NO_ERROR != WSAStartup(MAKEWORD(2,2), &wsa_data))
    return @log.error("Failed to startup WSA due to error: ",
      platform::Win32ErrMsg(WSAGetLastError()));
$ end -- if IRO_WIN32

  // create the ipv6 socket
  s_ipv6_socket = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDP);
$ if IRO_WIN32 then
  if (s_ipv6_socket == INVALID_SOCKET)
    return @log.error("Failed to open the IPv6 socket due to error: ",
                      platform::Win32ErrMsg(WSAGetLastError()));
$ else -- if IRO_WIN32
  if (s_ipv6_socket < 0)
    return @log.error("Failed to open the IPv6 socket due to error: ",
                      strerror(errno), "\n");
$ end -- if not IRO_WIN32
  @log.debug("Opened the IPv6 socket\n");

  auto close_ipv6_socket_if_failure = deferWithCancel
  {
$ if IRO_WIN32 then
    closesocket(s_ipv6_socket);
$ else -- if IRO_WIN32
    close(s_ipv6_socket);
$ end -- if not IRO_WIN32
  };

  // set the sockets to non-blocking
  u_long non_blocking = true;
$ if IRO_WIN32 then
  if (SOCKET_ERROR == ioctlsocket(s_ipv6_socket, FIONBIO, &non_blocking))
    return @log.error("Failed to make the IPv6 socket non-blocking due to"
                      " error: ", platform::Win32ErrMsg(WSAGetLastError()));
$ else -- if IRO_WIN32
  if (-1 == fcntl(
      s_ipv6_socket, F_SETFL, fcntl(s_ipv6_socket, F_GETFL, 0) | O_NONBLOCK))
    return @log.error("Failed to make the IPv6 socket non-blocking"
                      " due to error: ", strerror(errno), "\n");
$ end -- if not IRO_WIN32
  @log.debug("Setting the IPv6 socket to non-blocking\n");

  // set the socket to be broadcast capable
  int i = 1;
$ if IRO_WIN32 then
  if (SOCKET_ERROR == setsockopt(s_ipv6_socket, SOL_SOCKET, SO_BROADCAST,
                                 (char*)&i, sizeof(i)))
    return @log.error("Failed to make the IPv6 socket broadcast capable due"
                      " to error: ", platform::Win32ErrMsg(WSAGetLastError()));
$ else -- if IRO_WIN32
  if (-1 == setsockopt(s_ipv6_socket, SOL_SOCKET, SO_BROADCAST,
                       (char*)&i, sizeof(i)))
    return @log.error("Failed to make the IPv6 socket broadcast capable"
                      " due to error: ", strerror(errno), "\n");
$ end -- if not IRO_WIN32
  @log.debug("Setting the IPv6 socket to be broadcast capable\n");

  // disable IPv6-only mode to allow IPv4 connections
  i = 0;
$ if IRO_WIN32 then
  if (SOCKET_ERROR == setsockopt(s_ipv6_socket, IPPROTO_IPV6, IPV6_V6ONLY, 
                                 (char*)&i, sizeof(i)))
    return @log.error("Failed to disable IPv6-only mode due to error: ",
                      platform::Win32ErrMsg(WSAGetLastError()));
$ else -- if IRO_WIN32
  if (-1 == setsockopt(s_ipv6_socket, IPPROTO_IPV6, IPV6_V6ONLY,
                       (char*)&i, sizeof(i)))
    return @log.error("Failed to disable IPv6-only mode due to error: ",
                      strerror(errno), "\n");
$ end -- if not IRO_WIN32
  @log.debug("Disabled IPv6-only mode\n");

  close_ipv6_socket_if_failure.cancel();
  return true;
}

/* ----------------------------------------------------------------------------
 */
void deinit()
{
  @log.trace("deinitializing net\n");

$ if IRO_WIN32 then
  closesocket(s_ipv6_socket);
  WSACleanup();
$ else -- if IRO_WIN32
  close(s_ipv6_socket);
$ end -- if not IRO_WIN32
}

/* ----------------------------------------------------------------------------
 */
b8 bind(u16 port)
{
  @log.trace("binding socket to port ", port, "\n");

  sockaddr_in6 ipv6_socket_address;
  memset(&ipv6_socket_address, 0, sizeof(ipv6_socket_address));
  ipv6_socket_address.sin6_family = AF_INET6;
  ipv6_socket_address.sin6_port = htons(port);
  ipv6_socket_address.sin6_addr = in6addr_any;

  int ipv6_bind_result = bind(s_ipv6_socket,
                             (sockaddr*)&ipv6_socket_address,
                             sizeof(ipv6_socket_address));
$ if IRO_WIN32 then
  if (SOCKET_ERROR == ipv6_bind_result)
    return @log.error("Failed to bind the IPv6 socket due to error: ",
                      platform::Win32ErrMsg(WSAGetLastError()));
$ else -- if IRO_WIN32
  if (-1 == ipv6_bind_result)
    return @log.error("Failed to bind the IPv6 socket due to error: ",
                      strerror(errno), "\n");
$ end -- if not IRO_WIN32

  @log.debug("Bound the IPv6 socket to port [", port, "]\n");
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 checkForPackets(
  Address& from_address,
  StackArray<u8, MAX_FRAGMENT_SIZE>& data)
{
  @log.trace("checking for packets\n");

$ if IRO_WIN32 then
  typedef int socklen_t;
$ end -- if IRO_WIN32

  // check for ipv6 packets
  if (s_ipv6_socket)
  {
    sockaddr_in6 from;
    socklen_t from_len = sizeof(from);
    int bytes_received = recvfrom(s_ipv6_socket, (char*)data.arr,
                                  MAX_FRAGMENT_SIZE, 0,
                                  (sockaddr*)&from, &from_len);
$ if IRO_WIN32 then
    if (SOCKET_ERROR == bytes_received)
    {
      int error = WSAGetLastError();
      if (WSAEWOULDBLOCK != error)
        @log.error("Failed to receive an IPv6 packet due to WSA error: ",
                   platform::Win32ErrMsg(error));
      return false;
    }
$ else -- if IRO_WIN32
    if (-1 == bytes_received)
    {
      if (EWOULDBLOCK != errno)
         @log.error("Failed to receive an IPv6 packet due to error: ",
                    strerror(errno), "\n");
      return false;
    }
$ end -- if not IRO_WIN32

    if (bytes_received < sizeof(FragmentHeader))
      return false;

    u8 ipv6[16];
    //for (int i = 0; i < 8; i++)
    //  ((u16*)ipv6)[i] = ntohs(((u16*)&from.sin6_addr)[i]);
    mem::copy(ipv6, &from.sin6_addr, 16);
    from_address = Address(ipv6, ntohs(from.sin6_port));

    data.len = (u64)bytes_received;
    return true;
  }

  return false;
}

/* ----------------------------------------------------------------------------
 */
b8 Connection::init(Address address, iro::mem::Allocator* allocator)
{
  assertpointer(allocator);
  @log.trace("initializing a connection\n");

  this->state = State::Disconnected;
  this->address = address;
  if (this->address.port == 0)
    this->address.port = SERVER_PORT;
  this->acknowledged_sequence = 0;
  this->acknowledged_bitfield = 0;
  this->incoming_message_sequence = 0;
  this->incoming_fragment_sequence = 0;
  this->incoming_message_size = 0;
  this->incoming_message_pending_fragments = true;
  this->outgoing_message_sequence = 1;
  this->outgoing_message_size = 0;
  this->outgoing_message_pending_offset = 0;
  this->outgoing_message_pending_fragments = false;
  this->message_queue_start = nullptr;
  this->message_queue_end = &this->message_queue_start;
  this->allocator = allocator;

  return true;
}

/* ----------------------------------------------------------------------------
 */
static b8 sendPacket(const Address& address, void* data, u16 size)
{
  @log.trace("sending a packet of ", size, " bytes\n");

  sockaddr_in6 socket_address;
  memset(&socket_address, 0, sizeof(socket_address));
  socket_address.sin6_family = AF_INET6;
  socket_address.sin6_port = htons(address.port);
  if (address.type == AddressType::Local)
  {
    // IPv6 loopback address (::1)
    socket_address.sin6_addr.s6_addr[15] = 1;
  }
  else
  {
    memcpy(&socket_address.sin6_addr, &address.ipv6,
           sizeof(socket_address.sin6_addr));
  }

  int bytes_sent = sendto(s_ipv6_socket, (const char*)data, size, 0,
                         (sockaddr*)&socket_address, sizeof(socket_address));

$ if IRO_WIN32 then
  if (SOCKET_ERROR == bytes_sent)
  {
    int error = WSAGetLastError();
    if (WSAEWOULDBLOCK == error)
      return false;
    else
      return @log.error("Failed to send a packet due to WSA error: ",
                        platform::Win32ErrMsg(error));
  }
$ else -- if IRO_WIN32
  if (-1 == bytes_sent)
  {
    if (EWOULDBLOCK == errno)
      return false;
    else
      return @log.error("Failed to send a packet due to error: ",
                        strerror(errno), "\n");
  }
$ end -- if not IRO_WIN32

  @log.debug("Sent ", bytes_sent, " bytes to: ", address, "\n");
  assert(size == (u16)bytes_sent);
  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Connection::sendNextFragment()
{
  @log.trace("sending a message fragment\n");

  u8* cursor = (  this->outgoing_message_data + sizeof(FragmentHeader)
                + this->outgoing_message_pending_offset);

  FragmentHeader* header = (FragmentHeader*)cursor - 1;
  header->protocol = PROTOCOL_ID;
  header->sequence_index = this->outgoing_message_sequence;
  header->ack_index = this->acknowledged_sequence;
  header->ack_bitfield = this->acknowledged_bitfield;
  header->fragment_offset =
    this->outgoing_message_pending_offset | FRAGMENT_BIT;

  header->data_size = MAX_FRAGMENT_DATA_SIZE;
  if (  this->outgoing_message_pending_offset + header->data_size
      > this->outgoing_message_size)
  {
    header->data_size = (  this->outgoing_message_size
                         - this->outgoing_message_pending_offset);
  }

  u32 packet_size = sizeof(FragmentHeader) + header->data_size;
  if (!sendPacket(this->address, header, packet_size))
    return false;

  this->outgoing_message_pending_offset += header->data_size;

  // NOTE(delle) We must send an extra fragment if we exactly match the max
  // size because we determine if this is the final fragment on receival by
  // comparing against that max size.
  b8 sent_final_fragment = (   this->outgoing_message_pending_offset
                            == this->outgoing_message_size);
  if (sent_final_fragment && header->data_size != MAX_FRAGMENT_DATA_SIZE)
  {
    this->outgoing_message_sequence++;

    if (this->message_queue_start)
    {
      @log.debug("Popping a message of [", this->message_queue_start->size,
                 "] bytes off the message queue for [", this->address, "].\n");

      this->outgoing_message_pending_offset = 0;
      this->outgoing_message_size = this->message_queue_start->size;
      mem::copy(this->outgoing_message_data + sizeof(FragmentHeader),
                this->message_queue_start->data,
                this->message_queue_start->size);

      this->message_queue_start = this->message_queue_start->next;
      if (this->message_queue_start == nullptr)
      {
        @log.debug("Emptied the message queue for [", this->address, "].\n");
        this->message_queue_end = &this->message_queue_start;
      }
    }
    else
    {
      this->outgoing_message_pending_fragments = false;
    }
  }

  return true;
}

/* ----------------------------------------------------------------------------
 */
b8 Connection::send(Source source, const Message& message, b8 priority)
{
  assertrange(message.size, 1, Message::MAX_SIZE);

  // save offline message
  if (this->address.type == AddressType::Offline)
  {
    @log.trace("saving a message via an offline connection\n");
    s_offline_messages[(int)source].size = message.size;
    mem::copy(s_offline_messages[(int)source].data, message.data,
              message.size);
    return true;
  }

  if (s_ipv6_socket == 0)
    return @log.error("Attempted to send a message with an unbound socket.");

  @log.trace("sending a message to a remote connection\n");

  // queue message if there are pending fragments
  if (!priority && this->outgoing_message_pending_fragments)
  {
    assertpointer(this->allocator);
    QueuedMessage* queued_message = (QueuedMessage*)
      this->allocator->allocate(sizeof(QueuedMessage));
    if (queued_message == nullptr)
      return @log.error("Failed to allocate a queued message when attempting"
                        " to send a message to [", this->address, "].\n");

    queued_message->size = message.size;
    mem::copy(queued_message->data, message.data, message.size);
    queued_message->next = nullptr;
    *this->message_queue_end = queued_message;
    this->message_queue_end = &(*this->message_queue_end)->next;

    this->sendNextFragment();
    return false;
  }

  // fragment large messages
  if (message.size > MAX_FRAGMENT_DATA_SIZE)
  {
    if (priority)
    {
      return @log.error("Attempted to send a priority message with size [",
                        message.size, "] which is greater than max fragment"
                        " data size [", MAX_FRAGMENT_DATA_SIZE, "]. This would"
                        " result in the message being fragmented which is"
                        " disallowed for priority messages since they are not"
                        " sequenced.\n");
    }

    @log.warn("Message size [", message.size, "] is greater than max fragment"
              " data size [", MAX_FRAGMENT_DATA_SIZE, "]. This means that we"
              " might have to allocate, copy, and queue future messages.\n");

    this->outgoing_message_pending_fragments = true;
    this->outgoing_message_pending_offset = 0;
    this->outgoing_message_size = message.size;
    mem::copy(this->outgoing_message_data + sizeof(FragmentHeader),
              message.data, message.size);

    // send first fragment now
    this->sendNextFragment();
    return false;
  }

  // build the packet
  FragmentHeader* header = (FragmentHeader*)this->outgoing_message_data;
  header->protocol = PROTOCOL_ID;
  header->sequence_index =
    (priority) ? PRIORITY_SEQUENCE : this->outgoing_message_sequence;
  header->ack_index = this->acknowledged_sequence;
  header->ack_bitfield = this->acknowledged_bitfield;
  header->fragment_offset = 0;
  header->data_size = message.size;
  mem::copy(this->outgoing_message_data + sizeof(*header), message.data,
            message.size);
  this->outgoing_message_size = sizeof(*header) + message.size;

  // send the packet
  if (!sendPacket(this->address, this->outgoing_message_data,
                  this->outgoing_message_size))
  {
    @log.warn("Failed to send a message. This means that we might have"
              " to allocate, copy, and queue future messages.\n");

    this->outgoing_message_pending_fragments = true;
    this->outgoing_message_pending_offset = 0;
    this->outgoing_message_size = message.size;
    return false;
  }

  this->outgoing_message_sequence++;
  return true;
}

/* ----------------------------------------------------------------------------
 */
void Connection::receive(
  Source source,
  StackArray<u8, MAX_FRAGMENT_SIZE>& data)
{
  if (this->address.type == AddressType::Offline)
  {
    if (s_offline_messages[(int)source].size == 0)
    {
      this->incoming_message_pending_fragments = true;
      return;
    }
    else
    {
      @log.trace("loading a message via an offline connection\n");
      mem::copy(this->incoming_message_data,
                s_offline_messages[(int)source].data,
                s_offline_messages[(int)source].size);
      this->incoming_message_size = s_offline_messages[(int)source].size;
      this->incoming_message_pending_fragments = false;
      s_offline_messages[(int)source].size = 0;
      return;
    }
  }

  // range validated in net::checkForPackets
  assertrange(data.len, sizeof(FragmentHeader), MAX_FRAGMENT_SIZE);
  @log.trace("receiving a packet via a remote connection\n");

  Message message;
  message.init(data.arr, data.len);
  u32 protocol = message.readU32();
  u32 sequence = message.readU32();
  u32 ack_index = message.readU32();
  u32 ack_bitfield = message.readU32();
  u16 fragment_offset = message.readU16();
  u16 data_size = message.readU16();

  // discard invalid protocol packets
  if (protocol != PROTOCOL_ID)
  {
    @log.debug("Incorrect protocol [", protocol, "] from [", this->address,
               "]; expected [", PROTOCOL_ID, "].\n");
    return;
  }

  // discard out of order or duplicate packets
  // TODO(delle) handle sequence integer overflow
  if (sequence <= this->incoming_message_sequence)
  {
    @log.debug("Out of order or duplicate sequence [", sequence, "] from [",
               this->address, "]; expected [", this->incoming_message_sequence,
               "].\n");
    return;
  }

  // log dropped packets
  u32 dropped = sequence - (this->incoming_message_sequence + 1);
  if (dropped > 0)
  {
    @log.debug("Dropped [", dropped, "] packets at sequence [", sequence,
               "] from [", this->address, "].\n");
  }

  // check if this is a message fragment
  if (fragment_offset & FRAGMENT_BIT)
  {
    fragment_offset &= ~FRAGMENT_BIT;

    // reset message buffer if incoming fragment has a later sequence
    if (sequence != this->incoming_fragment_sequence)
    {
      this->incoming_fragment_sequence = sequence;
      this->incoming_message_size = 0;
    }

    // discard out of order fragments
    if (fragment_offset != this->incoming_message_size)
    {
      @log.debug("Dropped a message fragment with offset [", fragment_offset,
                 "] and sequence [", sequence, "] from [",
                 this->address, "].\n");
      return;
    }

    // discard if we would overflow the message buffer
    u16 new_message_size = this->incoming_message_size + data_size;
    if (new_message_size > Message::MAX_SIZE)
    {
      @log.debug("Fragments with sequence [", sequence, "] from [",
                 this->address, "] are too large [", new_message_size,
                 "] to fit in a message [", Message::MAX_SIZE, "].\n");
      return;
    }

    // add the fragment to the message buffer
    mem::copy(this->incoming_message_data + this->incoming_message_size,
              data.arr + sizeof(FragmentHeader), data_size);
    this->incoming_message_size = new_message_size;

    // the final message fragment size is less than MAX_FRAGMENT_DATA_SIZE
    if (data_size == MAX_FRAGMENT_DATA_SIZE)
    {
      this->incoming_message_pending_fragments = true;
      return;
    }
  }
  else // not fragmented
  {
    mem::copy(this->incoming_message_data, data.arr + sizeof(FragmentHeader),
              data_size);
    this->incoming_message_size = data_size;
  }

  this->incoming_message_pending_fragments = false;
  this->incoming_message_sequence = sequence;
}

/* ----------------------------------------------------------------------------
 */
void Connection::lock(Source source)
{
  if (this->address.type == AddressType::Offline)
    s_offline_messages[(int)source].mutex.lock();
}

void Connection::unlock(Source source)
{
  if (this->address.type == AddressType::Offline)
    s_offline_messages[(int)source].mutex.unlock();
}

} // namespace net
