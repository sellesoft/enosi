#ifndef _ecs_net_NetEventBus_h
#define _ecs_net_NetEventBus_h

#include "iro/Common.h"

namespace iro::mem { struct Allocator; }
namespace net { struct Message; }

namespace net
{

struct EventBus
{
  struct EventBusData* data;

  b8 init(iro::mem::Allocator* allocator);

  // Subscribes to an event received from the network
  template<typename T>
  void subscribeTo(void* subscriber, void (*callback)(void*, T&));

  // Queues an event that will be networked
  //   session is used to identify the recipient of the event on the server
  template<typename T>
  void queue(T& event) const;

  // Packs all queued events into a message
  //   session is used to identify the recipient of the message on the server
  void packEvents(Message& message, void* session = nullptr) const;

  // Parses a message and dispatches events to subscribers
  //   session is used to identify the sender of the message on the server
  b8 parseMessage(Message& message, void* session = nullptr) const;
};

} // namespace net

#endif // #ifndef _ecs_net_NetEventBus_h